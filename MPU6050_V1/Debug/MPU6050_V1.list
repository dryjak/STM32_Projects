
MPU6050_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080088d8  080088d8  000098d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d04  08008d04  0000a1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d04  08008d04  00009d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d0c  08008d0c  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d0c  08008d0c  00009d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d10  08008d10  00009d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008d14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001d8  08008eec  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08008eec  0000a540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001815d  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d9  00000000  00000000  00022365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00025440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffc  00000000  00000000  000268c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288b0  00000000  00000000  000278bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001865e  00000000  00000000  0005016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001014f6  00000000  00000000  000687ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169cc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  00169d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001704d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080088c0 	.word	0x080088c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	080088c0 	.word	0x080088c0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MPU6050_Init>:
float gy_offset = 0.0f;
float gz_offset = 0.0f;


MPU6050_STATE_t MPU6050_Init(MPU6050_t *MPU6050, I2C_HandleTypeDef *Hi2c, uint16_t Address)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	80fb      	strh	r3, [r7, #6]
	uint8_t CheckID;

	MPU6050->hi2c 		= 	Hi2c;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	601a      	str	r2, [r3, #0]
	MPU6050->address 	= 	Address;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	88fa      	ldrh	r2, [r7, #6]
 8000f3c:	809a      	strh	r2, [r3, #4]

	CheckID = Read8(MPU6050, 0x75);
 8000f3e:	2175      	movs	r1, #117	@ 0x75
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 f824 	bl	8000f8e <Read8>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]
	if (CheckID != 0x68)
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	2b68      	cmp	r3, #104	@ 0x68
 8000f4e:	d001      	beq.n	8000f54 <MPU6050_Init+0x30>
	{
		return MPU6050_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e018      	b.n	8000f86 <MPU6050_Init+0x62>
	}

	if (MPU6050_WakeUp(MPU6050) != MPU6050_OK)
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f000 f88b 	bl	8001070 <MPU6050_WakeUp>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MPU6050_Init+0x40>
	{
		return MPU6050_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e010      	b.n	8000f86 <MPU6050_Init+0x62>
	}
	if (MPU6050_SetAccelerationRange(MPU6050) != MPU6050_OK)
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f8bd 	bl	80010e4 <MPU6050_SetAccelerationRange>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MPU6050_Init+0x50>
	{
		return MPU6050_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e008      	b.n	8000f86 <MPU6050_Init+0x62>
	}
	if (MPU6050_SetGyroRange(MPU6050) != MPU6050_OK)
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f000 f89c 	bl	80010b2 <MPU6050_SetGyroRange>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MPU6050_Init+0x60>
	{
		return MPU6050_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <MPU6050_Init+0x62>
	}

	return MPU6050_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <Read8>:

uint8_t Read8(MPU6050_t *MPU6050, uint8_t Register)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b088      	sub	sp, #32
 8000f92:	af04      	add	r7, sp, #16
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(MPU6050->hi2c, ((MPU6050->address) << 1), Register, 1, &Value, 1, MPU6050_TIMEOUT);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	889b      	ldrh	r3, [r3, #4]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030f 	add.w	r3, r7, #15
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f001 fd0c 	bl	80029d8 <HAL_I2C_Mem_Read>

	return Value;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <Write8>:

MPU6050_STATE_t Write8(MPU6050_t *MPU6050, uint8_t Register, uint8_t Value)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af04      	add	r7, sp, #16
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	70fb      	strb	r3, [r7, #3]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write(MPU6050->hi2c, (MPU6050->address) << 1, Register, 1, &Value, 1, MPU6050_TIMEOUT);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	1cbb      	adds	r3, r7, #2
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f001 fbd9 	bl	80027b0 <HAL_I2C_Mem_Write>
 8000ffe:	4603      	mov	r3, r0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Read16>:

int16_t Read16(MPU6050_t *MPU6050, uint8_t Register)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(MPU6050->hi2c, ((MPU6050->address) << 1), Register, 1, Value, 2, MPU6050_TIMEOUT);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b299      	uxth	r1, r3
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2302      	movs	r3, #2
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	f001 fccf 	bl	80029d8 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | (Value[1]));
 800103a:	7b3b      	ldrb	r3, [r7, #12]
 800103c:	b21b      	sxth	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <MPU6050_WHO_AM_I>:

uint8_t MPU6050_WHO_AM_I (MPU6050_t *MPU6050)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	uint8_t DeviceAdress = Read8(MPU6050, 0x75);
 800105a:	2175      	movs	r1, #117	@ 0x75
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff96 	bl	8000f8e <Read8>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	return DeviceAdress;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <MPU6050_WakeUp>:

MPU6050_STATE_t MPU6050_WakeUp(MPU6050_t *MPU6050)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	//Firstly you need to read the register value
	uint8_t Value = Read8(MPU6050, PWR_MGMT_1);
 8001078:	216b      	movs	r1, #107	@ 0x6b
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff87 	bl	8000f8e <Read8>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]

	//Disable sleep mode by setting 6th bit to 0
	Value &= ~(1 << 6);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800108a:	73fb      	strb	r3, [r7, #15]
	//Setting cycle bit to 0
	Value &= ~(1 << 5);
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	f023 0320 	bic.w	r3, r3, #32
 8001092:	73fb      	strb	r3, [r7, #15]
	//Disabling the temperature sensor
	Value |= (1 << 3);
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	73fb      	strb	r3, [r7, #15]

	return Write8(MPU6050, PWR_MGMT_1, Value);
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	461a      	mov	r2, r3
 80010a0:	216b      	movs	r1, #107	@ 0x6b
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff91 	bl	8000fca <Write8>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <MPU6050_SetGyroRange>:

MPU6050_STATE_t MPU6050_SetGyroRange(MPU6050_t *MPU6050)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	//Firstly you need to read the register value
	uint8_t RegisterValue;
	RegisterValue = Read8(MPU6050, GYRO_CONFIG);
 80010ba:	211b      	movs	r1, #27
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff66 	bl	8000f8e <Read8>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]


	//setting FS_SEL[1:0] in order to setfull scale range
	RegisterValue &= (~((1 << 4) | (1 << 5)));		//setting 250 degrees per second
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80010cc:	73fb      	strb	r3, [r7, #15]
	return Write8(MPU6050, GYRO_CONFIG, RegisterValue);
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	461a      	mov	r2, r3
 80010d2:	211b      	movs	r1, #27
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff78 	bl	8000fca <Write8>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <MPU6050_SetAccelerationRange>:

MPU6050_STATE_t MPU6050_SetAccelerationRange(MPU6050_t *MPU6050)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	//Firstly you need to read the register value
	uint8_t RegisterValue;
	RegisterValue = Read8(MPU6050, ACCEL_CONFIG);
 80010ec:	211c      	movs	r1, #28
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff4d 	bl	8000f8e <Read8>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]

	RegisterValue &= (~((1 << 4)|(1 << 5)));		//setting acceleration to -/+ 2g
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80010fe:	73fb      	strb	r3, [r7, #15]
	return Write8(MPU6050, ACCEL_CONFIG, RegisterValue);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	461a      	mov	r2, r3
 8001104:	211c      	movs	r1, #28
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff5f 	bl	8000fca <Write8>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <MPU6050_ReadAccelerationRaw>:


//ACCELEROMETR DATA
MPU6050_STATE_t MPU6050_ReadAccelerationRaw(MPU6050_t *MPU6050, AccelRaw_t *AccelRaw)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	AccelRaw->AccelX = Read16(MPU6050, ACCEL_XOUT_H);
 8001120:	213b      	movs	r1, #59	@ 0x3b
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff70 	bl	8001008 <Read16>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	801a      	strh	r2, [r3, #0]
	AccelRaw->AccelY = Read16(MPU6050, ACCEL_YOUT_H);
 8001130:	213d      	movs	r1, #61	@ 0x3d
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff68 	bl	8001008 <Read16>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	805a      	strh	r2, [r3, #2]
	AccelRaw->AccelZ = Read16(MPU6050, ACCEL_ZOUT_H);
 8001140:	213f      	movs	r1, #63	@ 0x3f
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff60 	bl	8001008 <Read16>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	809a      	strh	r2, [r3, #4]

	return MPU6050_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MPU6050_ReadAcceleration>:
MPU6050_STATE_t MPU6050_ReadAcceleration(MPU6050_t *MPU6050, Accel_t *Accelerations, AccelOffset_t AccelOffset)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6178      	str	r0, [r7, #20]
 8001164:	6139      	str	r1, [r7, #16]
 8001166:	eef0 6a40 	vmov.f32	s13, s0
 800116a:	eeb0 7a60 	vmov.f32	s14, s1
 800116e:	eef0 7a41 	vmov.f32	s15, s2
 8001172:	edc7 6a01 	vstr	s13, [r7, #4]
 8001176:	ed87 7a02 	vstr	s14, [r7, #8]
 800117a:	edc7 7a03 	vstr	s15, [r7, #12]
	AccelRaw_t AccelRaw;
	MPU6050_ReadAccelerationRaw(MPU6050, &AccelRaw);
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	4619      	mov	r1, r3
 8001184:	6978      	ldr	r0, [r7, #20]
 8001186:	f7ff ffc6 	bl	8001116 <MPU6050_ReadAccelerationRaw>

	Accelerations->AccelX = (AccelRaw.AccelX / ACCEL_SCALE_FACTOR) - AccelOffset.OffsetX;
 800118a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001196:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001204 <MPU6050_ReadAcceleration+0xa8>
 800119a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800119e:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	edc3 7a00 	vstr	s15, [r3]
	Accelerations->AccelY = (AccelRaw.AccelY / ACCEL_SCALE_FACTOR) - AccelOffset.OffsetY;
 80011ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001204 <MPU6050_ReadAcceleration+0xa8>
 80011bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	edc3 7a01 	vstr	s15, [r3, #4]
	Accelerations->AccelZ = (AccelRaw.AccelZ / ACCEL_SCALE_FACTOR) - AccelOffset.OffsetZ - 1;
 80011ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001204 <MPU6050_ReadAcceleration+0xa8>
 80011de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	edc3 7a02 	vstr	s15, [r3, #8]


	return MPU6050_OK;
 80011f8:	2300      	movs	r3, #0

	*Gx = AccelX.Var16u;
	*Gy = AccelY.Var16u;
	*Gz = AccelZ.Var16u;
	*/
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	46800000 	.word	0x46800000

08001208 <MPU6050_CalibrateAccel>:

MPU6050_STATE_t MPU6050_CalibrateAccel(MPU6050_t *MPU6050, AccelOffset_t *AccelOffset)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	Accel_t Accelerations;
	int32_t SumX = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t SumY = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
	int32_t SumZ = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]

	uint8_t SamplesNumber = 100;
 800121e:	2364      	movs	r3, #100	@ 0x64
 8001220:	76bb      	strb	r3, [r7, #26]
	uint8_t i = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	76fb      	strb	r3, [r7, #27]

	for(i = 0; i < SamplesNumber; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	76fb      	strb	r3, [r7, #27]
 800122a:	e04e      	b.n	80012ca <MPU6050_CalibrateAccel+0xc2>
	{
		MPU6050_ReadAcceleration(MPU6050, &Accelerations, *AccelOffset);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	edd3 6a00 	vldr	s13, [r3]
 8001232:	ed93 7a01 	vldr	s14, [r3, #4]
 8001236:	edd3 7a02 	vldr	s15, [r3, #8]
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	eeb0 0a66 	vmov.f32	s0, s13
 8001242:	eef0 0a47 	vmov.f32	s1, s14
 8001246:	eeb0 1a67 	vmov.f32	s2, s15
 800124a:	4619      	mov	r1, r3
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff85 	bl	800115c <MPU6050_ReadAcceleration>

		SumX += Accelerations.AccelX * ACCEL_SCALE_FACTOR;
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001260:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001358 <MPU6050_CalibrateAccel+0x150>
 8001264:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
		SumY += Accelerations.AccelY * ACCEL_SCALE_FACTOR;
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001280:	edd7 7a04 	vldr	s15, [r7, #16]
 8001284:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001358 <MPU6050_CalibrateAccel+0x150>
 8001288:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800128c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	ee17 3a90 	vmov	r3, s15
 8001298:	623b      	str	r3, [r7, #32]
		SumZ += Accelerations.AccelZ * ACCEL_SCALE_FACTOR;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001358 <MPU6050_CalibrateAccel+0x150>
 80012ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b8:	ee17 3a90 	vmov	r3, s15
 80012bc:	61fb      	str	r3, [r7, #28]

		HAL_Delay(2);
 80012be:	2002      	movs	r0, #2
 80012c0:	f000 feec 	bl	800209c <HAL_Delay>
	for(i = 0; i < SamplesNumber; i++)
 80012c4:	7efb      	ldrb	r3, [r7, #27]
 80012c6:	3301      	adds	r3, #1
 80012c8:	76fb      	strb	r3, [r7, #27]
 80012ca:	7efa      	ldrb	r2, [r7, #27]
 80012cc:	7ebb      	ldrb	r3, [r7, #26]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3ac      	bcc.n	800122c <MPU6050_CalibrateAccel+0x24>
	}
	AccelOffset->OffsetX = SumX / (SamplesNumber * ACCEL_SCALE_FACTOR);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012dc:	7ebb      	ldrb	r3, [r7, #26]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001358 <MPU6050_CalibrateAccel+0x150>
 80012ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	edc3 7a00 	vstr	s15, [r3]
	AccelOffset->OffsetY = SumY / (SamplesNumber * ACCEL_SCALE_FACTOR);
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001302:	7ebb      	ldrb	r3, [r7, #26]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001358 <MPU6050_CalibrateAccel+0x150>
 8001310:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	edc3 7a01 	vstr	s15, [r3, #4]
	AccelOffset->OffsetZ = (SumZ / (SamplesNumber * ACCEL_SCALE_FACTOR)) - 1;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001328:	7ebb      	ldrb	r3, [r7, #26]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001332:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001358 <MPU6050_CalibrateAccel+0x150>
 8001336:	ee27 7a87 	vmul.f32	s14, s15, s14
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	edc3 7a02 	vstr	s15, [r3, #8]

	return MPU6050_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3728      	adds	r7, #40	@ 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	46800000 	.word	0x46800000

0800135c <MPU6050_ReadGyroRaw>:
	return MPU6050_OK;
}

//GYRO DATA
MPU6050_STATE_t MPU6050_ReadGyroRaw(MPU6050_t *MPU6050, GyroRaw_t *GyroRaw)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	GyroRaw->GyroX = Read16(MPU6050, GYRO_XOUT_H);
 8001366:	2143      	movs	r1, #67	@ 0x43
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fe4d 	bl	8001008 <Read16>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	801a      	strh	r2, [r3, #0]
	GyroRaw->GyroY = Read16(MPU6050, GYRO_YOUT_H);
 8001376:	2145      	movs	r1, #69	@ 0x45
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fe45 	bl	8001008 <Read16>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	805a      	strh	r2, [r3, #2]
	GyroRaw->GyroZ = Read16(MPU6050, GYRO_ZOUT_H);
 8001386:	2147      	movs	r1, #71	@ 0x47
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fe3d 	bl	8001008 <Read16>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	809a      	strh	r2, [r3, #4]

	return MPU6050_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <MPU6050_ReadGyro>:

MPU6050_STATE_t MPU6050_ReadGyro(MPU6050_t *MPU6050, Gyro_t *GyroCalculated, GyroOffset_t GyroOffset)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6178      	str	r0, [r7, #20]
 80013a8:	6139      	str	r1, [r7, #16]
 80013aa:	eef0 6a40 	vmov.f32	s13, s0
 80013ae:	eeb0 7a60 	vmov.f32	s14, s1
 80013b2:	eef0 7a41 	vmov.f32	s15, s2
 80013b6:	edc7 6a01 	vstr	s13, [r7, #4]
 80013ba:	ed87 7a02 	vstr	s14, [r7, #8]
 80013be:	edc7 7a03 	vstr	s15, [r7, #12]
	GyroRaw_t GyroRaw;
	MPU6050_ReadGyroRaw(MPU6050, &GyroRaw);
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4619      	mov	r1, r3
 80013c8:	6978      	ldr	r0, [r7, #20]
 80013ca:	f7ff ffc7 	bl	800135c <MPU6050_ReadGyroRaw>

	GyroCalculated->GyroX = (GyroRaw.GyroX / GYRO_SCALE_FACTOR) - GyroOffset.OffsetX;
 80013ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001440 <MPU6050_ReadGyro+0xa0>
 80013de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	edc3 7a00 	vstr	s15, [r3]
	GyroCalculated->GyroY = (GyroRaw.GyroY / GYRO_SCALE_FACTOR) - GyroOffset.OffsetY;
 80013f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001440 <MPU6050_ReadGyro+0xa0>
 8001400:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001404:	edd7 7a02 	vldr	s15, [r7, #8]
 8001408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	edc3 7a01 	vstr	s15, [r3, #4]
	GyroCalculated->GyroZ = (GyroRaw.GyroZ / GYRO_SCALE_FACTOR) - GyroOffset.OffsetZ;
 8001412:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001440 <MPU6050_ReadGyro+0xa0>
 8001422:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001426:	edd7 7a03 	vldr	s15, [r7, #12]
 800142a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	edc3 7a02 	vstr	s15, [r3, #8]

	return MPU6050_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	43030000 	.word	0x43030000

08001444 <MPU6050_CalibrateGyro>:

MPU6050_STATE_t MPU6050_CalibrateGyro(MPU6050_t *MPU6050, GyroOffset_t *GyroOffset)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	GyroRaw_t Gyro;
	int32_t SumX = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
	int32_t SumY = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
	int32_t SumZ = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

	uint8_t SamplesNumber = 100;
 800145a:	2364      	movs	r3, #100	@ 0x64
 800145c:	74bb      	strb	r3, [r7, #18]
	uint8_t i = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	74fb      	strb	r3, [r7, #19]

	for(i = 0; i < SamplesNumber; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	74fb      	strb	r3, [r7, #19]
 8001466:	e01d      	b.n	80014a4 <MPU6050_CalibrateGyro+0x60>
	{
		MPU6050_ReadGyroRaw(MPU6050, &Gyro);
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff74 	bl	800135c <MPU6050_ReadGyroRaw>

		SumX += Gyro.GyroX;
 8001474:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001478:	461a      	mov	r2, r3
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	61fb      	str	r3, [r7, #28]
		SumY += Gyro.GyroY;
 8001480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001484:	461a      	mov	r2, r3
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4413      	add	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
		SumZ += Gyro.GyroZ;
 800148c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001490:	461a      	mov	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]

		HAL_Delay(2);
 8001498:	2002      	movs	r0, #2
 800149a:	f000 fdff 	bl	800209c <HAL_Delay>
	for(i = 0; i < SamplesNumber; i++)
 800149e:	7cfb      	ldrb	r3, [r7, #19]
 80014a0:	3301      	adds	r3, #1
 80014a2:	74fb      	strb	r3, [r7, #19]
 80014a4:	7cfa      	ldrb	r2, [r7, #19]
 80014a6:	7cbb      	ldrb	r3, [r7, #18]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3dd      	bcc.n	8001468 <MPU6050_CalibrateGyro+0x24>
	}

	GyroOffset->OffsetX = SumX / (SamplesNumber * GYRO_SCALE_FACTOR);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014b6:	7cbb      	ldrb	r3, [r7, #18]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001528 <MPU6050_CalibrateGyro+0xe4>
 80014c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	edc3 7a00 	vstr	s15, [r3]
	GyroOffset->OffsetY = SumY / (SamplesNumber * GYRO_SCALE_FACTOR);
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014dc:	7cbb      	ldrb	r3, [r7, #18]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001528 <MPU6050_CalibrateGyro+0xe4>
 80014ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	edc3 7a01 	vstr	s15, [r3, #4]
	GyroOffset->OffsetZ = SumZ / (SamplesNumber * GYRO_SCALE_FACTOR);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001502:	7cbb      	ldrb	r3, [r7, #18]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001528 <MPU6050_CalibrateGyro+0xe4>
 8001510:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	edc3 7a02 	vstr	s15, [r3, #8]

	return MPU6050_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	43030000 	.word	0x43030000

0800152c <MPU6050_DegFromGyro>:

MPU6050_STATE_t MPU6050_DegFromGyro(Gyro_t *Gyro, float *Roll, float *Pitch, float *Yaw, float dt)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6178      	str	r0, [r7, #20]
 8001534:	6139      	str	r1, [r7, #16]
 8001536:	60fa      	str	r2, [r7, #12]
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
	*Roll += Gyro->GyroX * dt;
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	edd3 6a00 	vldr	s13, [r3]
 800154a:	edd7 7a01 	vldr	s15, [r7, #4]
 800154e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	edc3 7a00 	vstr	s15, [r3]
	*Pitch += Gyro->GyroY * dt;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	ed93 7a00 	vldr	s14, [r3]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	edd3 6a01 	vldr	s13, [r3, #4]
 8001568:	edd7 7a01 	vldr	s15, [r7, #4]
 800156c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	edc3 7a00 	vstr	s15, [r3]
	*Yaw += Gyro->GyroZ * dt;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	edd3 6a02 	vldr	s13, [r3, #8]
 8001586:	edd7 7a01 	vldr	s15, [r7, #4]
 800158a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	edc3 7a00 	vstr	s15, [r3]

	return MPU6050_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a2e      	ldr	r2, [pc, #184]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d6:	4b29      	ldr	r3, [pc, #164]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	4a28      	ldr	r2, [pc, #160]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b23      	ldr	r3, [pc, #140]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a22      	ldr	r2, [pc, #136]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <MX_GPIO_Init+0xd4>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <MX_GPIO_Init+0xd4>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <MX_GPIO_Init+0xd4>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001612:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <MX_GPIO_Init+0xd4>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2120      	movs	r1, #32
 8001622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001626:	f000 ffed 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800162a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001630:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	480f      	ldr	r0, [pc, #60]	@ (8001680 <MX_GPIO_Init+0xd8>)
 8001642:	f000 fe5d 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001646:	2320      	movs	r3, #32
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001660:	f000 fe4e 	bl	8002300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2028      	movs	r0, #40	@ 0x28
 800166a:	f000 fe14 	bl	8002296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800166e:	2028      	movs	r0, #40	@ 0x28
 8001670:	f000 fe2b 	bl	80022ca <HAL_NVIC_EnableIRQ>

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	48000800 	.word	0x48000800

08001684 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <MX_I2C1_Init+0x74>)
 800168a:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <MX_I2C1_Init+0x78>)
 800168c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800168e:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <MX_I2C1_Init+0x74>)
 8001690:	4a1b      	ldr	r2, [pc, #108]	@ (8001700 <MX_I2C1_Init+0x7c>)
 8001692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <MX_I2C1_Init+0x74>)
 800169c:	2201      	movs	r2, #1
 800169e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <MX_I2C1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b2:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <MX_I2C1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016be:	480e      	ldr	r0, [pc, #56]	@ (80016f8 <MX_I2C1_Init+0x74>)
 80016c0:	f000 ffdb 	bl	800267a <HAL_I2C_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016ca:	f000 f9e3 	bl	8001a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <MX_I2C1_Init+0x74>)
 80016d2:	f001 fd5d 	bl	8003190 <HAL_I2CEx_ConfigAnalogFilter>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016dc:	f000 f9da 	bl	8001a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <MX_I2C1_Init+0x74>)
 80016e4:	f001 fd9f 	bl	8003226 <HAL_I2CEx_ConfigDigitalFilter>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ee:	f000 f9d1 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001f4 	.word	0x200001f4
 80016fc:	40005400 	.word	0x40005400
 8001700:	40b285c2 	.word	0x40b285c2

08001704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b09e      	sub	sp, #120	@ 0x78
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2254      	movs	r2, #84	@ 0x54
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f004 fffe 	bl	8006726 <memset>
  if(i2cHandle->Instance==I2C1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ac <HAL_I2C_MspInit+0xa8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d136      	bne.n	80017a2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001734:	2340      	movs	r3, #64	@ 0x40
 8001736:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fb9f 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800174c:	f000 f9a2 	bl	8001a94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_I2C_MspInit+0xac>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001754:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <HAL_I2C_MspInit+0xac>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_I2C_MspInit+0xac>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001768:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800176c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	2312      	movs	r3, #18
 8001770:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800177a:	2304      	movs	r3, #4
 800177c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001782:	4619      	mov	r1, r3
 8001784:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <HAL_I2C_MspInit+0xb0>)
 8001786:	f000 fdbb 	bl	8002300 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <HAL_I2C_MspInit+0xac>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <HAL_I2C_MspInit+0xac>)
 8001790:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_I2C_MspInit+0xac>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3778      	adds	r7, #120	@ 0x78
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40021000 	.word	0x40021000
 80017b4:	48000400 	.word	0x48000400

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c0:	f000 fbfb 	bl	8001fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f8f8 	bl	80019b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f7ff feee 	bl	80015a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017cc:	f7ff ff5a 	bl	8001684 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80017d0:	f000 fb28 	bl	8001e24 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80017d4:	f000 faac 	bl	8001d30 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80017d8:	f000 f939 	bl	8001a4e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Status = MPU6050_Init(&MPU6050, &hi2c1, 0x68);
 80017dc:	2268      	movs	r2, #104	@ 0x68
 80017de:	4960      	ldr	r1, [pc, #384]	@ (8001960 <main+0x1a8>)
 80017e0:	4860      	ldr	r0, [pc, #384]	@ (8001964 <main+0x1ac>)
 80017e2:	f7ff fb9f 	bl	8000f24 <MPU6050_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <main+0x1b0>)
 80017ec:	701a      	strb	r2, [r3, #0]
  sprintf(Message, "Status = %d\n", Status);
 80017ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001968 <main+0x1b0>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	495d      	ldr	r1, [pc, #372]	@ (800196c <main+0x1b4>)
 80017f6:	485e      	ldr	r0, [pc, #376]	@ (8001970 <main+0x1b8>)
 80017f8:	f004 ff30 	bl	800665c <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);
 80017fc:	485c      	ldr	r0, [pc, #368]	@ (8001970 <main+0x1b8>)
 80017fe:	f7fe fd5f 	bl	80002c0 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800180a:	4959      	ldr	r1, [pc, #356]	@ (8001970 <main+0x1b8>)
 800180c:	4859      	ldr	r0, [pc, #356]	@ (8001974 <main+0x1bc>)
 800180e:	f003 fb61 	bl	8004ed4 <HAL_UART_Transmit>

  DeviceAddress = MPU6050_WHO_AM_I(&MPU6050);
 8001812:	4854      	ldr	r0, [pc, #336]	@ (8001964 <main+0x1ac>)
 8001814:	f7ff fc1d 	bl	8001052 <MPU6050_WHO_AM_I>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b56      	ldr	r3, [pc, #344]	@ (8001978 <main+0x1c0>)
 800181e:	701a      	strb	r2, [r3, #0]
  sprintf(Message, "Who am I = %d\n", DeviceAddress);
 8001820:	4b55      	ldr	r3, [pc, #340]	@ (8001978 <main+0x1c0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4955      	ldr	r1, [pc, #340]	@ (800197c <main+0x1c4>)
 8001828:	4851      	ldr	r0, [pc, #324]	@ (8001970 <main+0x1b8>)
 800182a:	f004 ff17 	bl	800665c <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);
 800182e:	4850      	ldr	r0, [pc, #320]	@ (8001970 <main+0x1b8>)
 8001830:	f7fe fd46 	bl	80002c0 <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800183c:	494c      	ldr	r1, [pc, #304]	@ (8001970 <main+0x1b8>)
 800183e:	484d      	ldr	r0, [pc, #308]	@ (8001974 <main+0x1bc>)
 8001840:	f003 fb48 	bl	8004ed4 <HAL_UART_Transmit>

  GyroRange = Read8(&MPU6050, GYRO_CONFIG);
 8001844:	211b      	movs	r1, #27
 8001846:	4847      	ldr	r0, [pc, #284]	@ (8001964 <main+0x1ac>)
 8001848:	f7ff fba1 	bl	8000f8e <Read8>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	4b4b      	ldr	r3, [pc, #300]	@ (8001980 <main+0x1c8>)
 8001852:	701a      	strb	r2, [r3, #0]
  AccelRange = Read8(&MPU6050, ACCEL_CONFIG);
 8001854:	211c      	movs	r1, #28
 8001856:	4843      	ldr	r0, [pc, #268]	@ (8001964 <main+0x1ac>)
 8001858:	f7ff fb99 	bl	8000f8e <Read8>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <main+0x1cc>)
 8001862:	701a      	strb	r2, [r3, #0]
  sprintf(Message, "GyroRange = %d\n", GyroRange);
 8001864:	4b46      	ldr	r3, [pc, #280]	@ (8001980 <main+0x1c8>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4947      	ldr	r1, [pc, #284]	@ (8001988 <main+0x1d0>)
 800186c:	4840      	ldr	r0, [pc, #256]	@ (8001970 <main+0x1b8>)
 800186e:	f004 fef5 	bl	800665c <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);
 8001872:	483f      	ldr	r0, [pc, #252]	@ (8001970 <main+0x1b8>)
 8001874:	f7fe fd24 	bl	80002c0 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001880:	493b      	ldr	r1, [pc, #236]	@ (8001970 <main+0x1b8>)
 8001882:	483c      	ldr	r0, [pc, #240]	@ (8001974 <main+0x1bc>)
 8001884:	f003 fb26 	bl	8004ed4 <HAL_UART_Transmit>
  sprintf(Message, "AccelRange = %d\n", AccelRange);
 8001888:	4b3e      	ldr	r3, [pc, #248]	@ (8001984 <main+0x1cc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	493f      	ldr	r1, [pc, #252]	@ (800198c <main+0x1d4>)
 8001890:	4837      	ldr	r0, [pc, #220]	@ (8001970 <main+0x1b8>)
 8001892:	f004 fee3 	bl	800665c <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);
 8001896:	4836      	ldr	r0, [pc, #216]	@ (8001970 <main+0x1b8>)
 8001898:	f7fe fd12 	bl	80002c0 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018a4:	4932      	ldr	r1, [pc, #200]	@ (8001970 <main+0x1b8>)
 80018a6:	4833      	ldr	r0, [pc, #204]	@ (8001974 <main+0x1bc>)
 80018a8:	f003 fb14 	bl	8004ed4 <HAL_UART_Transmit>


  MPU6050_CalibrateAccel(&MPU6050, &AccelOffset);
 80018ac:	4938      	ldr	r1, [pc, #224]	@ (8001990 <main+0x1d8>)
 80018ae:	482d      	ldr	r0, [pc, #180]	@ (8001964 <main+0x1ac>)
 80018b0:	f7ff fcaa 	bl	8001208 <MPU6050_CalibrateAccel>
  MPU6050_CalibrateGyro(&MPU6050, &GyroOffset);
 80018b4:	4937      	ldr	r1, [pc, #220]	@ (8001994 <main+0x1dc>)
 80018b6:	482b      	ldr	r0, [pc, #172]	@ (8001964 <main+0x1ac>)
 80018b8:	f7ff fdc4 	bl	8001444 <MPU6050_CalibrateGyro>


  HAL_TIM_Base_Start_IT(&htim1);
 80018bc:	4836      	ldr	r0, [pc, #216]	@ (8001998 <main+0x1e0>)
 80018be:	f002 fd87 	bl	80043d0 <HAL_TIM_Base_Start_IT>

	  //MPU6050_DegFromAccel(&MPU6050, &Roll, &Pitch);
	  //sprintf(Message, "Roll: %f.3, Pitch: %f.3", Roll, Pitch);
	  //HAL_UART_Transmit(&hlpuart1, (uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);

	  if(InterruptFlag)
 80018c2:	4b36      	ldr	r3, [pc, #216]	@ (800199c <main+0x1e4>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0fa      	beq.n	80018c2 <main+0x10a>
		{
		  InterruptFlag = 0;
 80018cc:	4b33      	ldr	r3, [pc, #204]	@ (800199c <main+0x1e4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
		  MPU6050_ReadGyro(&MPU6050, &Gyro, GyroOffset);
 80018d2:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <main+0x1dc>)
 80018d4:	edd3 6a00 	vldr	s13, [r3]
 80018d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80018dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e0:	eeb0 0a66 	vmov.f32	s0, s13
 80018e4:	eef0 0a47 	vmov.f32	s1, s14
 80018e8:	eeb0 1a67 	vmov.f32	s2, s15
 80018ec:	492c      	ldr	r1, [pc, #176]	@ (80019a0 <main+0x1e8>)
 80018ee:	481d      	ldr	r0, [pc, #116]	@ (8001964 <main+0x1ac>)
 80018f0:	f7ff fd56 	bl	80013a0 <MPU6050_ReadGyro>

		  MPU6050_DegFromGyro(&Gyro, &Roll, &Pitch, &Yaw, dt);
 80018f4:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <main+0x1ec>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	eeb0 0a67 	vmov.f32	s0, s15
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <main+0x1f0>)
 8001900:	4a2a      	ldr	r2, [pc, #168]	@ (80019ac <main+0x1f4>)
 8001902:	492b      	ldr	r1, [pc, #172]	@ (80019b0 <main+0x1f8>)
 8001904:	4826      	ldr	r0, [pc, #152]	@ (80019a0 <main+0x1e8>)
 8001906:	f7ff fe11 	bl	800152c <MPU6050_DegFromGyro>
		  sprintf(Message, "Gyro Angle Roll %.3f, Pitch: %.3f, Yaw: %.3f\n", Roll, Pitch, Yaw);
 800190a:	4b29      	ldr	r3, [pc, #164]	@ (80019b0 <main+0x1f8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe42 	bl	8000598 <__aeabi_f2d>
 8001914:	4680      	mov	r8, r0
 8001916:	4689      	mov	r9, r1
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <main+0x1f4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe3b 	bl	8000598 <__aeabi_f2d>
 8001922:	4604      	mov	r4, r0
 8001924:	460d      	mov	r5, r1
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <main+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe34 	bl	8000598 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001938:	e9cd 4500 	strd	r4, r5, [sp]
 800193c:	4642      	mov	r2, r8
 800193e:	464b      	mov	r3, r9
 8001940:	491c      	ldr	r1, [pc, #112]	@ (80019b4 <main+0x1fc>)
 8001942:	480b      	ldr	r0, [pc, #44]	@ (8001970 <main+0x1b8>)
 8001944:	f004 fe8a 	bl	800665c <siprintf>
		  HAL_UART_Transmit(&hlpuart1, (uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);
 8001948:	4809      	ldr	r0, [pc, #36]	@ (8001970 <main+0x1b8>)
 800194a:	f7fe fcb9 	bl	80002c0 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001956:	4906      	ldr	r1, [pc, #24]	@ (8001970 <main+0x1b8>)
 8001958:	4806      	ldr	r0, [pc, #24]	@ (8001974 <main+0x1bc>)
 800195a:	f003 fabb 	bl	8004ed4 <HAL_UART_Transmit>
	  if(InterruptFlag)
 800195e:	e7b0      	b.n	80018c2 <main+0x10a>
 8001960:	200001f4 	.word	0x200001f4
 8001964:	20000248 	.word	0x20000248
 8001968:	20000251 	.word	0x20000251
 800196c:	080088d8 	.word	0x080088d8
 8001970:	20000288 	.word	0x20000288
 8001974:	2000035c 	.word	0x2000035c
 8001978:	20000250 	.word	0x20000250
 800197c:	080088e8 	.word	0x080088e8
 8001980:	20000260 	.word	0x20000260
 8001984:	20000261 	.word	0x20000261
 8001988:	080088f8 	.word	0x080088f8
 800198c:	08008908 	.word	0x08008908
 8001990:	20000264 	.word	0x20000264
 8001994:	20000270 	.word	0x20000270
 8001998:	20000310 	.word	0x20000310
 800199c:	20000308 	.word	0x20000308
 80019a0:	20000254 	.word	0x20000254
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000284 	.word	0x20000284
 80019ac:	20000280 	.word	0x20000280
 80019b0:	2000027c 	.word	0x2000027c
 80019b4:	0800891c 	.word	0x0800891c

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b094      	sub	sp, #80	@ 0x50
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	2238      	movs	r2, #56	@ 0x38
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f004 fead 	bl	8006726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019da:	2000      	movs	r0, #0
 80019dc:	f001 fc70 	bl	80032c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ea:	2340      	movs	r3, #64	@ 0x40
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f2:	2302      	movs	r3, #2
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80019fa:	2355      	movs	r3, #85	@ 0x55
 80019fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fd0a 	bl	8003428 <HAL_RCC_OscConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a1a:	f000 f83b 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1e:	230f      	movs	r3, #15
 8001a20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a22:	2303      	movs	r3, #3
 8001a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2104      	movs	r1, #4
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 f808 	bl	8003a4c <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a42:	f000 f827 	bl	8001a94 <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	@ 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2019      	movs	r0, #25
 8001a58:	f000 fc1d 	bl	8002296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a5c:	2019      	movs	r0, #25
 8001a5e:	f000 fc34 	bl	80022ca <HAL_NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d102      	bne.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		 InterruptFlag = 1;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
	}
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	20000308 	.word	0x20000308

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <Error_Handler+0x8>

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ad6:	f001 fc97 	bl	8003408 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 fa8f 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001b4e:	f002 fcb7 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000310 	.word	0x20000310

08001b5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b62:	f002 fcad 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000310 	.word	0x20000310

08001b70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b78:	f000 fd5c 	bl	8002634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_kill>:

int _kill(int pid, int sig)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b9a:	f004 fe17 	bl	80067cc <__errno>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2216      	movs	r2, #22
 8001ba2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_exit>:

void _exit (int status)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffe7 	bl	8001b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bc2:	bf00      	nop
 8001bc4:	e7fd      	b.n	8001bc2 <_exit+0x12>

08001bc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e00a      	b.n	8001bee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bd8:	f3af 8000 	nop.w
 8001bdc:	4601      	mov	r1, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	60ba      	str	r2, [r7, #8]
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dbf0      	blt.n	8001bd8 <_read+0x12>
  }

  return len;
 8001bf6:	687b      	ldr	r3, [r7, #4]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e009      	b.n	8001c26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dbf1      	blt.n	8001c12 <_write+0x12>
  }
  return len;
 8001c2e:	687b      	ldr	r3, [r7, #4]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_close>:

int _close(int file)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c60:	605a      	str	r2, [r3, #4]
  return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_isatty>:

int _isatty(int file)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	@ (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd0:	f004 fd7c 	bl	80067cc <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20020000 	.word	0x20020000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	2000030c 	.word	0x2000030c
 8001d08:	20000540 	.word	0x20000540

08001d0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <SystemInit+0x20>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d16:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <SystemInit+0x20>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <MX_TIM1_Init+0xa4>)
 8001d52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d56:	22a9      	movs	r2, #169	@ 0xa9
 8001d58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d7a:	4815      	ldr	r0, [pc, #84]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d7c:	f002 fad0 	bl	8004320 <HAL_TIM_Base_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d86:	f7ff fe85 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	480e      	ldr	r0, [pc, #56]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001d98:	f002 fce2 	bl	8004760 <HAL_TIM_ConfigClockSource>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001da2:	f7ff fe77 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	@ (8001dd0 <MX_TIM1_Init+0xa0>)
 8001db8:	f002 ff60 	bl	8004c7c <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dc2:	f7ff fe67 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000310 	.word	0x20000310
 8001dd4:	40012c00 	.word	0x40012c00

08001dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_TIM_Base_MspInit+0x44>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d113      	bne.n	8001e12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <HAL_TIM_Base_MspInit+0x48>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	4a0c      	ldr	r2, [pc, #48]	@ (8001e20 <HAL_TIM_Base_MspInit+0x48>)
 8001df0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001df4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_TIM_Base_MspInit+0x48>)
 8001df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2018      	movs	r0, #24
 8001e08:	f000 fa45 	bl	8002296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e0c:	2018      	movs	r0, #24
 8001e0e:	f000 fa5c 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40021000 	.word	0x40021000

08001e24 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e28:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e2a:	4a22      	ldr	r2, [pc, #136]	@ (8001eb4 <MX_LPUART1_UART_Init+0x90>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e60:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e66:	4812      	ldr	r0, [pc, #72]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e68:	f002 ffe4 	bl	8004e34 <HAL_UART_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e72:	f7ff fe0f 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e76:	2100      	movs	r1, #0
 8001e78:	480d      	ldr	r0, [pc, #52]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e7a:	f003 fe0d 	bl	8005a98 <HAL_UARTEx_SetTxFifoThreshold>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001e84:	f7ff fe06 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4809      	ldr	r0, [pc, #36]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e8c:	f003 fe42 	bl	8005b14 <HAL_UARTEx_SetRxFifoThreshold>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001e96:	f7ff fdfd 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <MX_LPUART1_UART_Init+0x8c>)
 8001e9c:	f003 fdc3 	bl	8005a26 <HAL_UARTEx_DisableFifoMode>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001ea6:	f7ff fdf5 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000035c 	.word	0x2000035c
 8001eb4:	40008000 	.word	0x40008000

08001eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b09e      	sub	sp, #120	@ 0x78
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	2254      	movs	r2, #84	@ 0x54
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 fc24 	bl	8006726 <memset>
  if(uartHandle->Instance==LPUART1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_UART_MspInit+0xa8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d136      	bne.n	8001f56 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 ffc5 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f00:	f7ff fdc8 	bl	8001a94 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f04:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <HAL_UART_MspInit+0xac>)
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	4a16      	ldr	r2, [pc, #88]	@ (8001f64 <HAL_UART_MspInit+0xac>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <HAL_UART_MspInit+0xac>)
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_UART_MspInit+0xac>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f20:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_UART_MspInit+0xac>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_UART_MspInit+0xac>)
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001f34:	230c      	movs	r3, #12
 8001f36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f44:	230c      	movs	r3, #12
 8001f46:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f52:	f000 f9d5 	bl	8002300 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	3778      	adds	r7, #120	@ 0x78
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40008000 	.word	0x40008000
 8001f64:	40021000 	.word	0x40021000

08001f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f68:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f6c:	f7ff fece 	bl	8001d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f72:	490d      	ldr	r1, [pc, #52]	@ (8001fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <LoopForever+0xe>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f88:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb4 <LoopForever+0x16>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f004 fc1f 	bl	80067d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9a:	f7ff fc0d 	bl	80017b8 <main>

08001f9e <LoopForever>:

LoopForever:
    b LoopForever
 8001f9e:	e7fe      	b.n	8001f9e <LoopForever>
  ldr   r0, =_estack
 8001fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001fac:	08008d14 	.word	0x08008d14
  ldr r2, =_sbss
 8001fb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001fb4:	20000540 	.word	0x20000540

08001fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC1_2_IRQHandler>

08001fba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f95b 	bl	8002280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f000 f80e 	bl	8001fec <HAL_InitTick>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	e001      	b.n	8001fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fdc:	f7ff fd60 	bl	8001aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]

}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_InitTick+0x68>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d022      	beq.n	8002046 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_InitTick+0x6c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_InitTick+0x68>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800200c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f966 	bl	80022e6 <HAL_SYSTICK_Config>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10f      	bne.n	8002040 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	d809      	bhi.n	800203a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002026:	2200      	movs	r2, #0
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800202e:	f000 f932 	bl	8002296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_InitTick+0x70>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e007      	b.n	800204a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e004      	b.n	800204a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000000c 	.word	0x2000000c
 8002058:	20000004 	.word	0x20000004
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <HAL_IncTick+0x1c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_IncTick+0x20>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4413      	add	r3, r2
 800206e:	4a03      	ldr	r2, [pc, #12]	@ (800207c <HAL_IncTick+0x1c>)
 8002070:	6013      	str	r3, [r2, #0]
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	200003f0 	.word	0x200003f0
 8002080:	2000000c 	.word	0x2000000c

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200003f0 	.word	0x200003f0

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020b4:	d004      	beq.n	80020c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_Delay+0x40>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4413      	add	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c0:	bf00      	nop
 80020c2:	f7ff ffdf 	bl	8002084 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d8f7      	bhi.n	80020c2 <HAL_Delay+0x26>
  {
  }
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000000c 	.word	0x2000000c

080020e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db0b      	blt.n	800216e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4907      	ldr	r1, [pc, #28]	@ (800217c <__NVIC_EnableIRQ+0x38>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100

08002180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	@ (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
         );
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	@ 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800224c:	d301      	bcc.n	8002252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224e:	2301      	movs	r3, #1
 8002250:	e00f      	b.n	8002272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <SysTick_Config+0x40>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225a:	210f      	movs	r1, #15
 800225c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002260:	f7ff ff8e 	bl	8002180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <SysTick_Config+0x40>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226a:	4b04      	ldr	r3, [pc, #16]	@ (800227c <SysTick_Config+0x40>)
 800226c:	2207      	movs	r2, #7
 800226e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	e000e010 	.word	0xe000e010

08002280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff29 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022a4:	f7ff ff40 	bl	8002128 <__NVIC_GetPriorityGrouping>
 80022a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7ff ff90 	bl	80021d4 <NVIC_EncodePriority>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff5f 	bl	8002180 <__NVIC_SetPriority>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff33 	bl	8002144 <__NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffa4 	bl	800223c <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800230e:	e15a      	b.n	80025c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 814c 	beq.w	80025c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d005      	beq.n	8002340 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800233c:	2b02      	cmp	r3, #2
 800233e:	d130      	bne.n	80023a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002376:	2201      	movs	r2, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	f003 0201 	and.w	r2, r3, #1
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d017      	beq.n	80023de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d123      	bne.n	8002432 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	08da      	lsrs	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3208      	adds	r2, #8
 800242c:	6939      	ldr	r1, [r7, #16]
 800242e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0203 	and.w	r2, r3, #3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80a6 	beq.w	80025c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002474:	4b5b      	ldr	r3, [pc, #364]	@ (80025e4 <HAL_GPIO_Init+0x2e4>)
 8002476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002478:	4a5a      	ldr	r2, [pc, #360]	@ (80025e4 <HAL_GPIO_Init+0x2e4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002480:	4b58      	ldr	r3, [pc, #352]	@ (80025e4 <HAL_GPIO_Init+0x2e4>)
 8002482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248c:	4a56      	ldr	r2, [pc, #344]	@ (80025e8 <HAL_GPIO_Init+0x2e8>)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	3302      	adds	r3, #2
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024b6:	d01f      	beq.n	80024f8 <HAL_GPIO_Init+0x1f8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a4c      	ldr	r2, [pc, #304]	@ (80025ec <HAL_GPIO_Init+0x2ec>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d019      	beq.n	80024f4 <HAL_GPIO_Init+0x1f4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a4b      	ldr	r2, [pc, #300]	@ (80025f0 <HAL_GPIO_Init+0x2f0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_GPIO_Init+0x1f0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a4a      	ldr	r2, [pc, #296]	@ (80025f4 <HAL_GPIO_Init+0x2f4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_GPIO_Init+0x1ec>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a49      	ldr	r2, [pc, #292]	@ (80025f8 <HAL_GPIO_Init+0x2f8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <HAL_GPIO_Init+0x1e8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a48      	ldr	r2, [pc, #288]	@ (80025fc <HAL_GPIO_Init+0x2fc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_GPIO_Init+0x1e4>
 80024e0:	2305      	movs	r3, #5
 80024e2:	e00a      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024e4:	2306      	movs	r3, #6
 80024e6:	e008      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024ec:	2303      	movs	r3, #3
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024f8:	2300      	movs	r3, #0
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250a:	4937      	ldr	r1, [pc, #220]	@ (80025e8 <HAL_GPIO_Init+0x2e8>)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_GPIO_Init+0x300>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800253c:	4a30      	ldr	r2, [pc, #192]	@ (8002600 <HAL_GPIO_Init+0x300>)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002542:	4b2f      	ldr	r3, [pc, #188]	@ (8002600 <HAL_GPIO_Init+0x300>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002566:	4a26      	ldr	r2, [pc, #152]	@ (8002600 <HAL_GPIO_Init+0x300>)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800256c:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_GPIO_Init+0x300>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002590:	4a1b      	ldr	r2, [pc, #108]	@ (8002600 <HAL_GPIO_Init+0x300>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002596:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <HAL_GPIO_Init+0x300>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ba:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_GPIO_Init+0x300>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f47f ae9d 	bne.w	8002310 <HAL_GPIO_Init+0x10>
  }
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010000 	.word	0x40010000
 80025ec:	48000400 	.word	0x48000400
 80025f0:	48000800 	.word	0x48000800
 80025f4:	48000c00 	.word	0x48000c00
 80025f8:	48001000 	.word	0x48001000
 80025fc:	48001400 	.word	0x48001400
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002620:	e002      	b.n	8002628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800264a:	4a05      	ldr	r2, [pc, #20]	@ (8002660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f806 	bl	8002664 <HAL_GPIO_EXTI_Callback>
  }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40010400 	.word	0x40010400

08002664 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e08d      	b.n	80027a8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff f82f 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2224      	movs	r2, #36	@ 0x24
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d107      	bne.n	80026f4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	e006      	b.n	8002702 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002700:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d108      	bne.n	800271c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	e007      	b.n	800272c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800272a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800273a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800273e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800274e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69d9      	ldr	r1, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0201 	orr.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	817b      	strh	r3, [r7, #10]
 80027c2:	460b      	mov	r3, r1
 80027c4:	813b      	strh	r3, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	f040 80f9 	bne.w	80029ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x34>
 80027de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0ed      	b.n	80029cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_I2C_Mem_Write+0x4e>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e0e6      	b.n	80029cc <HAL_I2C_Mem_Write+0x21c>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002806:	f7ff fc3d 	bl	8002084 <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2319      	movs	r3, #25
 8002812:	2201      	movs	r2, #1
 8002814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fac3 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0d1      	b.n	80029cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2221      	movs	r2, #33	@ 0x21
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2240      	movs	r2, #64	@ 0x40
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002848:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002850:	88f8      	ldrh	r0, [r7, #6]
 8002852:	893a      	ldrh	r2, [r7, #8]
 8002854:	8979      	ldrh	r1, [r7, #10]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4603      	mov	r3, r0
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f9d3 	bl	8002c0c <I2C_RequestMemoryWrite>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0a9      	b.n	80029cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2bff      	cmp	r3, #255	@ 0xff
 8002880:	d90e      	bls.n	80028a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	22ff      	movs	r2, #255	@ 0xff
 8002886:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288c:	b2da      	uxtb	r2, r3
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	2300      	movs	r3, #0
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fc47 	bl	800312c <I2C_TransferConfig>
 800289e:	e00f      	b.n	80028c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	8979      	ldrh	r1, [r7, #10]
 80028b2:	2300      	movs	r3, #0
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fc36 	bl	800312c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fac6 	bl	8002e56 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e07b      	b.n	80029cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d034      	beq.n	8002978 <HAL_I2C_Mem_Write+0x1c8>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002912:	2b00      	cmp	r3, #0
 8002914:	d130      	bne.n	8002978 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291c:	2200      	movs	r2, #0
 800291e:	2180      	movs	r1, #128	@ 0x80
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fa3f 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e04d      	b.n	80029cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2bff      	cmp	r3, #255	@ 0xff
 8002938:	d90e      	bls.n	8002958 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22ff      	movs	r2, #255	@ 0xff
 800293e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	b2da      	uxtb	r2, r3
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	2300      	movs	r3, #0
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fbeb 	bl	800312c <I2C_TransferConfig>
 8002956:	e00f      	b.n	8002978 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002966:	b2da      	uxtb	r2, r3
 8002968:	8979      	ldrh	r1, [r7, #10]
 800296a:	2300      	movs	r3, #0
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fbda 	bl	800312c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d19e      	bne.n	80028c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 faac 	bl	8002ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e01a      	b.n	80029cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2220      	movs	r2, #32
 800299c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_I2C_Mem_Write+0x224>)
 80029aa:	400b      	ands	r3, r1
 80029ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
  }
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	fe00e800 	.word	0xfe00e800

080029d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	f040 80fd 	bne.w	8002bfa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_I2C_Mem_Read+0x34>
 8002a06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0f1      	b.n	8002bfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Mem_Read+0x4e>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0ea      	b.n	8002bfc <HAL_I2C_Mem_Read+0x224>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a2e:	f7ff fb29 	bl	8002084 <HAL_GetTick>
 8002a32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2319      	movs	r3, #25
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f9af 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0d5      	b.n	8002bfc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2222      	movs	r2, #34	@ 0x22
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	@ 0x40
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a78:	88f8      	ldrh	r0, [r7, #6]
 8002a7a:	893a      	ldrh	r2, [r7, #8]
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4603      	mov	r3, r0
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f913 	bl	8002cb4 <I2C_RequestMemoryRead>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0ad      	b.n	8002bfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2bff      	cmp	r3, #255	@ 0xff
 8002aa8:	d90e      	bls.n	8002ac8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	@ 0xff
 8002aae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	8979      	ldrh	r1, [r7, #10]
 8002ab8:	4b52      	ldr	r3, [pc, #328]	@ (8002c04 <HAL_I2C_Mem_Read+0x22c>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fb33 	bl	800312c <I2C_TransferConfig>
 8002ac6:	e00f      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	8979      	ldrh	r1, [r7, #10]
 8002ada:	4b4a      	ldr	r3, [pc, #296]	@ (8002c04 <HAL_I2C_Mem_Read+0x22c>)
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fb22 	bl	800312c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	2200      	movs	r2, #0
 8002af0:	2104      	movs	r1, #4
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f956 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07c      	b.n	8002bfc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d034      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x1d0>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d130      	bne.n	8002ba8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	@ 0x80
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f927 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04d      	b.n	8002bfc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2bff      	cmp	r3, #255	@ 0xff
 8002b68:	d90e      	bls.n	8002b88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22ff      	movs	r2, #255	@ 0xff
 8002b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fad3 	bl	800312c <I2C_TransferConfig>
 8002b86:	e00f      	b.n	8002ba8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	8979      	ldrh	r1, [r7, #10]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fac2 	bl	800312c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d19a      	bne.n	8002ae8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f994 	bl	8002ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e01a      	b.n	8002bfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_I2C_Mem_Read+0x230>)
 8002bda:	400b      	ands	r3, r1
 8002bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
  }
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	80002400 	.word	0x80002400
 8002c08:	fe00e800 	.word	0xfe00e800

08002c0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	813b      	strh	r3, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	8979      	ldrh	r1, [r7, #10]
 8002c2c:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <I2C_RequestMemoryWrite+0xa4>)
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fa79 	bl	800312c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	69b9      	ldr	r1, [r7, #24]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f909 	bl	8002e56 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e02c      	b.n	8002ca8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c54:	893b      	ldrh	r3, [r7, #8]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c5e:	e015      	b.n	8002c8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c60:	893b      	ldrh	r3, [r7, #8]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	69b9      	ldr	r1, [r7, #24]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f8ef 	bl	8002e56 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e012      	b.n	8002ca8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c82:	893b      	ldrh	r3, [r7, #8]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2180      	movs	r1, #128	@ 0x80
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f884 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	80002000 	.word	0x80002000

08002cb4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	817b      	strh	r3, [r7, #10]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	813b      	strh	r3, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	4b20      	ldr	r3, [pc, #128]	@ (8002d58 <I2C_RequestMemoryRead+0xa4>)
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fa26 	bl	800312c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f8b6 	bl	8002e56 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e02c      	b.n	8002d4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d04:	e015      	b.n	8002d32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d06:	893b      	ldrh	r3, [r7, #8]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f89c 	bl	8002e56 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e012      	b.n	8002d4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d28:	893b      	ldrh	r3, [r7, #8]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	@ 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f831 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	80002000 	.word	0x80002000

08002d5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d103      	bne.n	8002d7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d007      	beq.n	8002d98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	619a      	str	r2, [r3, #24]
  }
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	4613      	mov	r3, r2
 8002db2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db4:	e03b      	b.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	6839      	ldr	r1, [r7, #0]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f8d6 	bl	8002f6c <I2C_IsErrorOccurred>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e041      	b.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd0:	d02d      	beq.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7ff f957 	bl	8002084 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d122      	bne.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4013      	ands	r3, r2
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d113      	bne.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00f      	b.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d0b4      	beq.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e62:	e033      	b.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f87f 	bl	8002f6c <I2C_IsErrorOccurred>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e031      	b.n	8002edc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e7e:	d025      	beq.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7ff f900 	bl	8002084 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d302      	bcc.n	8002e96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11a      	bne.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d013      	beq.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e007      	b.n	8002edc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d1c4      	bne.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ef0:	e02f      	b.n	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f838 	bl	8002f6c <I2C_IsErrorOccurred>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e02d      	b.n	8002f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7ff f8bd 	bl	8002084 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d11a      	bne.n	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d013      	beq.n	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e007      	b.n	8002f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d1c8      	bne.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d068      	beq.n	800306a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fa0:	e049      	b.n	8003036 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fa8:	d045      	beq.n	8003036 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002faa:	f7ff f86b 	bl	8002084 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <I2C_IsErrorOccurred+0x54>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d13a      	bne.n	8003036 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fe2:	d121      	bne.n	8003028 <I2C_IsErrorOccurred+0xbc>
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fea:	d01d      	beq.n	8003028 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d01a      	beq.n	8003028 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003000:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003002:	f7ff f83f 	bl	8002084 <HAL_GetTick>
 8003006:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003008:	e00e      	b.n	8003028 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800300a:	f7ff f83b 	bl	8002084 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b19      	cmp	r3, #25
 8003016:	d907      	bls.n	8003028 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	f043 0320 	orr.w	r3, r3, #32
 800301e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003026:	e006      	b.n	8003036 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b20      	cmp	r3, #32
 8003034:	d1e9      	bne.n	800300a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d003      	beq.n	800304c <I2C_IsErrorOccurred+0xe0>
 8003044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0aa      	beq.n	8002fa2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800304c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2220      	movs	r2, #32
 800305a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800308c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01c      	beq.n	800311a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fe3b 	bl	8002d5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <I2C_IsErrorOccurred+0x1bc>)
 80030f2:	400b      	ands	r3, r1
 80030f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800311a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800311e:	4618      	mov	r0, r3
 8003120:	3728      	adds	r7, #40	@ 0x28
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	fe00e800 	.word	0xfe00e800

0800312c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	817b      	strh	r3, [r7, #10]
 800313a:	4613      	mov	r3, r2
 800313c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003144:	7a7b      	ldrb	r3, [r7, #9]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800314c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	4313      	orrs	r3, r2
 8003156:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800315a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	0d5b      	lsrs	r3, r3, #21
 8003166:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <I2C_TransferConfig+0x60>)
 800316c:	430b      	orrs	r3, r1
 800316e:	43db      	mvns	r3, r3
 8003170:	ea02 0103 	and.w	r1, r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	03ff63ff 	.word	0x03ff63ff

08003190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d138      	bne.n	8003218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e032      	b.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	@ 0x24
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b20      	cmp	r3, #32
 800323a:	d139      	bne.n	80032b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003246:	2302      	movs	r3, #2
 8003248:	e033      	b.n	80032b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2224      	movs	r2, #36	@ 0x24
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003278:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d141      	bne.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ce:	4b4b      	ldr	r3, [pc, #300]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032da:	d131      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032dc:	4b47      	ldr	r3, [pc, #284]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032e2:	4a46      	ldr	r2, [pc, #280]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ec:	4b43      	ldr	r3, [pc, #268]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032f4:	4a41      	ldr	r2, [pc, #260]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032fc:	4b40      	ldr	r3, [pc, #256]	@ (8003400 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2232      	movs	r2, #50	@ 0x32
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	4a3f      	ldr	r2, [pc, #252]	@ (8003404 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	0c9b      	lsrs	r3, r3, #18
 800330e:	3301      	adds	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003312:	e002      	b.n	800331a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3b01      	subs	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331a:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003326:	d102      	bne.n	800332e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f2      	bne.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800332e:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333a:	d158      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e057      	b.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003340:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003346:	4a2d      	ldr	r2, [pc, #180]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800334c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003350:	e04d      	b.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003358:	d141      	bne.n	80033de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800335a:	4b28      	ldr	r3, [pc, #160]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003366:	d131      	bne.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003368:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336e:	4a23      	ldr	r2, [pc, #140]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003378:	4b20      	ldr	r3, [pc, #128]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003380:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003386:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003388:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2232      	movs	r2, #50	@ 0x32
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	0c9b      	lsrs	r3, r3, #18
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800339e:	e002      	b.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033a6:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b2:	d102      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f2      	bne.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ba:	4b10      	ldr	r3, [pc, #64]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d112      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e011      	b.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033dc:	e007      	b.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033e6:	4a05      	ldr	r2, [pc, #20]	@ (80033fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40007000 	.word	0x40007000
 8003400:	20000004 	.word	0x20000004
 8003404:	431bde83 	.word	0x431bde83

08003408 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800340c:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003416:	6093      	str	r3, [r2, #8]
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40007000 	.word	0x40007000

08003428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e2fe      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d075      	beq.n	8003532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003446:	4b97      	ldr	r3, [pc, #604]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003450:	4b94      	ldr	r3, [pc, #592]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d102      	bne.n	8003466 <HAL_RCC_OscConfig+0x3e>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d002      	beq.n	800346c <HAL_RCC_OscConfig+0x44>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d10b      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	4b8d      	ldr	r3, [pc, #564]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05b      	beq.n	8003530 <HAL_RCC_OscConfig+0x108>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d157      	bne.n	8003530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e2d9      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800348c:	d106      	bne.n	800349c <HAL_RCC_OscConfig+0x74>
 800348e:	4b85      	ldr	r3, [pc, #532]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a84      	ldr	r2, [pc, #528]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e01d      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x98>
 80034a6:	4b7f      	ldr	r3, [pc, #508]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a7e      	ldr	r2, [pc, #504]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b7c      	ldr	r3, [pc, #496]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7b      	ldr	r2, [pc, #492]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 80034c0:	4b78      	ldr	r3, [pc, #480]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a77      	ldr	r2, [pc, #476]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b75      	ldr	r3, [pc, #468]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a74      	ldr	r2, [pc, #464]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fdd0 	bl	8002084 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fe fdcc 	bl	8002084 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	@ 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e29e      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fa:	4b6a      	ldr	r3, [pc, #424]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0xc0>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fdbc 	bl	8002084 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003510:	f7fe fdb8 	bl	8002084 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	@ 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e28a      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003522:	4b60      	ldr	r3, [pc, #384]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0xe8>
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d075      	beq.n	800362a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800353e:	4b59      	ldr	r3, [pc, #356]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003548:	4b56      	ldr	r3, [pc, #344]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d102      	bne.n	800355e <HAL_RCC_OscConfig+0x136>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d002      	beq.n	8003564 <HAL_RCC_OscConfig+0x13c>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d11f      	bne.n	80035a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003564:	4b4f      	ldr	r3, [pc, #316]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_OscConfig+0x154>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e25d      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	4b49      	ldr	r3, [pc, #292]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	4946      	ldr	r1, [pc, #280]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003590:	4b45      	ldr	r3, [pc, #276]	@ (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fd29 	bl	8001fec <HAL_InitTick>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d043      	beq.n	8003628 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e249      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d023      	beq.n	80035f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ac:	4b3d      	ldr	r3, [pc, #244]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3c      	ldr	r2, [pc, #240]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe fd64 	bl	8002084 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fe fd60 	bl	8002084 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e232      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d2:	4b34      	ldr	r3, [pc, #208]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	4b31      	ldr	r3, [pc, #196]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	492d      	ldr	r1, [pc, #180]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
 80035f2:	e01a      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f4:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2a      	ldr	r2, [pc, #168]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 80035fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe fd40 	bl	8002084 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003608:	f7fe fd3c 	bl	8002084 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e20e      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800361a:	4b22      	ldr	r3, [pc, #136]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1e0>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d041      	beq.n	80036ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01c      	beq.n	8003678 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363e:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003644:	4a17      	ldr	r2, [pc, #92]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fe fd19 	bl	8002084 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003656:	f7fe fd15 	bl	8002084 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1e7      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003668:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ef      	beq.n	8003656 <HAL_RCC_OscConfig+0x22e>
 8003676:	e020      	b.n	80036ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003678:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 800367a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <HAL_RCC_OscConfig+0x27c>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe fcfc 	bl	8002084 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800368e:	e00d      	b.n	80036ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003690:	f7fe fcf8 	bl	8002084 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d906      	bls.n	80036ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1ca      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ac:	4b8c      	ldr	r3, [pc, #560]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ea      	bne.n	8003690 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80a6 	beq.w	8003814 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c8:	2300      	movs	r3, #0
 80036ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036cc:	4b84      	ldr	r3, [pc, #528]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_OscConfig+0x2b4>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x2b6>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e2:	4b7f      	ldr	r3, [pc, #508]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	4a7e      	ldr	r2, [pc, #504]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ee:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036fa:	2301      	movs	r3, #1
 80036fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fe:	4b79      	ldr	r3, [pc, #484]	@ (80038e4 <HAL_RCC_OscConfig+0x4bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d118      	bne.n	800373c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370a:	4b76      	ldr	r3, [pc, #472]	@ (80038e4 <HAL_RCC_OscConfig+0x4bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	@ (80038e4 <HAL_RCC_OscConfig+0x4bc>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003716:	f7fe fcb5 	bl	8002084 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371e:	f7fe fcb1 	bl	8002084 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e183      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003730:	4b6c      	ldr	r3, [pc, #432]	@ (80038e4 <HAL_RCC_OscConfig+0x4bc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d108      	bne.n	8003756 <HAL_RCC_OscConfig+0x32e>
 8003744:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374a:	4a65      	ldr	r2, [pc, #404]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003754:	e024      	b.n	80037a0 <HAL_RCC_OscConfig+0x378>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d110      	bne.n	8003780 <HAL_RCC_OscConfig+0x358>
 800375e:	4b60      	ldr	r3, [pc, #384]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003764:	4a5e      	ldr	r2, [pc, #376]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800376e:	4b5c      	ldr	r3, [pc, #368]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	4a5a      	ldr	r2, [pc, #360]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_OscConfig+0x378>
 8003780:	4b57      	ldr	r3, [pc, #348]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	4a56      	ldr	r2, [pc, #344]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003790:	4b53      	ldr	r3, [pc, #332]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	4a52      	ldr	r2, [pc, #328]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d016      	beq.n	80037d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fe fc6c 	bl	8002084 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7fe fc68 	bl	8002084 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e138      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c6:	4b46      	ldr	r3, [pc, #280]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ed      	beq.n	80037b0 <HAL_RCC_OscConfig+0x388>
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fe fc55 	bl	8002084 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fc51 	bl	8002084 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e121      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f4:	4b3a      	ldr	r3, [pc, #232]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ed      	bne.n	80037de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b35      	ldr	r3, [pc, #212]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	4a34      	ldr	r2, [pc, #208]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d03c      	beq.n	800389a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003828:	4b2d      	ldr	r3, [pc, #180]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800382a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800382e:	4a2c      	ldr	r2, [pc, #176]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe fc24 	bl	8002084 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003840:	f7fe fc20 	bl	8002084 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0f2      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003852:	4b23      	ldr	r3, [pc, #140]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <HAL_RCC_OscConfig+0x418>
 8003860:	e01b      	b.n	800389a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003862:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003868:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe fc07 	bl	8002084 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800387a:	f7fe fc03 	bl	8002084 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0d5      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ef      	bne.n	800387a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80c9 	beq.w	8003a36 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a4:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	f000 8083 	beq.w	80039b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d15e      	bne.n	8003978 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a08      	ldr	r2, [pc, #32]	@ (80038e0 <HAL_RCC_OscConfig+0x4b8>)
 80038c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fe fbdd 	bl	8002084 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	e00c      	b.n	80038e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe fbd9 	bl	8002084 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d905      	bls.n	80038e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0ab      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	4b55      	ldr	r3, [pc, #340]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ec      	bne.n	80038ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f4:	4b52      	ldr	r3, [pc, #328]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4b52      	ldr	r3, [pc, #328]	@ (8003a44 <HAL_RCC_OscConfig+0x61c>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6a11      	ldr	r1, [r2, #32]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003904:	3a01      	subs	r2, #1
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800390e:	0212      	lsls	r2, r2, #8
 8003910:	4311      	orrs	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003916:	0852      	lsrs	r2, r2, #1
 8003918:	3a01      	subs	r2, #1
 800391a:	0552      	lsls	r2, r2, #21
 800391c:	4311      	orrs	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003922:	0852      	lsrs	r2, r2, #1
 8003924:	3a01      	subs	r2, #1
 8003926:	0652      	lsls	r2, r2, #25
 8003928:	4311      	orrs	r1, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800392e:	06d2      	lsls	r2, r2, #27
 8003930:	430a      	orrs	r2, r1
 8003932:	4943      	ldr	r1, [pc, #268]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 8003934:	4313      	orrs	r3, r2
 8003936:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a40      	ldr	r2, [pc, #256]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800393e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003944:	4b3e      	ldr	r3, [pc, #248]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a3d      	ldr	r2, [pc, #244]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800394e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe fb98 	bl	8002084 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe fb94 	bl	8002084 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e066      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x530>
 8003976:	e05e      	b.n	8003a36 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a30      	ldr	r2, [pc, #192]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 800397e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe fb7e 	bl	8002084 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fb7a 	bl	8002084 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e04c      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800399e:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039aa:	4b25      	ldr	r3, [pc, #148]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4924      	ldr	r1, [pc, #144]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80039b0:	4b25      	ldr	r3, [pc, #148]	@ (8003a48 <HAL_RCC_OscConfig+0x620>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	60cb      	str	r3, [r1, #12]
 80039b6:	e03e      	b.n	8003a36 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e039      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a40 <HAL_RCC_OscConfig+0x618>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d12c      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	3b01      	subs	r3, #1
 80039e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d123      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d11b      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d113      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d109      	bne.n	8003a32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	019f800c 	.word	0x019f800c
 8003a48:	feeefffc 	.word	0xfeeefffc

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e11e      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b91      	ldr	r3, [pc, #580]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d910      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b8e      	ldr	r3, [pc, #568]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 020f 	bic.w	r2, r3, #15
 8003a7a:	498c      	ldr	r1, [pc, #560]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b8a      	ldr	r3, [pc, #552]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e106      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d073      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d129      	bne.n	8003afc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa8:	4b81      	ldr	r3, [pc, #516]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0f4      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ab8:	f000 f99e 	bl	8003df8 <RCC_GetSysClockFreqFromPLLSource>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb4 <HAL_RCC_ClockConfig+0x268>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d93f      	bls.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d033      	beq.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d12f      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ae6:	4b72      	ldr	r3, [pc, #456]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aee:	4a70      	ldr	r2, [pc, #448]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003af4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e024      	b.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b04:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0c6      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b14:	4b66      	ldr	r3, [pc, #408]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0be      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b24:	f000 f8ce 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4a61      	ldr	r2, [pc, #388]	@ (8003cb4 <HAL_RCC_ClockConfig+0x268>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d909      	bls.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b32:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b3a:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b40:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b46:	4b5a      	ldr	r3, [pc, #360]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4957      	ldr	r1, [pc, #348]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b58:	f7fe fa94 	bl	8002084 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fe fa90 	bl	8002084 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e095      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 020c 	and.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1eb      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d023      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba0:	4b43      	ldr	r3, [pc, #268]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a42      	ldr	r2, [pc, #264]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003baa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b39      	ldr	r3, [pc, #228]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4936      	ldr	r1, [pc, #216]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
 8003bda:	e008      	b.n	8003bee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b80      	cmp	r3, #128	@ 0x80
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003be2:	4b33      	ldr	r3, [pc, #204]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	4a32      	ldr	r2, [pc, #200]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003be8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bee:	4b2f      	ldr	r3, [pc, #188]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d21d      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 020f 	bic.w	r2, r3, #15
 8003c04:	4929      	ldr	r1, [pc, #164]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c0c:	f7fe fa3a 	bl	8002084 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7fe fa36 	bl	8002084 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e03b      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_ClockConfig+0x260>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d1ed      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4917      	ldr	r1, [pc, #92]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c62:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	490f      	ldr	r1, [pc, #60]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c76:	f000 f825 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	490c      	ldr	r1, [pc, #48]	@ (8003cb8 <HAL_RCC_ClockConfig+0x26c>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <HAL_RCC_ClockConfig+0x270>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <HAL_RCC_ClockConfig+0x274>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe f9a6 	bl	8001fec <HAL_InitTick>
 8003ca0:	4603      	mov	r3, r0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40022000 	.word	0x40022000
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	04c4b400 	.word	0x04c4b400
 8003cb8:	0800894c 	.word	0x0800894c
 8003cbc:	20000004 	.word	0x20000004
 8003cc0:	20000008 	.word	0x20000008

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cca:	4b2c      	ldr	r3, [pc, #176]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e047      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d102      	bne.n	8003cee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ce8:	4b26      	ldr	r3, [pc, #152]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e03e      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cee:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d136      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfa:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d10c      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d18:	4a1a      	ldr	r2, [pc, #104]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	4a16      	ldr	r2, [pc, #88]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d22:	68d2      	ldr	r2, [r2, #12]
 8003d24:	0a12      	lsrs	r2, r2, #8
 8003d26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	617b      	str	r3, [r7, #20]
      break;
 8003d30:	e00c      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d32:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	4a10      	ldr	r2, [pc, #64]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3c:	68d2      	ldr	r2, [r2, #12]
 8003d3e:	0a12      	lsrs	r2, r2, #8
 8003d40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
      break;
 8003d4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	0e5b      	lsrs	r3, r3, #25
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e001      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d6c:	693b      	ldr	r3, [r7, #16]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	00f42400 	.word	0x00f42400
 8003d84:	016e3600 	.word	0x016e3600

08003d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	@ (8003d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000004 	.word	0x20000004

08003da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003da4:	f7ff fff0 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4904      	ldr	r1, [pc, #16]	@ (8003dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	0800895c 	.word	0x0800895c

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dd0:	f7ff ffda 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0adb      	lsrs	r3, r3, #11
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4904      	ldr	r1, [pc, #16]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	0800895c 	.word	0x0800895c

08003df8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e08:	4b1b      	ldr	r3, [pc, #108]	@ (8003e78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d10c      	bne.n	8003e36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e1c:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	4a14      	ldr	r2, [pc, #80]	@ (8003e78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e26:	68d2      	ldr	r2, [r2, #12]
 8003e28:	0a12      	lsrs	r2, r2, #8
 8003e2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	617b      	str	r3, [r7, #20]
    break;
 8003e34:	e00c      	b.n	8003e50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e40:	68d2      	ldr	r2, [r2, #12]
 8003e42:	0a12      	lsrs	r2, r2, #8
 8003e44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e48:	fb02 f303 	mul.w	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]
    break;
 8003e4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	0e5b      	lsrs	r3, r3, #25
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e6a:	687b      	ldr	r3, [r7, #4]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	016e3600 	.word	0x016e3600
 8003e80:	00f42400 	.word	0x00f42400

08003e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e90:	2300      	movs	r3, #0
 8003e92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8098 	beq.w	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea6:	4b43      	ldr	r3, [pc, #268]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10d      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	4b40      	ldr	r3, [pc, #256]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ece:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a39      	ldr	r2, [pc, #228]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eda:	f7fe f8d3 	bl	8002084 <HAL_GetTick>
 8003ede:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee0:	e009      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fe f8cf 	bl	8002084 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d902      	bls.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ef4:	e005      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef6:	4b30      	ldr	r3, [pc, #192]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0ef      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d159      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f08:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01e      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d019      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f24:	4b23      	ldr	r3, [pc, #140]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f30:	4b20      	ldr	r3, [pc, #128]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f36:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f40:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f46:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f50:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fe f88f 	bl	8002084 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f68:	e00b      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe f88b 	bl	8002084 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d902      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f82:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ec      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f96:	4b07      	ldr	r3, [pc, #28]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa4:	4903      	ldr	r1, [pc, #12]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fac:	e008      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	74bb      	strb	r3, [r7, #18]
 8003fb2:	e005      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc0:	7c7b      	ldrb	r3, [r7, #17]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc6:	4ba7      	ldr	r3, [pc, #668]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fca:	4aa6      	ldr	r2, [pc, #664]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fde:	4ba1      	ldr	r3, [pc, #644]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	f023 0203 	bic.w	r2, r3, #3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	499d      	ldr	r1, [pc, #628]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004000:	4b98      	ldr	r3, [pc, #608]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004006:	f023 020c 	bic.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4995      	ldr	r1, [pc, #596]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004022:	4b90      	ldr	r3, [pc, #576]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004028:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	498c      	ldr	r1, [pc, #560]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004044:	4b87      	ldr	r3, [pc, #540]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	4984      	ldr	r1, [pc, #528]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004066:	4b7f      	ldr	r3, [pc, #508]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	497b      	ldr	r1, [pc, #492]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004088:	4b76      	ldr	r3, [pc, #472]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4973      	ldr	r1, [pc, #460]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	496a      	ldr	r1, [pc, #424]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040cc:	4b65      	ldr	r3, [pc, #404]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	4962      	ldr	r1, [pc, #392]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	4959      	ldr	r1, [pc, #356]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004110:	4b54      	ldr	r3, [pc, #336]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004116:	f023 0203 	bic.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	4951      	ldr	r1, [pc, #324]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004132:	4b4c      	ldr	r3, [pc, #304]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004138:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	4948      	ldr	r1, [pc, #288]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d015      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004154:	4b43      	ldr	r3, [pc, #268]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	4940      	ldr	r1, [pc, #256]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b3b      	ldr	r3, [pc, #236]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a3a      	ldr	r2, [pc, #232]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800417e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004188:	2b00      	cmp	r3, #0
 800418a:	d015      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800418c:	4b35      	ldr	r3, [pc, #212]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	4932      	ldr	r1, [pc, #200]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041aa:	d105      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041c4:	4b27      	ldr	r3, [pc, #156]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d2:	4924      	ldr	r1, [pc, #144]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041e2:	d105      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d015      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fc:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004202:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	4916      	ldr	r1, [pc, #88]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800421a:	d105      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421c:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a10      	ldr	r2, [pc, #64]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004226:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d019      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004234:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	4908      	ldr	r1, [pc, #32]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004252:	d109      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004254:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a02      	ldr	r2, [pc, #8]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800425e:	60d3      	str	r3, [r2, #12]
 8004260:	e002      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004274:	4b29      	ldr	r3, [pc, #164]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	4926      	ldr	r1, [pc, #152]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004294:	4b21      	ldr	r3, [pc, #132]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a20      	ldr	r2, [pc, #128]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042ac:	4b1b      	ldr	r3, [pc, #108]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ba:	4918      	ldr	r1, [pc, #96]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ca:	d105      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042cc:	4b13      	ldr	r3, [pc, #76]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a12      	ldr	r2, [pc, #72]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d015      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042e4:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	490a      	ldr	r1, [pc, #40]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004302:	d105      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a04      	ldr	r2, [pc, #16]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004310:	7cbb      	ldrb	r3, [r7, #18]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000

08004320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e049      	b.n	80043c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fd46 	bl	8001dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f000 fb3c 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d001      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e054      	b.n	8004492 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a26      	ldr	r2, [pc, #152]	@ (80044a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d022      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004412:	d01d      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a22      	ldr	r2, [pc, #136]	@ (80044a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a21      	ldr	r2, [pc, #132]	@ (80044a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1f      	ldr	r2, [pc, #124]	@ (80044ac <HAL_TIM_Base_Start_IT+0xdc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1e      	ldr	r2, [pc, #120]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1c      	ldr	r2, [pc, #112]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1b      	ldr	r2, [pc, #108]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d115      	bne.n	800447c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_TIM_Base_Start_IT+0xec>)
 8004458:	4013      	ands	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b06      	cmp	r3, #6
 8004460:	d015      	beq.n	800448e <HAL_TIM_Base_Start_IT+0xbe>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004468:	d011      	beq.n	800448e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	e008      	b.n	800448e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e000      	b.n	8004490 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40013400 	.word	0x40013400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40015000 	.word	0x40015000
 80044bc:	00010007 	.word	0x00010007

080044c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0202 	mvn.w	r2, #2
 80044f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa48 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa3a 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa4b 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0204 	mvn.w	r2, #4
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa22 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa14 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa25 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9fc 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9ee 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f9ff 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0210 	mvn.w	r2, #16
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2208      	movs	r2, #8
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f9d6 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f9c8 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f9d9 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0201 	mvn.w	r2, #1
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd fa1e 	bl	8001a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fbb1 	bl	8004dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00c      	beq.n	800467e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fba9 	bl	8004dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00c      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800469a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f993 	bl	80049c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f06f 0220 	mvn.w	r2, #32
 80046be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fb71 	bl	8004da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00c      	beq.n	80046ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fb7d 	bl	8004de4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00c      	beq.n	800470e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fb75 	bl	8004df8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00c      	beq.n	8004732 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800472a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb6d 	bl	8004e0c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00c      	beq.n	8004756 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800474e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fb65 	bl	8004e20 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_TIM_ConfigClockSource+0x1c>
 8004778:	2302      	movs	r3, #2
 800477a:	e0f6      	b.n	800496a <HAL_TIM_ConfigClockSource+0x20a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800479a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800479e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6f      	ldr	r2, [pc, #444]	@ (8004974 <HAL_TIM_ConfigClockSource+0x214>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	f000 80c1 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1de>
 80047bc:	4a6d      	ldr	r2, [pc, #436]	@ (8004974 <HAL_TIM_ConfigClockSource+0x214>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	f200 80c6 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 80047c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004978 <HAL_TIM_ConfigClockSource+0x218>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	f000 80b9 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1de>
 80047cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004978 <HAL_TIM_ConfigClockSource+0x218>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	f200 80be 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 80047d4:	4a69      	ldr	r2, [pc, #420]	@ (800497c <HAL_TIM_ConfigClockSource+0x21c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	f000 80b1 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1de>
 80047dc:	4a67      	ldr	r2, [pc, #412]	@ (800497c <HAL_TIM_ConfigClockSource+0x21c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	f200 80b6 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 80047e4:	4a66      	ldr	r2, [pc, #408]	@ (8004980 <HAL_TIM_ConfigClockSource+0x220>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	f000 80a9 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1de>
 80047ec:	4a64      	ldr	r2, [pc, #400]	@ (8004980 <HAL_TIM_ConfigClockSource+0x220>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	f200 80ae 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 80047f4:	4a63      	ldr	r2, [pc, #396]	@ (8004984 <HAL_TIM_ConfigClockSource+0x224>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	f000 80a1 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1de>
 80047fc:	4a61      	ldr	r2, [pc, #388]	@ (8004984 <HAL_TIM_ConfigClockSource+0x224>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	f200 80a6 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004804:	4a60      	ldr	r2, [pc, #384]	@ (8004988 <HAL_TIM_ConfigClockSource+0x228>)
 8004806:	4293      	cmp	r3, r2
 8004808:	f000 8099 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1de>
 800480c:	4a5e      	ldr	r2, [pc, #376]	@ (8004988 <HAL_TIM_ConfigClockSource+0x228>)
 800480e:	4293      	cmp	r3, r2
 8004810:	f200 809e 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004814:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004818:	f000 8091 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1de>
 800481c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004820:	f200 8096 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004824:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004828:	f000 8089 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1de>
 800482c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004830:	f200 808e 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004838:	d03e      	beq.n	80048b8 <HAL_TIM_ConfigClockSource+0x158>
 800483a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800483e:	f200 8087 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004846:	f000 8086 	beq.w	8004956 <HAL_TIM_ConfigClockSource+0x1f6>
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800484e:	d87f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004850:	2b70      	cmp	r3, #112	@ 0x70
 8004852:	d01a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x12a>
 8004854:	2b70      	cmp	r3, #112	@ 0x70
 8004856:	d87b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004858:	2b60      	cmp	r3, #96	@ 0x60
 800485a:	d050      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x19e>
 800485c:	2b60      	cmp	r3, #96	@ 0x60
 800485e:	d877      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004860:	2b50      	cmp	r3, #80	@ 0x50
 8004862:	d03c      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x17e>
 8004864:	2b50      	cmp	r3, #80	@ 0x50
 8004866:	d873      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004868:	2b40      	cmp	r3, #64	@ 0x40
 800486a:	d058      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x1be>
 800486c:	2b40      	cmp	r3, #64	@ 0x40
 800486e:	d86f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004870:	2b30      	cmp	r3, #48	@ 0x30
 8004872:	d064      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x1de>
 8004874:	2b30      	cmp	r3, #48	@ 0x30
 8004876:	d86b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d060      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x1de>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d867      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05c      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x1de>
 8004884:	2b10      	cmp	r3, #16
 8004886:	d05a      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x1de>
 8004888:	e062      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800489a:	f000 f9cf 	bl	8004c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	609a      	str	r2, [r3, #8]
      break;
 80048b6:	e04f      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048c8:	f000 f9b8 	bl	8004c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048da:	609a      	str	r2, [r3, #8]
      break;
 80048dc:	e03c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 f92a 	bl	8004b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2150      	movs	r1, #80	@ 0x50
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f983 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80048fc:	e02c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800490a:	461a      	mov	r2, r3
 800490c:	f000 f949 	bl	8004ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2160      	movs	r1, #96	@ 0x60
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f973 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 800491c:	e01c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	461a      	mov	r2, r3
 800492c:	f000 f90a 	bl	8004b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2140      	movs	r1, #64	@ 0x40
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f963 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 800493c:	e00c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 f95a 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 800494e:	e003      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e000      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	00100070 	.word	0x00100070
 8004978:	00100060 	.word	0x00100060
 800497c:	00100050 	.word	0x00100050
 8004980:	00100040 	.word	0x00100040
 8004984:	00100030 	.word	0x00100030
 8004988:	00100020 	.word	0x00100020

0800498c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004b20 <TIM_Base_SetConfig+0x144>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d017      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fa:	d013      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a49      	ldr	r2, [pc, #292]	@ (8004b24 <TIM_Base_SetConfig+0x148>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a48      	ldr	r2, [pc, #288]	@ (8004b28 <TIM_Base_SetConfig+0x14c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a47      	ldr	r2, [pc, #284]	@ (8004b2c <TIM_Base_SetConfig+0x150>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a46      	ldr	r2, [pc, #280]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a45      	ldr	r2, [pc, #276]	@ (8004b34 <TIM_Base_SetConfig+0x158>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a39      	ldr	r2, [pc, #228]	@ (8004b20 <TIM_Base_SetConfig+0x144>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d023      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a44:	d01f      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a36      	ldr	r2, [pc, #216]	@ (8004b24 <TIM_Base_SetConfig+0x148>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01b      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a35      	ldr	r2, [pc, #212]	@ (8004b28 <TIM_Base_SetConfig+0x14c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d017      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a34      	ldr	r2, [pc, #208]	@ (8004b2c <TIM_Base_SetConfig+0x150>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a33      	ldr	r2, [pc, #204]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00f      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a33      	ldr	r2, [pc, #204]	@ (8004b38 <TIM_Base_SetConfig+0x15c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a32      	ldr	r2, [pc, #200]	@ (8004b3c <TIM_Base_SetConfig+0x160>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d007      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a31      	ldr	r2, [pc, #196]	@ (8004b40 <TIM_Base_SetConfig+0x164>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2c      	ldr	r2, [pc, #176]	@ (8004b34 <TIM_Base_SetConfig+0x158>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d108      	bne.n	8004a98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <TIM_Base_SetConfig+0x144>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00f      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1a      	ldr	r2, [pc, #104]	@ (8004b38 <TIM_Base_SetConfig+0x15c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a19      	ldr	r2, [pc, #100]	@ (8004b3c <TIM_Base_SetConfig+0x160>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a18      	ldr	r2, [pc, #96]	@ (8004b40 <TIM_Base_SetConfig+0x164>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	@ (8004b34 <TIM_Base_SetConfig+0x158>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d103      	bne.n	8004af4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]
  }
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40015000 	.word	0x40015000
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40014400 	.word	0x40014400
 8004b40:	40014800 	.word	0x40014800

08004b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 030a 	bic.w	r3, r3, #10
 8004b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b087      	sub	sp, #28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f023 0210 	bic.w	r2, r3, #16
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	031b      	lsls	r3, r3, #12
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f043 0307 	orr.w	r3, r3, #7
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	609a      	str	r2, [r3, #8]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e074      	b.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a34      	ldr	r2, [pc, #208]	@ (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a33      	ldr	r2, [pc, #204]	@ (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a31      	ldr	r2, [pc, #196]	@ (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004cd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d022      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d14:	d01d      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d018      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a15      	ldr	r2, [pc, #84]	@ (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a18      	ldr	r2, [pc, #96]	@ (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a11      	ldr	r2, [pc, #68]	@ (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10c      	bne.n	8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40013400 	.word	0x40013400
 8004d94:	40015000 	.word	0x40015000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40014000 	.word	0x40014000

08004da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e042      	b.n	8004ecc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fd f82d 	bl	8001eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2224      	movs	r2, #36	@ 0x24
 8004e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0201 	bic.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fbb2 	bl	80055e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8b3 	bl	8004ff0 <UART_SetConfig>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e01b      	b.n	8004ecc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fc31 	bl	800572c <UART_CheckIdleState>
 8004eca:	4603      	mov	r3, r0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	@ 0x28
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d17b      	bne.n	8004fe6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_UART_Transmit+0x26>
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e074      	b.n	8004fe8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2221      	movs	r2, #33	@ 0x21
 8004f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f0e:	f7fd f8b9 	bl	8002084 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2c:	d108      	bne.n	8004f40 <HAL_UART_Transmit+0x6c>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	e003      	b.n	8004f48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f48:	e030      	b.n	8004fac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2200      	movs	r2, #0
 8004f52:	2180      	movs	r1, #128	@ 0x80
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fc93 	bl	8005880 <UART_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e03d      	b.n	8004fe8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	3302      	adds	r3, #2
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e007      	b.n	8004f9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	3301      	adds	r3, #1
 8004f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1c8      	bne.n	8004f4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2140      	movs	r1, #64	@ 0x40
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fc5c 	bl	8005880 <UART_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e006      	b.n	8004fe8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b08c      	sub	sp, #48	@ 0x30
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	431a      	orrs	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	431a      	orrs	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	4313      	orrs	r3, r2
 8005016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4baa      	ldr	r3, [pc, #680]	@ (80052c8 <UART_SetConfig+0x2d8>)
 8005020:	4013      	ands	r3, r2
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005028:	430b      	orrs	r3, r1
 800502a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a9f      	ldr	r2, [pc, #636]	@ (80052cc <UART_SetConfig+0x2dc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005058:	4313      	orrs	r3, r2
 800505a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005066:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005070:	430b      	orrs	r3, r1
 8005072:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	f023 010f 	bic.w	r1, r3, #15
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a90      	ldr	r2, [pc, #576]	@ (80052d0 <UART_SetConfig+0x2e0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d125      	bne.n	80050e0 <UART_SetConfig+0xf0>
 8005094:	4b8f      	ldr	r3, [pc, #572]	@ (80052d4 <UART_SetConfig+0x2e4>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d81a      	bhi.n	80050d8 <UART_SetConfig+0xe8>
 80050a2:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <UART_SetConfig+0xb8>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050c9 	.word	0x080050c9
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050be:	e116      	b.n	80052ee <UART_SetConfig+0x2fe>
 80050c0:	2302      	movs	r3, #2
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c6:	e112      	b.n	80052ee <UART_SetConfig+0x2fe>
 80050c8:	2304      	movs	r3, #4
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ce:	e10e      	b.n	80052ee <UART_SetConfig+0x2fe>
 80050d0:	2308      	movs	r3, #8
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d6:	e10a      	b.n	80052ee <UART_SetConfig+0x2fe>
 80050d8:	2310      	movs	r3, #16
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050de:	e106      	b.n	80052ee <UART_SetConfig+0x2fe>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a7c      	ldr	r2, [pc, #496]	@ (80052d8 <UART_SetConfig+0x2e8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d138      	bne.n	800515c <UART_SetConfig+0x16c>
 80050ea:	4b7a      	ldr	r3, [pc, #488]	@ (80052d4 <UART_SetConfig+0x2e4>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f0:	f003 030c 	and.w	r3, r3, #12
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	d82d      	bhi.n	8005154 <UART_SetConfig+0x164>
 80050f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005100 <UART_SetConfig+0x110>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	08005135 	.word	0x08005135
 8005104:	08005155 	.word	0x08005155
 8005108:	08005155 	.word	0x08005155
 800510c:	08005155 	.word	0x08005155
 8005110:	08005145 	.word	0x08005145
 8005114:	08005155 	.word	0x08005155
 8005118:	08005155 	.word	0x08005155
 800511c:	08005155 	.word	0x08005155
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005155 	.word	0x08005155
 8005128:	08005155 	.word	0x08005155
 800512c:	08005155 	.word	0x08005155
 8005130:	0800514d 	.word	0x0800514d
 8005134:	2300      	movs	r3, #0
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513a:	e0d8      	b.n	80052ee <UART_SetConfig+0x2fe>
 800513c:	2302      	movs	r3, #2
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005142:	e0d4      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514a:	e0d0      	b.n	80052ee <UART_SetConfig+0x2fe>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005152:	e0cc      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515a:	e0c8      	b.n	80052ee <UART_SetConfig+0x2fe>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5e      	ldr	r2, [pc, #376]	@ (80052dc <UART_SetConfig+0x2ec>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d125      	bne.n	80051b2 <UART_SetConfig+0x1c2>
 8005166:	4b5b      	ldr	r3, [pc, #364]	@ (80052d4 <UART_SetConfig+0x2e4>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005170:	2b30      	cmp	r3, #48	@ 0x30
 8005172:	d016      	beq.n	80051a2 <UART_SetConfig+0x1b2>
 8005174:	2b30      	cmp	r3, #48	@ 0x30
 8005176:	d818      	bhi.n	80051aa <UART_SetConfig+0x1ba>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d00a      	beq.n	8005192 <UART_SetConfig+0x1a2>
 800517c:	2b20      	cmp	r3, #32
 800517e:	d814      	bhi.n	80051aa <UART_SetConfig+0x1ba>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <UART_SetConfig+0x19a>
 8005184:	2b10      	cmp	r3, #16
 8005186:	d008      	beq.n	800519a <UART_SetConfig+0x1aa>
 8005188:	e00f      	b.n	80051aa <UART_SetConfig+0x1ba>
 800518a:	2300      	movs	r3, #0
 800518c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005190:	e0ad      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005192:	2302      	movs	r3, #2
 8005194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005198:	e0a9      	b.n	80052ee <UART_SetConfig+0x2fe>
 800519a:	2304      	movs	r3, #4
 800519c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051a0:	e0a5      	b.n	80052ee <UART_SetConfig+0x2fe>
 80051a2:	2308      	movs	r3, #8
 80051a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051a8:	e0a1      	b.n	80052ee <UART_SetConfig+0x2fe>
 80051aa:	2310      	movs	r3, #16
 80051ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b0:	e09d      	b.n	80052ee <UART_SetConfig+0x2fe>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a4a      	ldr	r2, [pc, #296]	@ (80052e0 <UART_SetConfig+0x2f0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d125      	bne.n	8005208 <UART_SetConfig+0x218>
 80051bc:	4b45      	ldr	r3, [pc, #276]	@ (80052d4 <UART_SetConfig+0x2e4>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c8:	d016      	beq.n	80051f8 <UART_SetConfig+0x208>
 80051ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80051cc:	d818      	bhi.n	8005200 <UART_SetConfig+0x210>
 80051ce:	2b80      	cmp	r3, #128	@ 0x80
 80051d0:	d00a      	beq.n	80051e8 <UART_SetConfig+0x1f8>
 80051d2:	2b80      	cmp	r3, #128	@ 0x80
 80051d4:	d814      	bhi.n	8005200 <UART_SetConfig+0x210>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <UART_SetConfig+0x1f0>
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d008      	beq.n	80051f0 <UART_SetConfig+0x200>
 80051de:	e00f      	b.n	8005200 <UART_SetConfig+0x210>
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e6:	e082      	b.n	80052ee <UART_SetConfig+0x2fe>
 80051e8:	2302      	movs	r3, #2
 80051ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ee:	e07e      	b.n	80052ee <UART_SetConfig+0x2fe>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f6:	e07a      	b.n	80052ee <UART_SetConfig+0x2fe>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fe:	e076      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005206:	e072      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a35      	ldr	r2, [pc, #212]	@ (80052e4 <UART_SetConfig+0x2f4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d12a      	bne.n	8005268 <UART_SetConfig+0x278>
 8005212:	4b30      	ldr	r3, [pc, #192]	@ (80052d4 <UART_SetConfig+0x2e4>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005220:	d01a      	beq.n	8005258 <UART_SetConfig+0x268>
 8005222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005226:	d81b      	bhi.n	8005260 <UART_SetConfig+0x270>
 8005228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800522c:	d00c      	beq.n	8005248 <UART_SetConfig+0x258>
 800522e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005232:	d815      	bhi.n	8005260 <UART_SetConfig+0x270>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <UART_SetConfig+0x250>
 8005238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800523c:	d008      	beq.n	8005250 <UART_SetConfig+0x260>
 800523e:	e00f      	b.n	8005260 <UART_SetConfig+0x270>
 8005240:	2300      	movs	r3, #0
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005246:	e052      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005248:	2302      	movs	r3, #2
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524e:	e04e      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005250:	2304      	movs	r3, #4
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005256:	e04a      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005258:	2308      	movs	r3, #8
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525e:	e046      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005260:	2310      	movs	r3, #16
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005266:	e042      	b.n	80052ee <UART_SetConfig+0x2fe>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a17      	ldr	r2, [pc, #92]	@ (80052cc <UART_SetConfig+0x2dc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d13a      	bne.n	80052e8 <UART_SetConfig+0x2f8>
 8005272:	4b18      	ldr	r3, [pc, #96]	@ (80052d4 <UART_SetConfig+0x2e4>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005278:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800527c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005280:	d01a      	beq.n	80052b8 <UART_SetConfig+0x2c8>
 8005282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005286:	d81b      	bhi.n	80052c0 <UART_SetConfig+0x2d0>
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800528c:	d00c      	beq.n	80052a8 <UART_SetConfig+0x2b8>
 800528e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005292:	d815      	bhi.n	80052c0 <UART_SetConfig+0x2d0>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <UART_SetConfig+0x2b0>
 8005298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529c:	d008      	beq.n	80052b0 <UART_SetConfig+0x2c0>
 800529e:	e00f      	b.n	80052c0 <UART_SetConfig+0x2d0>
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a6:	e022      	b.n	80052ee <UART_SetConfig+0x2fe>
 80052a8:	2302      	movs	r3, #2
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ae:	e01e      	b.n	80052ee <UART_SetConfig+0x2fe>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b6:	e01a      	b.n	80052ee <UART_SetConfig+0x2fe>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052be:	e016      	b.n	80052ee <UART_SetConfig+0x2fe>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c6:	e012      	b.n	80052ee <UART_SetConfig+0x2fe>
 80052c8:	cfff69f3 	.word	0xcfff69f3
 80052cc:	40008000 	.word	0x40008000
 80052d0:	40013800 	.word	0x40013800
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40004400 	.word	0x40004400
 80052dc:	40004800 	.word	0x40004800
 80052e0:	40004c00 	.word	0x40004c00
 80052e4:	40005000 	.word	0x40005000
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4aae      	ldr	r2, [pc, #696]	@ (80055ac <UART_SetConfig+0x5bc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	f040 8097 	bne.w	8005428 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d823      	bhi.n	800534a <UART_SetConfig+0x35a>
 8005302:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <UART_SetConfig+0x318>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532d 	.word	0x0800532d
 800530c:	0800534b 	.word	0x0800534b
 8005310:	08005335 	.word	0x08005335
 8005314:	0800534b 	.word	0x0800534b
 8005318:	0800533b 	.word	0x0800533b
 800531c:	0800534b 	.word	0x0800534b
 8005320:	0800534b 	.word	0x0800534b
 8005324:	0800534b 	.word	0x0800534b
 8005328:	08005343 	.word	0x08005343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fe fd38 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8005330:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005332:	e010      	b.n	8005356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005334:	4b9e      	ldr	r3, [pc, #632]	@ (80055b0 <UART_SetConfig+0x5c0>)
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005338:	e00d      	b.n	8005356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533a:	f7fe fcc3 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 800533e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005340:	e009      	b.n	8005356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005348:	e005      	b.n	8005356 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005354:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8130 	beq.w	80055be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	4a94      	ldr	r2, [pc, #592]	@ (80055b4 <UART_SetConfig+0x5c4>)
 8005364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005368:	461a      	mov	r2, r3
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005370:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	429a      	cmp	r2, r3
 8005380:	d305      	bcc.n	800538e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	429a      	cmp	r2, r3
 800538c:	d903      	bls.n	8005396 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005394:	e113      	b.n	80055be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	2200      	movs	r2, #0
 800539a:	60bb      	str	r3, [r7, #8]
 800539c:	60fa      	str	r2, [r7, #12]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	4a84      	ldr	r2, [pc, #528]	@ (80055b4 <UART_SetConfig+0x5c4>)
 80053a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2200      	movs	r2, #0
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053b8:	f7fb fc1e 	bl	8000bf8 <__aeabi_uldivmod>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	020b      	lsls	r3, r1, #8
 80053ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053d2:	0202      	lsls	r2, r0, #8
 80053d4:	6979      	ldr	r1, [r7, #20]
 80053d6:	6849      	ldr	r1, [r1, #4]
 80053d8:	0849      	lsrs	r1, r1, #1
 80053da:	2000      	movs	r0, #0
 80053dc:	460c      	mov	r4, r1
 80053de:	4605      	mov	r5, r0
 80053e0:	eb12 0804 	adds.w	r8, r2, r4
 80053e4:	eb43 0905 	adc.w	r9, r3, r5
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	469a      	mov	sl, r3
 80053f0:	4693      	mov	fp, r2
 80053f2:	4652      	mov	r2, sl
 80053f4:	465b      	mov	r3, fp
 80053f6:	4640      	mov	r0, r8
 80053f8:	4649      	mov	r1, r9
 80053fa:	f7fb fbfd 	bl	8000bf8 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4613      	mov	r3, r2
 8005404:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800540c:	d308      	bcc.n	8005420 <UART_SetConfig+0x430>
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005414:	d204      	bcs.n	8005420 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a3a      	ldr	r2, [r7, #32]
 800541c:	60da      	str	r2, [r3, #12]
 800541e:	e0ce      	b.n	80055be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005426:	e0ca      	b.n	80055be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005430:	d166      	bne.n	8005500 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005432:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005436:	2b08      	cmp	r3, #8
 8005438:	d827      	bhi.n	800548a <UART_SetConfig+0x49a>
 800543a:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <UART_SetConfig+0x450>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005465 	.word	0x08005465
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005475 	.word	0x08005475
 800544c:	0800548b 	.word	0x0800548b
 8005450:	0800547b 	.word	0x0800547b
 8005454:	0800548b 	.word	0x0800548b
 8005458:	0800548b 	.word	0x0800548b
 800545c:	0800548b 	.word	0x0800548b
 8005460:	08005483 	.word	0x08005483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7fe fc9c 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8005468:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800546a:	e014      	b.n	8005496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7fe fcae 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005470:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005472:	e010      	b.n	8005496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b4e      	ldr	r3, [pc, #312]	@ (80055b0 <UART_SetConfig+0x5c0>)
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005478:	e00d      	b.n	8005496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fe fc23 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 800547e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005480:	e009      	b.n	8005496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005488:	e005      	b.n	8005496 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8090 	beq.w	80055be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	4a44      	ldr	r2, [pc, #272]	@ (80055b4 <UART_SetConfig+0x5c4>)
 80054a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80054b0:	005a      	lsls	r2, r3, #1
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	441a      	add	r2, r3
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	d916      	bls.n	80054f8 <UART_SetConfig+0x508>
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d0:	d212      	bcs.n	80054f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f023 030f 	bic.w	r3, r3, #15
 80054da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	8bfb      	ldrh	r3, [r7, #30]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	8bfa      	ldrh	r2, [r7, #30]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	e062      	b.n	80055be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054fe:	e05e      	b.n	80055be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005500:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005504:	2b08      	cmp	r3, #8
 8005506:	d828      	bhi.n	800555a <UART_SetConfig+0x56a>
 8005508:	a201      	add	r2, pc, #4	@ (adr r2, 8005510 <UART_SetConfig+0x520>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005535 	.word	0x08005535
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005545 	.word	0x08005545
 800551c:	0800555b 	.word	0x0800555b
 8005520:	0800554b 	.word	0x0800554b
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800555b 	.word	0x0800555b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7fe fc34 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8005538:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800553a:	e014      	b.n	8005566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800553c:	f7fe fc46 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005540:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <UART_SetConfig+0x5c0>)
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005548:	e00d      	b.n	8005566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fe fbbb 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 800554e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005550:	e009      	b.n	8005566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005564:	bf00      	nop
    }

    if (pclk != 0U)
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d028      	beq.n	80055be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	4a10      	ldr	r2, [pc, #64]	@ (80055b4 <UART_SetConfig+0x5c4>)
 8005572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005576:	461a      	mov	r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	fbb3 f2f2 	udiv	r2, r3, r2
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	441a      	add	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d910      	bls.n	80055b8 <UART_SetConfig+0x5c8>
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800559c:	d20c      	bcs.n	80055b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e009      	b.n	80055be <UART_SetConfig+0x5ce>
 80055aa:	bf00      	nop
 80055ac:	40008000 	.word	0x40008000
 80055b0:	00f42400 	.word	0x00f42400
 80055b4:	08008964 	.word	0x08008964
      }
      else
      {
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2200      	movs	r2, #0
 80055d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2200      	movs	r2, #0
 80055d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80055da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3730      	adds	r7, #48	@ 0x30
 80055e2:	46bd      	mov	sp, r7
 80055e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080055e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01a      	beq.n	80056fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056e6:	d10a      	bne.n	80056fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
  }
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b098      	sub	sp, #96	@ 0x60
 8005730:	af02      	add	r7, sp, #8
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800573c:	f7fc fca2 	bl	8002084 <HAL_GetTick>
 8005740:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b08      	cmp	r3, #8
 800574e:	d12f      	bne.n	80057b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005758:	2200      	movs	r2, #0
 800575a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f88e 	bl	8005880 <UART_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d022      	beq.n	80057b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800577e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005788:	647b      	str	r3, [r7, #68]	@ 0x44
 800578a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800578e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e6      	bne.n	800576a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e063      	b.n	8005878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d149      	bne.n	8005852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c6:	2200      	movs	r2, #0
 80057c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f857 	bl	8005880 <UART_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d03c      	beq.n	8005852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	623b      	str	r3, [r7, #32]
   return(result);
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80057f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e6      	bne.n	80057d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3308      	adds	r3, #8
 8005810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	60fb      	str	r3, [r7, #12]
   return(result);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800582a:	61fa      	str	r2, [r7, #28]
 800582c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	69b9      	ldr	r1, [r7, #24]
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	617b      	str	r3, [r7, #20]
   return(result);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e5      	bne.n	800580a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e012      	b.n	8005878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3758      	adds	r7, #88	@ 0x58
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005890:	e04f      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005898:	d04b      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589a:	f7fc fbf3 	bl	8002084 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e04e      	b.n	8005952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d037      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b80      	cmp	r3, #128	@ 0x80
 80058c6:	d034      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b40      	cmp	r3, #64	@ 0x40
 80058cc:	d031      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d110      	bne.n	80058fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2208      	movs	r2, #8
 80058e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f838 	bl	800595a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2208      	movs	r2, #8
 80058ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e029      	b.n	8005952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800590c:	d111      	bne.n	8005932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f81e 	bl	800595a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e00f      	b.n	8005952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4013      	ands	r3, r2
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	429a      	cmp	r2, r3
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	429a      	cmp	r2, r3
 800594e:	d0a0      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800595a:	b480      	push	{r7}
 800595c:	b095      	sub	sp, #84	@ 0x54
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005980:	643b      	str	r3, [r7, #64]	@ 0x40
 8005982:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e3      	bne.n	8005994 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d118      	bne.n	8005a06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f023 0310 	bic.w	r3, r3, #16
 80059e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e6      	bne.n	80059d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a1a:	bf00      	nop
 8005a1c:	3754      	adds	r7, #84	@ 0x54
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_UARTEx_DisableFifoMode+0x16>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e027      	b.n	8005a8c <HAL_UARTEx_DisableFifoMode+0x66>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2224      	movs	r2, #36	@ 0x24
 8005a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e02d      	b.n	8005b0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	@ 0x24
 8005abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f84f 	bl	8005b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e02d      	b.n	8005b88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	@ 0x24
 8005b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f811 	bl	8005b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d108      	bne.n	8005bb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bb0:	e031      	b.n	8005c16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	0e5b      	lsrs	r3, r3, #25
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	0f5b      	lsrs	r3, r3, #29
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	7b3a      	ldrb	r2, [r7, #12]
 8005bde:	4911      	ldr	r1, [pc, #68]	@ (8005c24 <UARTEx_SetNbDataToProcess+0x94>)
 8005be0:	5c8a      	ldrb	r2, [r1, r2]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005be6:	7b3a      	ldrb	r2, [r7, #12]
 8005be8:	490f      	ldr	r1, [pc, #60]	@ (8005c28 <UARTEx_SetNbDataToProcess+0x98>)
 8005bea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	7b7a      	ldrb	r2, [r7, #13]
 8005bfc:	4909      	ldr	r1, [pc, #36]	@ (8005c24 <UARTEx_SetNbDataToProcess+0x94>)
 8005bfe:	5c8a      	ldrb	r2, [r1, r2]
 8005c00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c04:	7b7a      	ldrb	r2, [r7, #13]
 8005c06:	4908      	ldr	r1, [pc, #32]	@ (8005c28 <UARTEx_SetNbDataToProcess+0x98>)
 8005c08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	0800897c 	.word	0x0800897c
 8005c28:	08008984 	.word	0x08008984

08005c2c <__cvt>:
 8005c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c30:	ec57 6b10 	vmov	r6, r7, d0
 8005c34:	2f00      	cmp	r7, #0
 8005c36:	460c      	mov	r4, r1
 8005c38:	4619      	mov	r1, r3
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	bfbb      	ittet	lt
 8005c3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c42:	461f      	movlt	r7, r3
 8005c44:	2300      	movge	r3, #0
 8005c46:	232d      	movlt	r3, #45	@ 0x2d
 8005c48:	700b      	strb	r3, [r1, #0]
 8005c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c50:	4691      	mov	r9, r2
 8005c52:	f023 0820 	bic.w	r8, r3, #32
 8005c56:	bfbc      	itt	lt
 8005c58:	4632      	movlt	r2, r6
 8005c5a:	4616      	movlt	r6, r2
 8005c5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c60:	d005      	beq.n	8005c6e <__cvt+0x42>
 8005c62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c66:	d100      	bne.n	8005c6a <__cvt+0x3e>
 8005c68:	3401      	adds	r4, #1
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	e000      	b.n	8005c70 <__cvt+0x44>
 8005c6e:	2103      	movs	r1, #3
 8005c70:	ab03      	add	r3, sp, #12
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	ab02      	add	r3, sp, #8
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	ec47 6b10 	vmov	d0, r6, r7
 8005c7c:	4653      	mov	r3, sl
 8005c7e:	4622      	mov	r2, r4
 8005c80:	f000 fe5a 	bl	8006938 <_dtoa_r>
 8005c84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c88:	4605      	mov	r5, r0
 8005c8a:	d119      	bne.n	8005cc0 <__cvt+0x94>
 8005c8c:	f019 0f01 	tst.w	r9, #1
 8005c90:	d00e      	beq.n	8005cb0 <__cvt+0x84>
 8005c92:	eb00 0904 	add.w	r9, r0, r4
 8005c96:	2200      	movs	r2, #0
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa ff3b 	bl	8000b18 <__aeabi_dcmpeq>
 8005ca2:	b108      	cbz	r0, 8005ca8 <__cvt+0x7c>
 8005ca4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ca8:	2230      	movs	r2, #48	@ 0x30
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	454b      	cmp	r3, r9
 8005cae:	d31e      	bcc.n	8005cee <__cvt+0xc2>
 8005cb0:	9b03      	ldr	r3, [sp, #12]
 8005cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cb4:	1b5b      	subs	r3, r3, r5
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	b004      	add	sp, #16
 8005cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cc4:	eb00 0904 	add.w	r9, r0, r4
 8005cc8:	d1e5      	bne.n	8005c96 <__cvt+0x6a>
 8005cca:	7803      	ldrb	r3, [r0, #0]
 8005ccc:	2b30      	cmp	r3, #48	@ 0x30
 8005cce:	d10a      	bne.n	8005ce6 <__cvt+0xba>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	f7fa ff1e 	bl	8000b18 <__aeabi_dcmpeq>
 8005cdc:	b918      	cbnz	r0, 8005ce6 <__cvt+0xba>
 8005cde:	f1c4 0401 	rsb	r4, r4, #1
 8005ce2:	f8ca 4000 	str.w	r4, [sl]
 8005ce6:	f8da 3000 	ldr.w	r3, [sl]
 8005cea:	4499      	add	r9, r3
 8005cec:	e7d3      	b.n	8005c96 <__cvt+0x6a>
 8005cee:	1c59      	adds	r1, r3, #1
 8005cf0:	9103      	str	r1, [sp, #12]
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e7d9      	b.n	8005caa <__cvt+0x7e>

08005cf6 <__exponent>:
 8005cf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	bfba      	itte	lt
 8005cfc:	4249      	neglt	r1, r1
 8005cfe:	232d      	movlt	r3, #45	@ 0x2d
 8005d00:	232b      	movge	r3, #43	@ 0x2b
 8005d02:	2909      	cmp	r1, #9
 8005d04:	7002      	strb	r2, [r0, #0]
 8005d06:	7043      	strb	r3, [r0, #1]
 8005d08:	dd29      	ble.n	8005d5e <__exponent+0x68>
 8005d0a:	f10d 0307 	add.w	r3, sp, #7
 8005d0e:	461d      	mov	r5, r3
 8005d10:	270a      	movs	r7, #10
 8005d12:	461a      	mov	r2, r3
 8005d14:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d18:	fb07 1416 	mls	r4, r7, r6, r1
 8005d1c:	3430      	adds	r4, #48	@ 0x30
 8005d1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d22:	460c      	mov	r4, r1
 8005d24:	2c63      	cmp	r4, #99	@ 0x63
 8005d26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	dcf1      	bgt.n	8005d12 <__exponent+0x1c>
 8005d2e:	3130      	adds	r1, #48	@ 0x30
 8005d30:	1e94      	subs	r4, r2, #2
 8005d32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d36:	1c41      	adds	r1, r0, #1
 8005d38:	4623      	mov	r3, r4
 8005d3a:	42ab      	cmp	r3, r5
 8005d3c:	d30a      	bcc.n	8005d54 <__exponent+0x5e>
 8005d3e:	f10d 0309 	add.w	r3, sp, #9
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	42ac      	cmp	r4, r5
 8005d46:	bf88      	it	hi
 8005d48:	2300      	movhi	r3, #0
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	4403      	add	r3, r0
 8005d4e:	1a18      	subs	r0, r3, r0
 8005d50:	b003      	add	sp, #12
 8005d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d5c:	e7ed      	b.n	8005d3a <__exponent+0x44>
 8005d5e:	2330      	movs	r3, #48	@ 0x30
 8005d60:	3130      	adds	r1, #48	@ 0x30
 8005d62:	7083      	strb	r3, [r0, #2]
 8005d64:	70c1      	strb	r1, [r0, #3]
 8005d66:	1d03      	adds	r3, r0, #4
 8005d68:	e7f1      	b.n	8005d4e <__exponent+0x58>
	...

08005d6c <_printf_float>:
 8005d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d70:	b08d      	sub	sp, #52	@ 0x34
 8005d72:	460c      	mov	r4, r1
 8005d74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d78:	4616      	mov	r6, r2
 8005d7a:	461f      	mov	r7, r3
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	f000 fcdb 	bl	8006738 <_localeconv_r>
 8005d82:	6803      	ldr	r3, [r0, #0]
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fa fa9a 	bl	80002c0 <strlen>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d90:	f8d8 3000 	ldr.w	r3, [r8]
 8005d94:	9005      	str	r0, [sp, #20]
 8005d96:	3307      	adds	r3, #7
 8005d98:	f023 0307 	bic.w	r3, r3, #7
 8005d9c:	f103 0208 	add.w	r2, r3, #8
 8005da0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005da4:	f8d4 b000 	ldr.w	fp, [r4]
 8005da8:	f8c8 2000 	str.w	r2, [r8]
 8005dac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005db4:	9307      	str	r3, [sp, #28]
 8005db6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8006034 <_printf_float+0x2c8>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dc8:	f7fa fed8 	bl	8000b7c <__aeabi_dcmpun>
 8005dcc:	bb70      	cbnz	r0, 8005e2c <_printf_float+0xc0>
 8005dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd2:	4b98      	ldr	r3, [pc, #608]	@ (8006034 <_printf_float+0x2c8>)
 8005dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dd8:	f7fa feb2 	bl	8000b40 <__aeabi_dcmple>
 8005ddc:	bb30      	cbnz	r0, 8005e2c <_printf_float+0xc0>
 8005dde:	2200      	movs	r2, #0
 8005de0:	2300      	movs	r3, #0
 8005de2:	4640      	mov	r0, r8
 8005de4:	4649      	mov	r1, r9
 8005de6:	f7fa fea1 	bl	8000b2c <__aeabi_dcmplt>
 8005dea:	b110      	cbz	r0, 8005df2 <_printf_float+0x86>
 8005dec:	232d      	movs	r3, #45	@ 0x2d
 8005dee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005df2:	4a91      	ldr	r2, [pc, #580]	@ (8006038 <_printf_float+0x2cc>)
 8005df4:	4b91      	ldr	r3, [pc, #580]	@ (800603c <_printf_float+0x2d0>)
 8005df6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005dfa:	bf8c      	ite	hi
 8005dfc:	4690      	movhi	r8, r2
 8005dfe:	4698      	movls	r8, r3
 8005e00:	2303      	movs	r3, #3
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	f02b 0304 	bic.w	r3, fp, #4
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	f04f 0900 	mov.w	r9, #0
 8005e0e:	9700      	str	r7, [sp, #0]
 8005e10:	4633      	mov	r3, r6
 8005e12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 f9d2 	bl	80061c0 <_printf_common>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f040 808d 	bne.w	8005f3c <_printf_float+0x1d0>
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e26:	b00d      	add	sp, #52	@ 0x34
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	464b      	mov	r3, r9
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fea2 	bl	8000b7c <__aeabi_dcmpun>
 8005e38:	b140      	cbz	r0, 8005e4c <_printf_float+0xe0>
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bfbc      	itt	lt
 8005e40:	232d      	movlt	r3, #45	@ 0x2d
 8005e42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e46:	4a7e      	ldr	r2, [pc, #504]	@ (8006040 <_printf_float+0x2d4>)
 8005e48:	4b7e      	ldr	r3, [pc, #504]	@ (8006044 <_printf_float+0x2d8>)
 8005e4a:	e7d4      	b.n	8005df6 <_printf_float+0x8a>
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e52:	9206      	str	r2, [sp, #24]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	d13b      	bne.n	8005ed0 <_printf_float+0x164>
 8005e58:	2306      	movs	r3, #6
 8005e5a:	6063      	str	r3, [r4, #4]
 8005e5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e60:	2300      	movs	r3, #0
 8005e62:	6022      	str	r2, [r4, #0]
 8005e64:	9303      	str	r3, [sp, #12]
 8005e66:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e6c:	ab09      	add	r3, sp, #36	@ 0x24
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	ec49 8b10 	vmov	d0, r8, r9
 8005e76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7ff fed6 	bl	8005c2c <__cvt>
 8005e80:	9b06      	ldr	r3, [sp, #24]
 8005e82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e84:	2b47      	cmp	r3, #71	@ 0x47
 8005e86:	4680      	mov	r8, r0
 8005e88:	d129      	bne.n	8005ede <_printf_float+0x172>
 8005e8a:	1cc8      	adds	r0, r1, #3
 8005e8c:	db02      	blt.n	8005e94 <_printf_float+0x128>
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	4299      	cmp	r1, r3
 8005e92:	dd41      	ble.n	8005f18 <_printf_float+0x1ac>
 8005e94:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e98:	fa5f fa8a 	uxtb.w	sl, sl
 8005e9c:	3901      	subs	r1, #1
 8005e9e:	4652      	mov	r2, sl
 8005ea0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ea4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ea6:	f7ff ff26 	bl	8005cf6 <__exponent>
 8005eaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005eac:	1813      	adds	r3, r2, r0
 8005eae:	2a01      	cmp	r2, #1
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	6123      	str	r3, [r4, #16]
 8005eb4:	dc02      	bgt.n	8005ebc <_printf_float+0x150>
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	07d2      	lsls	r2, r2, #31
 8005eba:	d501      	bpl.n	8005ec0 <_printf_float+0x154>
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0a2      	beq.n	8005e0e <_printf_float+0xa2>
 8005ec8:	232d      	movs	r3, #45	@ 0x2d
 8005eca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ece:	e79e      	b.n	8005e0e <_printf_float+0xa2>
 8005ed0:	9a06      	ldr	r2, [sp, #24]
 8005ed2:	2a47      	cmp	r2, #71	@ 0x47
 8005ed4:	d1c2      	bne.n	8005e5c <_printf_float+0xf0>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1c0      	bne.n	8005e5c <_printf_float+0xf0>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e7bd      	b.n	8005e5a <_printf_float+0xee>
 8005ede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ee2:	d9db      	bls.n	8005e9c <_printf_float+0x130>
 8005ee4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ee8:	d118      	bne.n	8005f1c <_printf_float+0x1b0>
 8005eea:	2900      	cmp	r1, #0
 8005eec:	6863      	ldr	r3, [r4, #4]
 8005eee:	dd0b      	ble.n	8005f08 <_printf_float+0x19c>
 8005ef0:	6121      	str	r1, [r4, #16]
 8005ef2:	b913      	cbnz	r3, 8005efa <_printf_float+0x18e>
 8005ef4:	6822      	ldr	r2, [r4, #0]
 8005ef6:	07d0      	lsls	r0, r2, #31
 8005ef8:	d502      	bpl.n	8005f00 <_printf_float+0x194>
 8005efa:	3301      	adds	r3, #1
 8005efc:	440b      	add	r3, r1
 8005efe:	6123      	str	r3, [r4, #16]
 8005f00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f02:	f04f 0900 	mov.w	r9, #0
 8005f06:	e7db      	b.n	8005ec0 <_printf_float+0x154>
 8005f08:	b913      	cbnz	r3, 8005f10 <_printf_float+0x1a4>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	07d2      	lsls	r2, r2, #31
 8005f0e:	d501      	bpl.n	8005f14 <_printf_float+0x1a8>
 8005f10:	3302      	adds	r3, #2
 8005f12:	e7f4      	b.n	8005efe <_printf_float+0x192>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e7f2      	b.n	8005efe <_printf_float+0x192>
 8005f18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	db05      	blt.n	8005f2e <_printf_float+0x1c2>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	6121      	str	r1, [r4, #16]
 8005f26:	07d8      	lsls	r0, r3, #31
 8005f28:	d5ea      	bpl.n	8005f00 <_printf_float+0x194>
 8005f2a:	1c4b      	adds	r3, r1, #1
 8005f2c:	e7e7      	b.n	8005efe <_printf_float+0x192>
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	bfd4      	ite	le
 8005f32:	f1c1 0202 	rsble	r2, r1, #2
 8005f36:	2201      	movgt	r2, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	e7e0      	b.n	8005efe <_printf_float+0x192>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	055a      	lsls	r2, r3, #21
 8005f40:	d407      	bmi.n	8005f52 <_printf_float+0x1e6>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	4642      	mov	r2, r8
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d12b      	bne.n	8005fa8 <_printf_float+0x23c>
 8005f50:	e767      	b.n	8005e22 <_printf_float+0xb6>
 8005f52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f56:	f240 80dd 	bls.w	8006114 <_printf_float+0x3a8>
 8005f5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2300      	movs	r3, #0
 8005f62:	f7fa fdd9 	bl	8000b18 <__aeabi_dcmpeq>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d033      	beq.n	8005fd2 <_printf_float+0x266>
 8005f6a:	4a37      	ldr	r2, [pc, #220]	@ (8006048 <_printf_float+0x2dc>)
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f af54 	beq.w	8005e22 <_printf_float+0xb6>
 8005f7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f7e:	4543      	cmp	r3, r8
 8005f80:	db02      	blt.n	8005f88 <_printf_float+0x21c>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	07d8      	lsls	r0, r3, #31
 8005f86:	d50f      	bpl.n	8005fa8 <_printf_float+0x23c>
 8005f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4628      	mov	r0, r5
 8005f90:	47b8      	blx	r7
 8005f92:	3001      	adds	r0, #1
 8005f94:	f43f af45 	beq.w	8005e22 <_printf_float+0xb6>
 8005f98:	f04f 0900 	mov.w	r9, #0
 8005f9c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005fa0:	f104 0a1a 	add.w	sl, r4, #26
 8005fa4:	45c8      	cmp	r8, r9
 8005fa6:	dc09      	bgt.n	8005fbc <_printf_float+0x250>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	079b      	lsls	r3, r3, #30
 8005fac:	f100 8103 	bmi.w	80061b6 <_printf_float+0x44a>
 8005fb0:	68e0      	ldr	r0, [r4, #12]
 8005fb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	bfb8      	it	lt
 8005fb8:	4618      	movlt	r0, r3
 8005fba:	e734      	b.n	8005e26 <_printf_float+0xba>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4652      	mov	r2, sl
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f43f af2b 	beq.w	8005e22 <_printf_float+0xb6>
 8005fcc:	f109 0901 	add.w	r9, r9, #1
 8005fd0:	e7e8      	b.n	8005fa4 <_printf_float+0x238>
 8005fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc39      	bgt.n	800604c <_printf_float+0x2e0>
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006048 <_printf_float+0x2dc>)
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f af1d 	beq.w	8005e22 <_printf_float+0xb6>
 8005fe8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005fec:	ea59 0303 	orrs.w	r3, r9, r3
 8005ff0:	d102      	bne.n	8005ff8 <_printf_float+0x28c>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	07d9      	lsls	r1, r3, #31
 8005ff6:	d5d7      	bpl.n	8005fa8 <_printf_float+0x23c>
 8005ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	f43f af0d 	beq.w	8005e22 <_printf_float+0xb6>
 8006008:	f04f 0a00 	mov.w	sl, #0
 800600c:	f104 0b1a 	add.w	fp, r4, #26
 8006010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006012:	425b      	negs	r3, r3
 8006014:	4553      	cmp	r3, sl
 8006016:	dc01      	bgt.n	800601c <_printf_float+0x2b0>
 8006018:	464b      	mov	r3, r9
 800601a:	e793      	b.n	8005f44 <_printf_float+0x1d8>
 800601c:	2301      	movs	r3, #1
 800601e:	465a      	mov	r2, fp
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f aefb 	beq.w	8005e22 <_printf_float+0xb6>
 800602c:	f10a 0a01 	add.w	sl, sl, #1
 8006030:	e7ee      	b.n	8006010 <_printf_float+0x2a4>
 8006032:	bf00      	nop
 8006034:	7fefffff 	.word	0x7fefffff
 8006038:	08008990 	.word	0x08008990
 800603c:	0800898c 	.word	0x0800898c
 8006040:	08008998 	.word	0x08008998
 8006044:	08008994 	.word	0x08008994
 8006048:	0800899c 	.word	0x0800899c
 800604c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800604e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006052:	4553      	cmp	r3, sl
 8006054:	bfa8      	it	ge
 8006056:	4653      	movge	r3, sl
 8006058:	2b00      	cmp	r3, #0
 800605a:	4699      	mov	r9, r3
 800605c:	dc36      	bgt.n	80060cc <_printf_float+0x360>
 800605e:	f04f 0b00 	mov.w	fp, #0
 8006062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006066:	f104 021a 	add.w	r2, r4, #26
 800606a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800606c:	9306      	str	r3, [sp, #24]
 800606e:	eba3 0309 	sub.w	r3, r3, r9
 8006072:	455b      	cmp	r3, fp
 8006074:	dc31      	bgt.n	80060da <_printf_float+0x36e>
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	459a      	cmp	sl, r3
 800607a:	dc3a      	bgt.n	80060f2 <_printf_float+0x386>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	07da      	lsls	r2, r3, #31
 8006080:	d437      	bmi.n	80060f2 <_printf_float+0x386>
 8006082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006084:	ebaa 0903 	sub.w	r9, sl, r3
 8006088:	9b06      	ldr	r3, [sp, #24]
 800608a:	ebaa 0303 	sub.w	r3, sl, r3
 800608e:	4599      	cmp	r9, r3
 8006090:	bfa8      	it	ge
 8006092:	4699      	movge	r9, r3
 8006094:	f1b9 0f00 	cmp.w	r9, #0
 8006098:	dc33      	bgt.n	8006102 <_printf_float+0x396>
 800609a:	f04f 0800 	mov.w	r8, #0
 800609e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060a2:	f104 0b1a 	add.w	fp, r4, #26
 80060a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a8:	ebaa 0303 	sub.w	r3, sl, r3
 80060ac:	eba3 0309 	sub.w	r3, r3, r9
 80060b0:	4543      	cmp	r3, r8
 80060b2:	f77f af79 	ble.w	8005fa8 <_printf_float+0x23c>
 80060b6:	2301      	movs	r3, #1
 80060b8:	465a      	mov	r2, fp
 80060ba:	4631      	mov	r1, r6
 80060bc:	4628      	mov	r0, r5
 80060be:	47b8      	blx	r7
 80060c0:	3001      	adds	r0, #1
 80060c2:	f43f aeae 	beq.w	8005e22 <_printf_float+0xb6>
 80060c6:	f108 0801 	add.w	r8, r8, #1
 80060ca:	e7ec      	b.n	80060a6 <_printf_float+0x33a>
 80060cc:	4642      	mov	r2, r8
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	d1c2      	bne.n	800605e <_printf_float+0x2f2>
 80060d8:	e6a3      	b.n	8005e22 <_printf_float+0xb6>
 80060da:	2301      	movs	r3, #1
 80060dc:	4631      	mov	r1, r6
 80060de:	4628      	mov	r0, r5
 80060e0:	9206      	str	r2, [sp, #24]
 80060e2:	47b8      	blx	r7
 80060e4:	3001      	adds	r0, #1
 80060e6:	f43f ae9c 	beq.w	8005e22 <_printf_float+0xb6>
 80060ea:	9a06      	ldr	r2, [sp, #24]
 80060ec:	f10b 0b01 	add.w	fp, fp, #1
 80060f0:	e7bb      	b.n	800606a <_printf_float+0x2fe>
 80060f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1c0      	bne.n	8006082 <_printf_float+0x316>
 8006100:	e68f      	b.n	8005e22 <_printf_float+0xb6>
 8006102:	9a06      	ldr	r2, [sp, #24]
 8006104:	464b      	mov	r3, r9
 8006106:	4442      	add	r2, r8
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	d1c3      	bne.n	800609a <_printf_float+0x32e>
 8006112:	e686      	b.n	8005e22 <_printf_float+0xb6>
 8006114:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006118:	f1ba 0f01 	cmp.w	sl, #1
 800611c:	dc01      	bgt.n	8006122 <_printf_float+0x3b6>
 800611e:	07db      	lsls	r3, r3, #31
 8006120:	d536      	bpl.n	8006190 <_printf_float+0x424>
 8006122:	2301      	movs	r3, #1
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f ae78 	beq.w	8005e22 <_printf_float+0xb6>
 8006132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006136:	4631      	mov	r1, r6
 8006138:	4628      	mov	r0, r5
 800613a:	47b8      	blx	r7
 800613c:	3001      	adds	r0, #1
 800613e:	f43f ae70 	beq.w	8005e22 <_printf_float+0xb6>
 8006142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006146:	2200      	movs	r2, #0
 8006148:	2300      	movs	r3, #0
 800614a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800614e:	f7fa fce3 	bl	8000b18 <__aeabi_dcmpeq>
 8006152:	b9c0      	cbnz	r0, 8006186 <_printf_float+0x41a>
 8006154:	4653      	mov	r3, sl
 8006156:	f108 0201 	add.w	r2, r8, #1
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	d10c      	bne.n	800617e <_printf_float+0x412>
 8006164:	e65d      	b.n	8005e22 <_printf_float+0xb6>
 8006166:	2301      	movs	r3, #1
 8006168:	465a      	mov	r2, fp
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	f43f ae56 	beq.w	8005e22 <_printf_float+0xb6>
 8006176:	f108 0801 	add.w	r8, r8, #1
 800617a:	45d0      	cmp	r8, sl
 800617c:	dbf3      	blt.n	8006166 <_printf_float+0x3fa>
 800617e:	464b      	mov	r3, r9
 8006180:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006184:	e6df      	b.n	8005f46 <_printf_float+0x1da>
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	f104 0b1a 	add.w	fp, r4, #26
 800618e:	e7f4      	b.n	800617a <_printf_float+0x40e>
 8006190:	2301      	movs	r3, #1
 8006192:	4642      	mov	r2, r8
 8006194:	e7e1      	b.n	800615a <_printf_float+0x3ee>
 8006196:	2301      	movs	r3, #1
 8006198:	464a      	mov	r2, r9
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	f43f ae3e 	beq.w	8005e22 <_printf_float+0xb6>
 80061a6:	f108 0801 	add.w	r8, r8, #1
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061ae:	1a5b      	subs	r3, r3, r1
 80061b0:	4543      	cmp	r3, r8
 80061b2:	dcf0      	bgt.n	8006196 <_printf_float+0x42a>
 80061b4:	e6fc      	b.n	8005fb0 <_printf_float+0x244>
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	f104 0919 	add.w	r9, r4, #25
 80061be:	e7f4      	b.n	80061aa <_printf_float+0x43e>

080061c0 <_printf_common>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	4698      	mov	r8, r3
 80061c8:	688a      	ldr	r2, [r1, #8]
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bfb8      	it	lt
 80061d4:	4613      	movlt	r3, r2
 80061d6:	6033      	str	r3, [r6, #0]
 80061d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061dc:	4607      	mov	r7, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	b10a      	cbz	r2, 80061e6 <_printf_common+0x26>
 80061e2:	3301      	adds	r3, #1
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	0699      	lsls	r1, r3, #26
 80061ea:	bf42      	ittt	mi
 80061ec:	6833      	ldrmi	r3, [r6, #0]
 80061ee:	3302      	addmi	r3, #2
 80061f0:	6033      	strmi	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	f015 0506 	ands.w	r5, r5, #6
 80061f8:	d106      	bne.n	8006208 <_printf_common+0x48>
 80061fa:	f104 0a19 	add.w	sl, r4, #25
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	6832      	ldr	r2, [r6, #0]
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	42ab      	cmp	r3, r5
 8006206:	dc26      	bgt.n	8006256 <_printf_common+0x96>
 8006208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	3b00      	subs	r3, #0
 8006210:	bf18      	it	ne
 8006212:	2301      	movne	r3, #1
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d42b      	bmi.n	8006270 <_printf_common+0xb0>
 8006218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800621c:	4641      	mov	r1, r8
 800621e:	4638      	mov	r0, r7
 8006220:	47c8      	blx	r9
 8006222:	3001      	adds	r0, #1
 8006224:	d01e      	beq.n	8006264 <_printf_common+0xa4>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	6922      	ldr	r2, [r4, #16]
 800622a:	f003 0306 	and.w	r3, r3, #6
 800622e:	2b04      	cmp	r3, #4
 8006230:	bf02      	ittt	eq
 8006232:	68e5      	ldreq	r5, [r4, #12]
 8006234:	6833      	ldreq	r3, [r6, #0]
 8006236:	1aed      	subeq	r5, r5, r3
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	bf0c      	ite	eq
 800623c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006240:	2500      	movne	r5, #0
 8006242:	4293      	cmp	r3, r2
 8006244:	bfc4      	itt	gt
 8006246:	1a9b      	subgt	r3, r3, r2
 8006248:	18ed      	addgt	r5, r5, r3
 800624a:	2600      	movs	r6, #0
 800624c:	341a      	adds	r4, #26
 800624e:	42b5      	cmp	r5, r6
 8006250:	d11a      	bne.n	8006288 <_printf_common+0xc8>
 8006252:	2000      	movs	r0, #0
 8006254:	e008      	b.n	8006268 <_printf_common+0xa8>
 8006256:	2301      	movs	r3, #1
 8006258:	4652      	mov	r2, sl
 800625a:	4641      	mov	r1, r8
 800625c:	4638      	mov	r0, r7
 800625e:	47c8      	blx	r9
 8006260:	3001      	adds	r0, #1
 8006262:	d103      	bne.n	800626c <_printf_common+0xac>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	3501      	adds	r5, #1
 800626e:	e7c6      	b.n	80061fe <_printf_common+0x3e>
 8006270:	18e1      	adds	r1, r4, r3
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	2030      	movs	r0, #48	@ 0x30
 8006276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800627a:	4422      	add	r2, r4
 800627c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006284:	3302      	adds	r3, #2
 8006286:	e7c7      	b.n	8006218 <_printf_common+0x58>
 8006288:	2301      	movs	r3, #1
 800628a:	4622      	mov	r2, r4
 800628c:	4641      	mov	r1, r8
 800628e:	4638      	mov	r0, r7
 8006290:	47c8      	blx	r9
 8006292:	3001      	adds	r0, #1
 8006294:	d0e6      	beq.n	8006264 <_printf_common+0xa4>
 8006296:	3601      	adds	r6, #1
 8006298:	e7d9      	b.n	800624e <_printf_common+0x8e>
	...

0800629c <_printf_i>:
 800629c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	7e0f      	ldrb	r7, [r1, #24]
 80062a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062a4:	2f78      	cmp	r7, #120	@ 0x78
 80062a6:	4691      	mov	r9, r2
 80062a8:	4680      	mov	r8, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	469a      	mov	sl, r3
 80062ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062b2:	d807      	bhi.n	80062c4 <_printf_i+0x28>
 80062b4:	2f62      	cmp	r7, #98	@ 0x62
 80062b6:	d80a      	bhi.n	80062ce <_printf_i+0x32>
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	f000 80d1 	beq.w	8006460 <_printf_i+0x1c4>
 80062be:	2f58      	cmp	r7, #88	@ 0x58
 80062c0:	f000 80b8 	beq.w	8006434 <_printf_i+0x198>
 80062c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062cc:	e03a      	b.n	8006344 <_printf_i+0xa8>
 80062ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062d2:	2b15      	cmp	r3, #21
 80062d4:	d8f6      	bhi.n	80062c4 <_printf_i+0x28>
 80062d6:	a101      	add	r1, pc, #4	@ (adr r1, 80062dc <_printf_i+0x40>)
 80062d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006349 	.word	0x08006349
 80062e4:	080062c5 	.word	0x080062c5
 80062e8:	080062c5 	.word	0x080062c5
 80062ec:	080062c5 	.word	0x080062c5
 80062f0:	080062c5 	.word	0x080062c5
 80062f4:	08006349 	.word	0x08006349
 80062f8:	080062c5 	.word	0x080062c5
 80062fc:	080062c5 	.word	0x080062c5
 8006300:	080062c5 	.word	0x080062c5
 8006304:	080062c5 	.word	0x080062c5
 8006308:	08006447 	.word	0x08006447
 800630c:	08006373 	.word	0x08006373
 8006310:	08006401 	.word	0x08006401
 8006314:	080062c5 	.word	0x080062c5
 8006318:	080062c5 	.word	0x080062c5
 800631c:	08006469 	.word	0x08006469
 8006320:	080062c5 	.word	0x080062c5
 8006324:	08006373 	.word	0x08006373
 8006328:	080062c5 	.word	0x080062c5
 800632c:	080062c5 	.word	0x080062c5
 8006330:	08006409 	.word	0x08006409
 8006334:	6833      	ldr	r3, [r6, #0]
 8006336:	1d1a      	adds	r2, r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6032      	str	r2, [r6, #0]
 800633c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006344:	2301      	movs	r3, #1
 8006346:	e09c      	b.n	8006482 <_printf_i+0x1e6>
 8006348:	6833      	ldr	r3, [r6, #0]
 800634a:	6820      	ldr	r0, [r4, #0]
 800634c:	1d19      	adds	r1, r3, #4
 800634e:	6031      	str	r1, [r6, #0]
 8006350:	0606      	lsls	r6, r0, #24
 8006352:	d501      	bpl.n	8006358 <_printf_i+0xbc>
 8006354:	681d      	ldr	r5, [r3, #0]
 8006356:	e003      	b.n	8006360 <_printf_i+0xc4>
 8006358:	0645      	lsls	r5, r0, #25
 800635a:	d5fb      	bpl.n	8006354 <_printf_i+0xb8>
 800635c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006360:	2d00      	cmp	r5, #0
 8006362:	da03      	bge.n	800636c <_printf_i+0xd0>
 8006364:	232d      	movs	r3, #45	@ 0x2d
 8006366:	426d      	negs	r5, r5
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800636c:	4858      	ldr	r0, [pc, #352]	@ (80064d0 <_printf_i+0x234>)
 800636e:	230a      	movs	r3, #10
 8006370:	e011      	b.n	8006396 <_printf_i+0xfa>
 8006372:	6821      	ldr	r1, [r4, #0]
 8006374:	6833      	ldr	r3, [r6, #0]
 8006376:	0608      	lsls	r0, r1, #24
 8006378:	f853 5b04 	ldr.w	r5, [r3], #4
 800637c:	d402      	bmi.n	8006384 <_printf_i+0xe8>
 800637e:	0649      	lsls	r1, r1, #25
 8006380:	bf48      	it	mi
 8006382:	b2ad      	uxthmi	r5, r5
 8006384:	2f6f      	cmp	r7, #111	@ 0x6f
 8006386:	4852      	ldr	r0, [pc, #328]	@ (80064d0 <_printf_i+0x234>)
 8006388:	6033      	str	r3, [r6, #0]
 800638a:	bf14      	ite	ne
 800638c:	230a      	movne	r3, #10
 800638e:	2308      	moveq	r3, #8
 8006390:	2100      	movs	r1, #0
 8006392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006396:	6866      	ldr	r6, [r4, #4]
 8006398:	60a6      	str	r6, [r4, #8]
 800639a:	2e00      	cmp	r6, #0
 800639c:	db05      	blt.n	80063aa <_printf_i+0x10e>
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	432e      	orrs	r6, r5
 80063a2:	f021 0104 	bic.w	r1, r1, #4
 80063a6:	6021      	str	r1, [r4, #0]
 80063a8:	d04b      	beq.n	8006442 <_printf_i+0x1a6>
 80063aa:	4616      	mov	r6, r2
 80063ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80063b0:	fb03 5711 	mls	r7, r3, r1, r5
 80063b4:	5dc7      	ldrb	r7, [r0, r7]
 80063b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063ba:	462f      	mov	r7, r5
 80063bc:	42bb      	cmp	r3, r7
 80063be:	460d      	mov	r5, r1
 80063c0:	d9f4      	bls.n	80063ac <_printf_i+0x110>
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d10b      	bne.n	80063de <_printf_i+0x142>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	07df      	lsls	r7, r3, #31
 80063ca:	d508      	bpl.n	80063de <_printf_i+0x142>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	6861      	ldr	r1, [r4, #4]
 80063d0:	4299      	cmp	r1, r3
 80063d2:	bfde      	ittt	le
 80063d4:	2330      	movle	r3, #48	@ 0x30
 80063d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80063de:	1b92      	subs	r2, r2, r6
 80063e0:	6122      	str	r2, [r4, #16]
 80063e2:	f8cd a000 	str.w	sl, [sp]
 80063e6:	464b      	mov	r3, r9
 80063e8:	aa03      	add	r2, sp, #12
 80063ea:	4621      	mov	r1, r4
 80063ec:	4640      	mov	r0, r8
 80063ee:	f7ff fee7 	bl	80061c0 <_printf_common>
 80063f2:	3001      	adds	r0, #1
 80063f4:	d14a      	bne.n	800648c <_printf_i+0x1f0>
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063fa:	b004      	add	sp, #16
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	f043 0320 	orr.w	r3, r3, #32
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	4832      	ldr	r0, [pc, #200]	@ (80064d4 <_printf_i+0x238>)
 800640a:	2778      	movs	r7, #120	@ 0x78
 800640c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	6831      	ldr	r1, [r6, #0]
 8006414:	061f      	lsls	r7, r3, #24
 8006416:	f851 5b04 	ldr.w	r5, [r1], #4
 800641a:	d402      	bmi.n	8006422 <_printf_i+0x186>
 800641c:	065f      	lsls	r7, r3, #25
 800641e:	bf48      	it	mi
 8006420:	b2ad      	uxthmi	r5, r5
 8006422:	6031      	str	r1, [r6, #0]
 8006424:	07d9      	lsls	r1, r3, #31
 8006426:	bf44      	itt	mi
 8006428:	f043 0320 	orrmi.w	r3, r3, #32
 800642c:	6023      	strmi	r3, [r4, #0]
 800642e:	b11d      	cbz	r5, 8006438 <_printf_i+0x19c>
 8006430:	2310      	movs	r3, #16
 8006432:	e7ad      	b.n	8006390 <_printf_i+0xf4>
 8006434:	4826      	ldr	r0, [pc, #152]	@ (80064d0 <_printf_i+0x234>)
 8006436:	e7e9      	b.n	800640c <_printf_i+0x170>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	f023 0320 	bic.w	r3, r3, #32
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	e7f6      	b.n	8006430 <_printf_i+0x194>
 8006442:	4616      	mov	r6, r2
 8006444:	e7bd      	b.n	80063c2 <_printf_i+0x126>
 8006446:	6833      	ldr	r3, [r6, #0]
 8006448:	6825      	ldr	r5, [r4, #0]
 800644a:	6961      	ldr	r1, [r4, #20]
 800644c:	1d18      	adds	r0, r3, #4
 800644e:	6030      	str	r0, [r6, #0]
 8006450:	062e      	lsls	r6, r5, #24
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	d501      	bpl.n	800645a <_printf_i+0x1be>
 8006456:	6019      	str	r1, [r3, #0]
 8006458:	e002      	b.n	8006460 <_printf_i+0x1c4>
 800645a:	0668      	lsls	r0, r5, #25
 800645c:	d5fb      	bpl.n	8006456 <_printf_i+0x1ba>
 800645e:	8019      	strh	r1, [r3, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	4616      	mov	r6, r2
 8006466:	e7bc      	b.n	80063e2 <_printf_i+0x146>
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	6032      	str	r2, [r6, #0]
 800646e:	681e      	ldr	r6, [r3, #0]
 8006470:	6862      	ldr	r2, [r4, #4]
 8006472:	2100      	movs	r1, #0
 8006474:	4630      	mov	r0, r6
 8006476:	f7f9 fed3 	bl	8000220 <memchr>
 800647a:	b108      	cbz	r0, 8006480 <_printf_i+0x1e4>
 800647c:	1b80      	subs	r0, r0, r6
 800647e:	6060      	str	r0, [r4, #4]
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	2300      	movs	r3, #0
 8006486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800648a:	e7aa      	b.n	80063e2 <_printf_i+0x146>
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	4632      	mov	r2, r6
 8006490:	4649      	mov	r1, r9
 8006492:	4640      	mov	r0, r8
 8006494:	47d0      	blx	sl
 8006496:	3001      	adds	r0, #1
 8006498:	d0ad      	beq.n	80063f6 <_printf_i+0x15a>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	079b      	lsls	r3, r3, #30
 800649e:	d413      	bmi.n	80064c8 <_printf_i+0x22c>
 80064a0:	68e0      	ldr	r0, [r4, #12]
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	4298      	cmp	r0, r3
 80064a6:	bfb8      	it	lt
 80064a8:	4618      	movlt	r0, r3
 80064aa:	e7a6      	b.n	80063fa <_printf_i+0x15e>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4632      	mov	r2, r6
 80064b0:	4649      	mov	r1, r9
 80064b2:	4640      	mov	r0, r8
 80064b4:	47d0      	blx	sl
 80064b6:	3001      	adds	r0, #1
 80064b8:	d09d      	beq.n	80063f6 <_printf_i+0x15a>
 80064ba:	3501      	adds	r5, #1
 80064bc:	68e3      	ldr	r3, [r4, #12]
 80064be:	9903      	ldr	r1, [sp, #12]
 80064c0:	1a5b      	subs	r3, r3, r1
 80064c2:	42ab      	cmp	r3, r5
 80064c4:	dcf2      	bgt.n	80064ac <_printf_i+0x210>
 80064c6:	e7eb      	b.n	80064a0 <_printf_i+0x204>
 80064c8:	2500      	movs	r5, #0
 80064ca:	f104 0619 	add.w	r6, r4, #25
 80064ce:	e7f5      	b.n	80064bc <_printf_i+0x220>
 80064d0:	0800899e 	.word	0x0800899e
 80064d4:	080089af 	.word	0x080089af

080064d8 <std>:
 80064d8:	2300      	movs	r3, #0
 80064da:	b510      	push	{r4, lr}
 80064dc:	4604      	mov	r4, r0
 80064de:	e9c0 3300 	strd	r3, r3, [r0]
 80064e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064e6:	6083      	str	r3, [r0, #8]
 80064e8:	8181      	strh	r1, [r0, #12]
 80064ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80064ec:	81c2      	strh	r2, [r0, #14]
 80064ee:	6183      	str	r3, [r0, #24]
 80064f0:	4619      	mov	r1, r3
 80064f2:	2208      	movs	r2, #8
 80064f4:	305c      	adds	r0, #92	@ 0x5c
 80064f6:	f000 f916 	bl	8006726 <memset>
 80064fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006530 <std+0x58>)
 80064fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80064fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006534 <std+0x5c>)
 8006500:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006502:	4b0d      	ldr	r3, [pc, #52]	@ (8006538 <std+0x60>)
 8006504:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006506:	4b0d      	ldr	r3, [pc, #52]	@ (800653c <std+0x64>)
 8006508:	6323      	str	r3, [r4, #48]	@ 0x30
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <std+0x68>)
 800650c:	6224      	str	r4, [r4, #32]
 800650e:	429c      	cmp	r4, r3
 8006510:	d006      	beq.n	8006520 <std+0x48>
 8006512:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006516:	4294      	cmp	r4, r2
 8006518:	d002      	beq.n	8006520 <std+0x48>
 800651a:	33d0      	adds	r3, #208	@ 0xd0
 800651c:	429c      	cmp	r4, r3
 800651e:	d105      	bne.n	800652c <std+0x54>
 8006520:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006528:	f000 b97a 	b.w	8006820 <__retarget_lock_init_recursive>
 800652c:	bd10      	pop	{r4, pc}
 800652e:	bf00      	nop
 8006530:	080066a1 	.word	0x080066a1
 8006534:	080066c3 	.word	0x080066c3
 8006538:	080066fb 	.word	0x080066fb
 800653c:	0800671f 	.word	0x0800671f
 8006540:	200003f4 	.word	0x200003f4

08006544 <stdio_exit_handler>:
 8006544:	4a02      	ldr	r2, [pc, #8]	@ (8006550 <stdio_exit_handler+0xc>)
 8006546:	4903      	ldr	r1, [pc, #12]	@ (8006554 <stdio_exit_handler+0x10>)
 8006548:	4803      	ldr	r0, [pc, #12]	@ (8006558 <stdio_exit_handler+0x14>)
 800654a:	f000 b869 	b.w	8006620 <_fwalk_sglue>
 800654e:	bf00      	nop
 8006550:	20000010 	.word	0x20000010
 8006554:	08008185 	.word	0x08008185
 8006558:	20000020 	.word	0x20000020

0800655c <cleanup_stdio>:
 800655c:	6841      	ldr	r1, [r0, #4]
 800655e:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <cleanup_stdio+0x34>)
 8006560:	4299      	cmp	r1, r3
 8006562:	b510      	push	{r4, lr}
 8006564:	4604      	mov	r4, r0
 8006566:	d001      	beq.n	800656c <cleanup_stdio+0x10>
 8006568:	f001 fe0c 	bl	8008184 <_fflush_r>
 800656c:	68a1      	ldr	r1, [r4, #8]
 800656e:	4b09      	ldr	r3, [pc, #36]	@ (8006594 <cleanup_stdio+0x38>)
 8006570:	4299      	cmp	r1, r3
 8006572:	d002      	beq.n	800657a <cleanup_stdio+0x1e>
 8006574:	4620      	mov	r0, r4
 8006576:	f001 fe05 	bl	8008184 <_fflush_r>
 800657a:	68e1      	ldr	r1, [r4, #12]
 800657c:	4b06      	ldr	r3, [pc, #24]	@ (8006598 <cleanup_stdio+0x3c>)
 800657e:	4299      	cmp	r1, r3
 8006580:	d004      	beq.n	800658c <cleanup_stdio+0x30>
 8006582:	4620      	mov	r0, r4
 8006584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006588:	f001 bdfc 	b.w	8008184 <_fflush_r>
 800658c:	bd10      	pop	{r4, pc}
 800658e:	bf00      	nop
 8006590:	200003f4 	.word	0x200003f4
 8006594:	2000045c 	.word	0x2000045c
 8006598:	200004c4 	.word	0x200004c4

0800659c <global_stdio_init.part.0>:
 800659c:	b510      	push	{r4, lr}
 800659e:	4b0b      	ldr	r3, [pc, #44]	@ (80065cc <global_stdio_init.part.0+0x30>)
 80065a0:	4c0b      	ldr	r4, [pc, #44]	@ (80065d0 <global_stdio_init.part.0+0x34>)
 80065a2:	4a0c      	ldr	r2, [pc, #48]	@ (80065d4 <global_stdio_init.part.0+0x38>)
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	4620      	mov	r0, r4
 80065a8:	2200      	movs	r2, #0
 80065aa:	2104      	movs	r1, #4
 80065ac:	f7ff ff94 	bl	80064d8 <std>
 80065b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065b4:	2201      	movs	r2, #1
 80065b6:	2109      	movs	r1, #9
 80065b8:	f7ff ff8e 	bl	80064d8 <std>
 80065bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065c0:	2202      	movs	r2, #2
 80065c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c6:	2112      	movs	r1, #18
 80065c8:	f7ff bf86 	b.w	80064d8 <std>
 80065cc:	2000052c 	.word	0x2000052c
 80065d0:	200003f4 	.word	0x200003f4
 80065d4:	08006545 	.word	0x08006545

080065d8 <__sfp_lock_acquire>:
 80065d8:	4801      	ldr	r0, [pc, #4]	@ (80065e0 <__sfp_lock_acquire+0x8>)
 80065da:	f000 b922 	b.w	8006822 <__retarget_lock_acquire_recursive>
 80065de:	bf00      	nop
 80065e0:	20000535 	.word	0x20000535

080065e4 <__sfp_lock_release>:
 80065e4:	4801      	ldr	r0, [pc, #4]	@ (80065ec <__sfp_lock_release+0x8>)
 80065e6:	f000 b91d 	b.w	8006824 <__retarget_lock_release_recursive>
 80065ea:	bf00      	nop
 80065ec:	20000535 	.word	0x20000535

080065f0 <__sinit>:
 80065f0:	b510      	push	{r4, lr}
 80065f2:	4604      	mov	r4, r0
 80065f4:	f7ff fff0 	bl	80065d8 <__sfp_lock_acquire>
 80065f8:	6a23      	ldr	r3, [r4, #32]
 80065fa:	b11b      	cbz	r3, 8006604 <__sinit+0x14>
 80065fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006600:	f7ff bff0 	b.w	80065e4 <__sfp_lock_release>
 8006604:	4b04      	ldr	r3, [pc, #16]	@ (8006618 <__sinit+0x28>)
 8006606:	6223      	str	r3, [r4, #32]
 8006608:	4b04      	ldr	r3, [pc, #16]	@ (800661c <__sinit+0x2c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f5      	bne.n	80065fc <__sinit+0xc>
 8006610:	f7ff ffc4 	bl	800659c <global_stdio_init.part.0>
 8006614:	e7f2      	b.n	80065fc <__sinit+0xc>
 8006616:	bf00      	nop
 8006618:	0800655d 	.word	0x0800655d
 800661c:	2000052c 	.word	0x2000052c

08006620 <_fwalk_sglue>:
 8006620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006624:	4607      	mov	r7, r0
 8006626:	4688      	mov	r8, r1
 8006628:	4614      	mov	r4, r2
 800662a:	2600      	movs	r6, #0
 800662c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006630:	f1b9 0901 	subs.w	r9, r9, #1
 8006634:	d505      	bpl.n	8006642 <_fwalk_sglue+0x22>
 8006636:	6824      	ldr	r4, [r4, #0]
 8006638:	2c00      	cmp	r4, #0
 800663a:	d1f7      	bne.n	800662c <_fwalk_sglue+0xc>
 800663c:	4630      	mov	r0, r6
 800663e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006642:	89ab      	ldrh	r3, [r5, #12]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d907      	bls.n	8006658 <_fwalk_sglue+0x38>
 8006648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800664c:	3301      	adds	r3, #1
 800664e:	d003      	beq.n	8006658 <_fwalk_sglue+0x38>
 8006650:	4629      	mov	r1, r5
 8006652:	4638      	mov	r0, r7
 8006654:	47c0      	blx	r8
 8006656:	4306      	orrs	r6, r0
 8006658:	3568      	adds	r5, #104	@ 0x68
 800665a:	e7e9      	b.n	8006630 <_fwalk_sglue+0x10>

0800665c <siprintf>:
 800665c:	b40e      	push	{r1, r2, r3}
 800665e:	b510      	push	{r4, lr}
 8006660:	b09d      	sub	sp, #116	@ 0x74
 8006662:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006664:	9002      	str	r0, [sp, #8]
 8006666:	9006      	str	r0, [sp, #24]
 8006668:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800666c:	480a      	ldr	r0, [pc, #40]	@ (8006698 <siprintf+0x3c>)
 800666e:	9107      	str	r1, [sp, #28]
 8006670:	9104      	str	r1, [sp, #16]
 8006672:	490a      	ldr	r1, [pc, #40]	@ (800669c <siprintf+0x40>)
 8006674:	f853 2b04 	ldr.w	r2, [r3], #4
 8006678:	9105      	str	r1, [sp, #20]
 800667a:	2400      	movs	r4, #0
 800667c:	a902      	add	r1, sp, #8
 800667e:	6800      	ldr	r0, [r0, #0]
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006684:	f001 fbfe 	bl	8007e84 <_svfiprintf_r>
 8006688:	9b02      	ldr	r3, [sp, #8]
 800668a:	701c      	strb	r4, [r3, #0]
 800668c:	b01d      	add	sp, #116	@ 0x74
 800668e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006692:	b003      	add	sp, #12
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	2000001c 	.word	0x2000001c
 800669c:	ffff0208 	.word	0xffff0208

080066a0 <__sread>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	460c      	mov	r4, r1
 80066a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a8:	f000 f86c 	bl	8006784 <_read_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	bfab      	itete	ge
 80066b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066b2:	89a3      	ldrhlt	r3, [r4, #12]
 80066b4:	181b      	addge	r3, r3, r0
 80066b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066ba:	bfac      	ite	ge
 80066bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066be:	81a3      	strhlt	r3, [r4, #12]
 80066c0:	bd10      	pop	{r4, pc}

080066c2 <__swrite>:
 80066c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c6:	461f      	mov	r7, r3
 80066c8:	898b      	ldrh	r3, [r1, #12]
 80066ca:	05db      	lsls	r3, r3, #23
 80066cc:	4605      	mov	r5, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	4616      	mov	r6, r2
 80066d2:	d505      	bpl.n	80066e0 <__swrite+0x1e>
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	2302      	movs	r3, #2
 80066da:	2200      	movs	r2, #0
 80066dc:	f000 f840 	bl	8006760 <_lseek_r>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	4632      	mov	r2, r6
 80066ee:	463b      	mov	r3, r7
 80066f0:	4628      	mov	r0, r5
 80066f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066f6:	f000 b857 	b.w	80067a8 <_write_r>

080066fa <__sseek>:
 80066fa:	b510      	push	{r4, lr}
 80066fc:	460c      	mov	r4, r1
 80066fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006702:	f000 f82d 	bl	8006760 <_lseek_r>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	bf15      	itete	ne
 800670c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800670e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006716:	81a3      	strheq	r3, [r4, #12]
 8006718:	bf18      	it	ne
 800671a:	81a3      	strhne	r3, [r4, #12]
 800671c:	bd10      	pop	{r4, pc}

0800671e <__sclose>:
 800671e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006722:	f000 b80d 	b.w	8006740 <_close_r>

08006726 <memset>:
 8006726:	4402      	add	r2, r0
 8006728:	4603      	mov	r3, r0
 800672a:	4293      	cmp	r3, r2
 800672c:	d100      	bne.n	8006730 <memset+0xa>
 800672e:	4770      	bx	lr
 8006730:	f803 1b01 	strb.w	r1, [r3], #1
 8006734:	e7f9      	b.n	800672a <memset+0x4>
	...

08006738 <_localeconv_r>:
 8006738:	4800      	ldr	r0, [pc, #0]	@ (800673c <_localeconv_r+0x4>)
 800673a:	4770      	bx	lr
 800673c:	2000015c 	.word	0x2000015c

08006740 <_close_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d06      	ldr	r5, [pc, #24]	@ (800675c <_close_r+0x1c>)
 8006744:	2300      	movs	r3, #0
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	f7fb fa74 	bl	8001c38 <_close>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_close_r+0x1a>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_close_r+0x1a>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20000530 	.word	0x20000530

08006760 <_lseek_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d07      	ldr	r5, [pc, #28]	@ (8006780 <_lseek_r+0x20>)
 8006764:	4604      	mov	r4, r0
 8006766:	4608      	mov	r0, r1
 8006768:	4611      	mov	r1, r2
 800676a:	2200      	movs	r2, #0
 800676c:	602a      	str	r2, [r5, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f7fb fa89 	bl	8001c86 <_lseek>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_lseek_r+0x1e>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_lseek_r+0x1e>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20000530 	.word	0x20000530

08006784 <_read_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d07      	ldr	r5, [pc, #28]	@ (80067a4 <_read_r+0x20>)
 8006788:	4604      	mov	r4, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	602a      	str	r2, [r5, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fb fa17 	bl	8001bc6 <_read>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_read_r+0x1e>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_read_r+0x1e>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	20000530 	.word	0x20000530

080067a8 <_write_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d07      	ldr	r5, [pc, #28]	@ (80067c8 <_write_r+0x20>)
 80067ac:	4604      	mov	r4, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	602a      	str	r2, [r5, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7fb fa22 	bl	8001c00 <_write>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_write_r+0x1e>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_write_r+0x1e>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20000530 	.word	0x20000530

080067cc <__errno>:
 80067cc:	4b01      	ldr	r3, [pc, #4]	@ (80067d4 <__errno+0x8>)
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	2000001c 	.word	0x2000001c

080067d8 <__libc_init_array>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	4d0d      	ldr	r5, [pc, #52]	@ (8006810 <__libc_init_array+0x38>)
 80067dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006814 <__libc_init_array+0x3c>)
 80067de:	1b64      	subs	r4, r4, r5
 80067e0:	10a4      	asrs	r4, r4, #2
 80067e2:	2600      	movs	r6, #0
 80067e4:	42a6      	cmp	r6, r4
 80067e6:	d109      	bne.n	80067fc <__libc_init_array+0x24>
 80067e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006818 <__libc_init_array+0x40>)
 80067ea:	4c0c      	ldr	r4, [pc, #48]	@ (800681c <__libc_init_array+0x44>)
 80067ec:	f002 f868 	bl	80088c0 <_init>
 80067f0:	1b64      	subs	r4, r4, r5
 80067f2:	10a4      	asrs	r4, r4, #2
 80067f4:	2600      	movs	r6, #0
 80067f6:	42a6      	cmp	r6, r4
 80067f8:	d105      	bne.n	8006806 <__libc_init_array+0x2e>
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006800:	4798      	blx	r3
 8006802:	3601      	adds	r6, #1
 8006804:	e7ee      	b.n	80067e4 <__libc_init_array+0xc>
 8006806:	f855 3b04 	ldr.w	r3, [r5], #4
 800680a:	4798      	blx	r3
 800680c:	3601      	adds	r6, #1
 800680e:	e7f2      	b.n	80067f6 <__libc_init_array+0x1e>
 8006810:	08008d0c 	.word	0x08008d0c
 8006814:	08008d0c 	.word	0x08008d0c
 8006818:	08008d0c 	.word	0x08008d0c
 800681c:	08008d10 	.word	0x08008d10

08006820 <__retarget_lock_init_recursive>:
 8006820:	4770      	bx	lr

08006822 <__retarget_lock_acquire_recursive>:
 8006822:	4770      	bx	lr

08006824 <__retarget_lock_release_recursive>:
 8006824:	4770      	bx	lr

08006826 <quorem>:
 8006826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	6903      	ldr	r3, [r0, #16]
 800682c:	690c      	ldr	r4, [r1, #16]
 800682e:	42a3      	cmp	r3, r4
 8006830:	4607      	mov	r7, r0
 8006832:	db7e      	blt.n	8006932 <quorem+0x10c>
 8006834:	3c01      	subs	r4, #1
 8006836:	f101 0814 	add.w	r8, r1, #20
 800683a:	00a3      	lsls	r3, r4, #2
 800683c:	f100 0514 	add.w	r5, r0, #20
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800684c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006850:	3301      	adds	r3, #1
 8006852:	429a      	cmp	r2, r3
 8006854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006858:	fbb2 f6f3 	udiv	r6, r2, r3
 800685c:	d32e      	bcc.n	80068bc <quorem+0x96>
 800685e:	f04f 0a00 	mov.w	sl, #0
 8006862:	46c4      	mov	ip, r8
 8006864:	46ae      	mov	lr, r5
 8006866:	46d3      	mov	fp, sl
 8006868:	f85c 3b04 	ldr.w	r3, [ip], #4
 800686c:	b298      	uxth	r0, r3
 800686e:	fb06 a000 	mla	r0, r6, r0, sl
 8006872:	0c02      	lsrs	r2, r0, #16
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	fb06 2303 	mla	r3, r6, r3, r2
 800687a:	f8de 2000 	ldr.w	r2, [lr]
 800687e:	b280      	uxth	r0, r0
 8006880:	b292      	uxth	r2, r2
 8006882:	1a12      	subs	r2, r2, r0
 8006884:	445a      	add	r2, fp
 8006886:	f8de 0000 	ldr.w	r0, [lr]
 800688a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800688e:	b29b      	uxth	r3, r3
 8006890:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006894:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006898:	b292      	uxth	r2, r2
 800689a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800689e:	45e1      	cmp	r9, ip
 80068a0:	f84e 2b04 	str.w	r2, [lr], #4
 80068a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80068a8:	d2de      	bcs.n	8006868 <quorem+0x42>
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	58eb      	ldr	r3, [r5, r3]
 80068ae:	b92b      	cbnz	r3, 80068bc <quorem+0x96>
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	3b04      	subs	r3, #4
 80068b4:	429d      	cmp	r5, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	d32f      	bcc.n	800691a <quorem+0xf4>
 80068ba:	613c      	str	r4, [r7, #16]
 80068bc:	4638      	mov	r0, r7
 80068be:	f001 f97d 	bl	8007bbc <__mcmp>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	db25      	blt.n	8006912 <quorem+0xec>
 80068c6:	4629      	mov	r1, r5
 80068c8:	2000      	movs	r0, #0
 80068ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80068ce:	f8d1 c000 	ldr.w	ip, [r1]
 80068d2:	fa1f fe82 	uxth.w	lr, r2
 80068d6:	fa1f f38c 	uxth.w	r3, ip
 80068da:	eba3 030e 	sub.w	r3, r3, lr
 80068de:	4403      	add	r3, r0
 80068e0:	0c12      	lsrs	r2, r2, #16
 80068e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068f0:	45c1      	cmp	r9, r8
 80068f2:	f841 3b04 	str.w	r3, [r1], #4
 80068f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068fa:	d2e6      	bcs.n	80068ca <quorem+0xa4>
 80068fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006904:	b922      	cbnz	r2, 8006910 <quorem+0xea>
 8006906:	3b04      	subs	r3, #4
 8006908:	429d      	cmp	r5, r3
 800690a:	461a      	mov	r2, r3
 800690c:	d30b      	bcc.n	8006926 <quorem+0x100>
 800690e:	613c      	str	r4, [r7, #16]
 8006910:	3601      	adds	r6, #1
 8006912:	4630      	mov	r0, r6
 8006914:	b003      	add	sp, #12
 8006916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691a:	6812      	ldr	r2, [r2, #0]
 800691c:	3b04      	subs	r3, #4
 800691e:	2a00      	cmp	r2, #0
 8006920:	d1cb      	bne.n	80068ba <quorem+0x94>
 8006922:	3c01      	subs	r4, #1
 8006924:	e7c6      	b.n	80068b4 <quorem+0x8e>
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	3b04      	subs	r3, #4
 800692a:	2a00      	cmp	r2, #0
 800692c:	d1ef      	bne.n	800690e <quorem+0xe8>
 800692e:	3c01      	subs	r4, #1
 8006930:	e7ea      	b.n	8006908 <quorem+0xe2>
 8006932:	2000      	movs	r0, #0
 8006934:	e7ee      	b.n	8006914 <quorem+0xee>
	...

08006938 <_dtoa_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	69c7      	ldr	r7, [r0, #28]
 800693e:	b097      	sub	sp, #92	@ 0x5c
 8006940:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006944:	ec55 4b10 	vmov	r4, r5, d0
 8006948:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800694a:	9107      	str	r1, [sp, #28]
 800694c:	4681      	mov	r9, r0
 800694e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006950:	9311      	str	r3, [sp, #68]	@ 0x44
 8006952:	b97f      	cbnz	r7, 8006974 <_dtoa_r+0x3c>
 8006954:	2010      	movs	r0, #16
 8006956:	f000 fe09 	bl	800756c <malloc>
 800695a:	4602      	mov	r2, r0
 800695c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006960:	b920      	cbnz	r0, 800696c <_dtoa_r+0x34>
 8006962:	4ba9      	ldr	r3, [pc, #676]	@ (8006c08 <_dtoa_r+0x2d0>)
 8006964:	21ef      	movs	r1, #239	@ 0xef
 8006966:	48a9      	ldr	r0, [pc, #676]	@ (8006c0c <_dtoa_r+0x2d4>)
 8006968:	f001 fc6c 	bl	8008244 <__assert_func>
 800696c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006970:	6007      	str	r7, [r0, #0]
 8006972:	60c7      	str	r7, [r0, #12]
 8006974:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006978:	6819      	ldr	r1, [r3, #0]
 800697a:	b159      	cbz	r1, 8006994 <_dtoa_r+0x5c>
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	604a      	str	r2, [r1, #4]
 8006980:	2301      	movs	r3, #1
 8006982:	4093      	lsls	r3, r2
 8006984:	608b      	str	r3, [r1, #8]
 8006986:	4648      	mov	r0, r9
 8006988:	f000 fee6 	bl	8007758 <_Bfree>
 800698c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	1e2b      	subs	r3, r5, #0
 8006996:	bfb9      	ittee	lt
 8006998:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800699c:	9305      	strlt	r3, [sp, #20]
 800699e:	2300      	movge	r3, #0
 80069a0:	6033      	strge	r3, [r6, #0]
 80069a2:	9f05      	ldr	r7, [sp, #20]
 80069a4:	4b9a      	ldr	r3, [pc, #616]	@ (8006c10 <_dtoa_r+0x2d8>)
 80069a6:	bfbc      	itt	lt
 80069a8:	2201      	movlt	r2, #1
 80069aa:	6032      	strlt	r2, [r6, #0]
 80069ac:	43bb      	bics	r3, r7
 80069ae:	d112      	bne.n	80069d6 <_dtoa_r+0x9e>
 80069b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80069b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069bc:	4323      	orrs	r3, r4
 80069be:	f000 855a 	beq.w	8007476 <_dtoa_r+0xb3e>
 80069c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006c24 <_dtoa_r+0x2ec>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 855c 	beq.w	8007486 <_dtoa_r+0xb4e>
 80069ce:	f10a 0303 	add.w	r3, sl, #3
 80069d2:	f000 bd56 	b.w	8007482 <_dtoa_r+0xb4a>
 80069d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80069da:	2200      	movs	r2, #0
 80069dc:	ec51 0b17 	vmov	r0, r1, d7
 80069e0:	2300      	movs	r3, #0
 80069e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80069e6:	f7fa f897 	bl	8000b18 <__aeabi_dcmpeq>
 80069ea:	4680      	mov	r8, r0
 80069ec:	b158      	cbz	r0, 8006a06 <_dtoa_r+0xce>
 80069ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80069f0:	2301      	movs	r3, #1
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069f6:	b113      	cbz	r3, 80069fe <_dtoa_r+0xc6>
 80069f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80069fa:	4b86      	ldr	r3, [pc, #536]	@ (8006c14 <_dtoa_r+0x2dc>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006c28 <_dtoa_r+0x2f0>
 8006a02:	f000 bd40 	b.w	8007486 <_dtoa_r+0xb4e>
 8006a06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006a0a:	aa14      	add	r2, sp, #80	@ 0x50
 8006a0c:	a915      	add	r1, sp, #84	@ 0x54
 8006a0e:	4648      	mov	r0, r9
 8006a10:	f001 f984 	bl	8007d1c <__d2b>
 8006a14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a18:	9002      	str	r0, [sp, #8]
 8006a1a:	2e00      	cmp	r6, #0
 8006a1c:	d078      	beq.n	8006b10 <_dtoa_r+0x1d8>
 8006a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a38:	4619      	mov	r1, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	4b76      	ldr	r3, [pc, #472]	@ (8006c18 <_dtoa_r+0x2e0>)
 8006a3e:	f7f9 fc4b 	bl	80002d8 <__aeabi_dsub>
 8006a42:	a36b      	add	r3, pc, #428	@ (adr r3, 8006bf0 <_dtoa_r+0x2b8>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f7f9 fdfe 	bl	8000648 <__aeabi_dmul>
 8006a4c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006bf8 <_dtoa_r+0x2c0>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 fc43 	bl	80002dc <__adddf3>
 8006a56:	4604      	mov	r4, r0
 8006a58:	4630      	mov	r0, r6
 8006a5a:	460d      	mov	r5, r1
 8006a5c:	f7f9 fd8a 	bl	8000574 <__aeabi_i2d>
 8006a60:	a367      	add	r3, pc, #412	@ (adr r3, 8006c00 <_dtoa_r+0x2c8>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fdef 	bl	8000648 <__aeabi_dmul>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7f9 fc33 	bl	80002dc <__adddf3>
 8006a76:	4604      	mov	r4, r0
 8006a78:	460d      	mov	r5, r1
 8006a7a:	f7fa f895 	bl	8000ba8 <__aeabi_d2iz>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4607      	mov	r7, r0
 8006a82:	2300      	movs	r3, #0
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7fa f850 	bl	8000b2c <__aeabi_dcmplt>
 8006a8c:	b140      	cbz	r0, 8006aa0 <_dtoa_r+0x168>
 8006a8e:	4638      	mov	r0, r7
 8006a90:	f7f9 fd70 	bl	8000574 <__aeabi_i2d>
 8006a94:	4622      	mov	r2, r4
 8006a96:	462b      	mov	r3, r5
 8006a98:	f7fa f83e 	bl	8000b18 <__aeabi_dcmpeq>
 8006a9c:	b900      	cbnz	r0, 8006aa0 <_dtoa_r+0x168>
 8006a9e:	3f01      	subs	r7, #1
 8006aa0:	2f16      	cmp	r7, #22
 8006aa2:	d852      	bhi.n	8006b4a <_dtoa_r+0x212>
 8006aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8006c1c <_dtoa_r+0x2e4>)
 8006aa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ab2:	f7fa f83b 	bl	8000b2c <__aeabi_dcmplt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d049      	beq.n	8006b4e <_dtoa_r+0x216>
 8006aba:	3f01      	subs	r7, #1
 8006abc:	2300      	movs	r3, #0
 8006abe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ac0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ac2:	1b9b      	subs	r3, r3, r6
 8006ac4:	1e5a      	subs	r2, r3, #1
 8006ac6:	bf45      	ittet	mi
 8006ac8:	f1c3 0301 	rsbmi	r3, r3, #1
 8006acc:	9300      	strmi	r3, [sp, #0]
 8006ace:	2300      	movpl	r3, #0
 8006ad0:	2300      	movmi	r3, #0
 8006ad2:	9206      	str	r2, [sp, #24]
 8006ad4:	bf54      	ite	pl
 8006ad6:	9300      	strpl	r3, [sp, #0]
 8006ad8:	9306      	strmi	r3, [sp, #24]
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	db39      	blt.n	8006b52 <_dtoa_r+0x21a>
 8006ade:	9b06      	ldr	r3, [sp, #24]
 8006ae0:	970d      	str	r7, [sp, #52]	@ 0x34
 8006ae2:	443b      	add	r3, r7
 8006ae4:	9306      	str	r3, [sp, #24]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9308      	str	r3, [sp, #32]
 8006aea:	9b07      	ldr	r3, [sp, #28]
 8006aec:	2b09      	cmp	r3, #9
 8006aee:	d863      	bhi.n	8006bb8 <_dtoa_r+0x280>
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	bfc4      	itt	gt
 8006af4:	3b04      	subgt	r3, #4
 8006af6:	9307      	strgt	r3, [sp, #28]
 8006af8:	9b07      	ldr	r3, [sp, #28]
 8006afa:	f1a3 0302 	sub.w	r3, r3, #2
 8006afe:	bfcc      	ite	gt
 8006b00:	2400      	movgt	r4, #0
 8006b02:	2401      	movle	r4, #1
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d863      	bhi.n	8006bd0 <_dtoa_r+0x298>
 8006b08:	e8df f003 	tbb	[pc, r3]
 8006b0c:	2b375452 	.word	0x2b375452
 8006b10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006b14:	441e      	add	r6, r3
 8006b16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	bfc1      	itttt	gt
 8006b1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b22:	409f      	lslgt	r7, r3
 8006b24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b2c:	bfd6      	itet	le
 8006b2e:	f1c3 0320 	rsble	r3, r3, #32
 8006b32:	ea47 0003 	orrgt.w	r0, r7, r3
 8006b36:	fa04 f003 	lslle.w	r0, r4, r3
 8006b3a:	f7f9 fd0b 	bl	8000554 <__aeabi_ui2d>
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b44:	3e01      	subs	r6, #1
 8006b46:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b48:	e776      	b.n	8006a38 <_dtoa_r+0x100>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e7b7      	b.n	8006abe <_dtoa_r+0x186>
 8006b4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006b50:	e7b6      	b.n	8006ac0 <_dtoa_r+0x188>
 8006b52:	9b00      	ldr	r3, [sp, #0]
 8006b54:	1bdb      	subs	r3, r3, r7
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	427b      	negs	r3, r7
 8006b5a:	9308      	str	r3, [sp, #32]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006b60:	e7c3      	b.n	8006aea <_dtoa_r+0x1b2>
 8006b62:	2301      	movs	r3, #1
 8006b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b68:	eb07 0b03 	add.w	fp, r7, r3
 8006b6c:	f10b 0301 	add.w	r3, fp, #1
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	bfb8      	it	lt
 8006b76:	2301      	movlt	r3, #1
 8006b78:	e006      	b.n	8006b88 <_dtoa_r+0x250>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd28      	ble.n	8006bd6 <_dtoa_r+0x29e>
 8006b84:	469b      	mov	fp, r3
 8006b86:	9303      	str	r3, [sp, #12]
 8006b88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	2204      	movs	r2, #4
 8006b90:	f102 0514 	add.w	r5, r2, #20
 8006b94:	429d      	cmp	r5, r3
 8006b96:	d926      	bls.n	8006be6 <_dtoa_r+0x2ae>
 8006b98:	6041      	str	r1, [r0, #4]
 8006b9a:	4648      	mov	r0, r9
 8006b9c:	f000 fd9c 	bl	80076d8 <_Balloc>
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d142      	bne.n	8006c2c <_dtoa_r+0x2f4>
 8006ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c20 <_dtoa_r+0x2e8>)
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f240 11af 	movw	r1, #431	@ 0x1af
 8006bae:	e6da      	b.n	8006966 <_dtoa_r+0x2e>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e7e3      	b.n	8006b7c <_dtoa_r+0x244>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	e7d5      	b.n	8006b64 <_dtoa_r+0x22c>
 8006bb8:	2401      	movs	r4, #1
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9307      	str	r3, [sp, #28]
 8006bbe:	9409      	str	r4, [sp, #36]	@ 0x24
 8006bc0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8006bca:	2312      	movs	r3, #18
 8006bcc:	920c      	str	r2, [sp, #48]	@ 0x30
 8006bce:	e7db      	b.n	8006b88 <_dtoa_r+0x250>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd4:	e7f4      	b.n	8006bc0 <_dtoa_r+0x288>
 8006bd6:	f04f 0b01 	mov.w	fp, #1
 8006bda:	f8cd b00c 	str.w	fp, [sp, #12]
 8006bde:	465b      	mov	r3, fp
 8006be0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006be4:	e7d0      	b.n	8006b88 <_dtoa_r+0x250>
 8006be6:	3101      	adds	r1, #1
 8006be8:	0052      	lsls	r2, r2, #1
 8006bea:	e7d1      	b.n	8006b90 <_dtoa_r+0x258>
 8006bec:	f3af 8000 	nop.w
 8006bf0:	636f4361 	.word	0x636f4361
 8006bf4:	3fd287a7 	.word	0x3fd287a7
 8006bf8:	8b60c8b3 	.word	0x8b60c8b3
 8006bfc:	3fc68a28 	.word	0x3fc68a28
 8006c00:	509f79fb 	.word	0x509f79fb
 8006c04:	3fd34413 	.word	0x3fd34413
 8006c08:	080089cd 	.word	0x080089cd
 8006c0c:	080089e4 	.word	0x080089e4
 8006c10:	7ff00000 	.word	0x7ff00000
 8006c14:	0800899d 	.word	0x0800899d
 8006c18:	3ff80000 	.word	0x3ff80000
 8006c1c:	08008b38 	.word	0x08008b38
 8006c20:	08008a3c 	.word	0x08008a3c
 8006c24:	080089c9 	.word	0x080089c9
 8006c28:	0800899c 	.word	0x0800899c
 8006c2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c30:	6018      	str	r0, [r3, #0]
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	2b0e      	cmp	r3, #14
 8006c36:	f200 80a1 	bhi.w	8006d7c <_dtoa_r+0x444>
 8006c3a:	2c00      	cmp	r4, #0
 8006c3c:	f000 809e 	beq.w	8006d7c <_dtoa_r+0x444>
 8006c40:	2f00      	cmp	r7, #0
 8006c42:	dd33      	ble.n	8006cac <_dtoa_r+0x374>
 8006c44:	4b9c      	ldr	r3, [pc, #624]	@ (8006eb8 <_dtoa_r+0x580>)
 8006c46:	f007 020f 	and.w	r2, r7, #15
 8006c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c4e:	ed93 7b00 	vldr	d7, [r3]
 8006c52:	05f8      	lsls	r0, r7, #23
 8006c54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006c58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c5c:	d516      	bpl.n	8006c8c <_dtoa_r+0x354>
 8006c5e:	4b97      	ldr	r3, [pc, #604]	@ (8006ebc <_dtoa_r+0x584>)
 8006c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c68:	f7f9 fe18 	bl	800089c <__aeabi_ddiv>
 8006c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c70:	f004 040f 	and.w	r4, r4, #15
 8006c74:	2603      	movs	r6, #3
 8006c76:	4d91      	ldr	r5, [pc, #580]	@ (8006ebc <_dtoa_r+0x584>)
 8006c78:	b954      	cbnz	r4, 8006c90 <_dtoa_r+0x358>
 8006c7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c82:	f7f9 fe0b 	bl	800089c <__aeabi_ddiv>
 8006c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8a:	e028      	b.n	8006cde <_dtoa_r+0x3a6>
 8006c8c:	2602      	movs	r6, #2
 8006c8e:	e7f2      	b.n	8006c76 <_dtoa_r+0x33e>
 8006c90:	07e1      	lsls	r1, r4, #31
 8006c92:	d508      	bpl.n	8006ca6 <_dtoa_r+0x36e>
 8006c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c9c:	f7f9 fcd4 	bl	8000648 <__aeabi_dmul>
 8006ca0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ca4:	3601      	adds	r6, #1
 8006ca6:	1064      	asrs	r4, r4, #1
 8006ca8:	3508      	adds	r5, #8
 8006caa:	e7e5      	b.n	8006c78 <_dtoa_r+0x340>
 8006cac:	f000 80af 	beq.w	8006e0e <_dtoa_r+0x4d6>
 8006cb0:	427c      	negs	r4, r7
 8006cb2:	4b81      	ldr	r3, [pc, #516]	@ (8006eb8 <_dtoa_r+0x580>)
 8006cb4:	4d81      	ldr	r5, [pc, #516]	@ (8006ebc <_dtoa_r+0x584>)
 8006cb6:	f004 020f 	and.w	r2, r4, #15
 8006cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cc6:	f7f9 fcbf 	bl	8000648 <__aeabi_dmul>
 8006cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cce:	1124      	asrs	r4, r4, #4
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	2602      	movs	r6, #2
 8006cd4:	2c00      	cmp	r4, #0
 8006cd6:	f040 808f 	bne.w	8006df8 <_dtoa_r+0x4c0>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1d3      	bne.n	8006c86 <_dtoa_r+0x34e>
 8006cde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ce0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8094 	beq.w	8006e12 <_dtoa_r+0x4da>
 8006cea:	4b75      	ldr	r3, [pc, #468]	@ (8006ec0 <_dtoa_r+0x588>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 ff1b 	bl	8000b2c <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f000 808b 	beq.w	8006e12 <_dtoa_r+0x4da>
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8087 	beq.w	8006e12 <_dtoa_r+0x4da>
 8006d04:	f1bb 0f00 	cmp.w	fp, #0
 8006d08:	dd34      	ble.n	8006d74 <_dtoa_r+0x43c>
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	4b6d      	ldr	r3, [pc, #436]	@ (8006ec4 <_dtoa_r+0x58c>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fc99 	bl	8000648 <__aeabi_dmul>
 8006d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d1a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006d1e:	3601      	adds	r6, #1
 8006d20:	465c      	mov	r4, fp
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7f9 fc26 	bl	8000574 <__aeabi_i2d>
 8006d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2c:	f7f9 fc8c 	bl	8000648 <__aeabi_dmul>
 8006d30:	4b65      	ldr	r3, [pc, #404]	@ (8006ec8 <_dtoa_r+0x590>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	f7f9 fad2 	bl	80002dc <__adddf3>
 8006d38:	4605      	mov	r5, r0
 8006d3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d3e:	2c00      	cmp	r4, #0
 8006d40:	d16a      	bne.n	8006e18 <_dtoa_r+0x4e0>
 8006d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d46:	4b61      	ldr	r3, [pc, #388]	@ (8006ecc <_dtoa_r+0x594>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f7f9 fac5 	bl	80002d8 <__aeabi_dsub>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d56:	462a      	mov	r2, r5
 8006d58:	4633      	mov	r3, r6
 8006d5a:	f7f9 ff05 	bl	8000b68 <__aeabi_dcmpgt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f040 8298 	bne.w	8007294 <_dtoa_r+0x95c>
 8006d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d68:	462a      	mov	r2, r5
 8006d6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d6e:	f7f9 fedd 	bl	8000b2c <__aeabi_dcmplt>
 8006d72:	bb38      	cbnz	r0, 8006dc4 <_dtoa_r+0x48c>
 8006d74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006d78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f2c0 8157 	blt.w	8007032 <_dtoa_r+0x6fa>
 8006d84:	2f0e      	cmp	r7, #14
 8006d86:	f300 8154 	bgt.w	8007032 <_dtoa_r+0x6fa>
 8006d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb8 <_dtoa_r+0x580>)
 8006d8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d90:	ed93 7b00 	vldr	d7, [r3]
 8006d94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	ed8d 7b00 	vstr	d7, [sp]
 8006d9c:	f280 80e5 	bge.w	8006f6a <_dtoa_r+0x632>
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f300 80e1 	bgt.w	8006f6a <_dtoa_r+0x632>
 8006da8:	d10c      	bne.n	8006dc4 <_dtoa_r+0x48c>
 8006daa:	4b48      	ldr	r3, [pc, #288]	@ (8006ecc <_dtoa_r+0x594>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	ec51 0b17 	vmov	r0, r1, d7
 8006db2:	f7f9 fc49 	bl	8000648 <__aeabi_dmul>
 8006db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dba:	f7f9 fecb 	bl	8000b54 <__aeabi_dcmpge>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f000 8266 	beq.w	8007290 <_dtoa_r+0x958>
 8006dc4:	2400      	movs	r4, #0
 8006dc6:	4625      	mov	r5, r4
 8006dc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006dca:	4656      	mov	r6, sl
 8006dcc:	ea6f 0803 	mvn.w	r8, r3
 8006dd0:	2700      	movs	r7, #0
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4648      	mov	r0, r9
 8006dd6:	f000 fcbf 	bl	8007758 <_Bfree>
 8006dda:	2d00      	cmp	r5, #0
 8006ddc:	f000 80bd 	beq.w	8006f5a <_dtoa_r+0x622>
 8006de0:	b12f      	cbz	r7, 8006dee <_dtoa_r+0x4b6>
 8006de2:	42af      	cmp	r7, r5
 8006de4:	d003      	beq.n	8006dee <_dtoa_r+0x4b6>
 8006de6:	4639      	mov	r1, r7
 8006de8:	4648      	mov	r0, r9
 8006dea:	f000 fcb5 	bl	8007758 <_Bfree>
 8006dee:	4629      	mov	r1, r5
 8006df0:	4648      	mov	r0, r9
 8006df2:	f000 fcb1 	bl	8007758 <_Bfree>
 8006df6:	e0b0      	b.n	8006f5a <_dtoa_r+0x622>
 8006df8:	07e2      	lsls	r2, r4, #31
 8006dfa:	d505      	bpl.n	8006e08 <_dtoa_r+0x4d0>
 8006dfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e00:	f7f9 fc22 	bl	8000648 <__aeabi_dmul>
 8006e04:	3601      	adds	r6, #1
 8006e06:	2301      	movs	r3, #1
 8006e08:	1064      	asrs	r4, r4, #1
 8006e0a:	3508      	adds	r5, #8
 8006e0c:	e762      	b.n	8006cd4 <_dtoa_r+0x39c>
 8006e0e:	2602      	movs	r6, #2
 8006e10:	e765      	b.n	8006cde <_dtoa_r+0x3a6>
 8006e12:	9c03      	ldr	r4, [sp, #12]
 8006e14:	46b8      	mov	r8, r7
 8006e16:	e784      	b.n	8006d22 <_dtoa_r+0x3ea>
 8006e18:	4b27      	ldr	r3, [pc, #156]	@ (8006eb8 <_dtoa_r+0x580>)
 8006e1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e24:	4454      	add	r4, sl
 8006e26:	2900      	cmp	r1, #0
 8006e28:	d054      	beq.n	8006ed4 <_dtoa_r+0x59c>
 8006e2a:	4929      	ldr	r1, [pc, #164]	@ (8006ed0 <_dtoa_r+0x598>)
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7f9 fd35 	bl	800089c <__aeabi_ddiv>
 8006e32:	4633      	mov	r3, r6
 8006e34:	462a      	mov	r2, r5
 8006e36:	f7f9 fa4f 	bl	80002d8 <__aeabi_dsub>
 8006e3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e3e:	4656      	mov	r6, sl
 8006e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e44:	f7f9 feb0 	bl	8000ba8 <__aeabi_d2iz>
 8006e48:	4605      	mov	r5, r0
 8006e4a:	f7f9 fb93 	bl	8000574 <__aeabi_i2d>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e56:	f7f9 fa3f 	bl	80002d8 <__aeabi_dsub>
 8006e5a:	3530      	adds	r5, #48	@ 0x30
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e64:	f806 5b01 	strb.w	r5, [r6], #1
 8006e68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e6c:	f7f9 fe5e 	bl	8000b2c <__aeabi_dcmplt>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d172      	bne.n	8006f5a <_dtoa_r+0x622>
 8006e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e78:	4911      	ldr	r1, [pc, #68]	@ (8006ec0 <_dtoa_r+0x588>)
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f7f9 fa2c 	bl	80002d8 <__aeabi_dsub>
 8006e80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e84:	f7f9 fe52 	bl	8000b2c <__aeabi_dcmplt>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	f040 80b4 	bne.w	8006ff6 <_dtoa_r+0x6be>
 8006e8e:	42a6      	cmp	r6, r4
 8006e90:	f43f af70 	beq.w	8006d74 <_dtoa_r+0x43c>
 8006e94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e98:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec4 <_dtoa_r+0x58c>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f7f9 fbd4 	bl	8000648 <__aeabi_dmul>
 8006ea0:	4b08      	ldr	r3, [pc, #32]	@ (8006ec4 <_dtoa_r+0x58c>)
 8006ea2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eac:	f7f9 fbcc 	bl	8000648 <__aeabi_dmul>
 8006eb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eb4:	e7c4      	b.n	8006e40 <_dtoa_r+0x508>
 8006eb6:	bf00      	nop
 8006eb8:	08008b38 	.word	0x08008b38
 8006ebc:	08008b10 	.word	0x08008b10
 8006ec0:	3ff00000 	.word	0x3ff00000
 8006ec4:	40240000 	.word	0x40240000
 8006ec8:	401c0000 	.word	0x401c0000
 8006ecc:	40140000 	.word	0x40140000
 8006ed0:	3fe00000 	.word	0x3fe00000
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f7f9 fbb6 	bl	8000648 <__aeabi_dmul>
 8006edc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ee0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ee2:	4656      	mov	r6, sl
 8006ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee8:	f7f9 fe5e 	bl	8000ba8 <__aeabi_d2iz>
 8006eec:	4605      	mov	r5, r0
 8006eee:	f7f9 fb41 	bl	8000574 <__aeabi_i2d>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006efa:	f7f9 f9ed 	bl	80002d8 <__aeabi_dsub>
 8006efe:	3530      	adds	r5, #48	@ 0x30
 8006f00:	f806 5b01 	strb.w	r5, [r6], #1
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	42a6      	cmp	r6, r4
 8006f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	d124      	bne.n	8006f5e <_dtoa_r+0x626>
 8006f14:	4baf      	ldr	r3, [pc, #700]	@ (80071d4 <_dtoa_r+0x89c>)
 8006f16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f1a:	f7f9 f9df 	bl	80002dc <__adddf3>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f26:	f7f9 fe1f 	bl	8000b68 <__aeabi_dcmpgt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d163      	bne.n	8006ff6 <_dtoa_r+0x6be>
 8006f2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f32:	49a8      	ldr	r1, [pc, #672]	@ (80071d4 <_dtoa_r+0x89c>)
 8006f34:	2000      	movs	r0, #0
 8006f36:	f7f9 f9cf 	bl	80002d8 <__aeabi_dsub>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f42:	f7f9 fdf3 	bl	8000b2c <__aeabi_dcmplt>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f43f af14 	beq.w	8006d74 <_dtoa_r+0x43c>
 8006f4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f4e:	1e73      	subs	r3, r6, #1
 8006f50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f56:	2b30      	cmp	r3, #48	@ 0x30
 8006f58:	d0f8      	beq.n	8006f4c <_dtoa_r+0x614>
 8006f5a:	4647      	mov	r7, r8
 8006f5c:	e03b      	b.n	8006fd6 <_dtoa_r+0x69e>
 8006f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80071d8 <_dtoa_r+0x8a0>)
 8006f60:	f7f9 fb72 	bl	8000648 <__aeabi_dmul>
 8006f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f68:	e7bc      	b.n	8006ee4 <_dtoa_r+0x5ac>
 8006f6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006f6e:	4656      	mov	r6, sl
 8006f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f74:	4620      	mov	r0, r4
 8006f76:	4629      	mov	r1, r5
 8006f78:	f7f9 fc90 	bl	800089c <__aeabi_ddiv>
 8006f7c:	f7f9 fe14 	bl	8000ba8 <__aeabi_d2iz>
 8006f80:	4680      	mov	r8, r0
 8006f82:	f7f9 faf7 	bl	8000574 <__aeabi_i2d>
 8006f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f8a:	f7f9 fb5d 	bl	8000648 <__aeabi_dmul>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4620      	mov	r0, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f9a:	f7f9 f99d 	bl	80002d8 <__aeabi_dsub>
 8006f9e:	f806 4b01 	strb.w	r4, [r6], #1
 8006fa2:	9d03      	ldr	r5, [sp, #12]
 8006fa4:	eba6 040a 	sub.w	r4, r6, sl
 8006fa8:	42a5      	cmp	r5, r4
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	d133      	bne.n	8007018 <_dtoa_r+0x6e0>
 8006fb0:	f7f9 f994 	bl	80002dc <__adddf3>
 8006fb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fb8:	4604      	mov	r4, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	f7f9 fdd4 	bl	8000b68 <__aeabi_dcmpgt>
 8006fc0:	b9c0      	cbnz	r0, 8006ff4 <_dtoa_r+0x6bc>
 8006fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f7f9 fda5 	bl	8000b18 <__aeabi_dcmpeq>
 8006fce:	b110      	cbz	r0, 8006fd6 <_dtoa_r+0x69e>
 8006fd0:	f018 0f01 	tst.w	r8, #1
 8006fd4:	d10e      	bne.n	8006ff4 <_dtoa_r+0x6bc>
 8006fd6:	9902      	ldr	r1, [sp, #8]
 8006fd8:	4648      	mov	r0, r9
 8006fda:	f000 fbbd 	bl	8007758 <_Bfree>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	7033      	strb	r3, [r6, #0]
 8006fe2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fe4:	3701      	adds	r7, #1
 8006fe6:	601f      	str	r7, [r3, #0]
 8006fe8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 824b 	beq.w	8007486 <_dtoa_r+0xb4e>
 8006ff0:	601e      	str	r6, [r3, #0]
 8006ff2:	e248      	b.n	8007486 <_dtoa_r+0xb4e>
 8006ff4:	46b8      	mov	r8, r7
 8006ff6:	4633      	mov	r3, r6
 8006ff8:	461e      	mov	r6, r3
 8006ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffe:	2a39      	cmp	r2, #57	@ 0x39
 8007000:	d106      	bne.n	8007010 <_dtoa_r+0x6d8>
 8007002:	459a      	cmp	sl, r3
 8007004:	d1f8      	bne.n	8006ff8 <_dtoa_r+0x6c0>
 8007006:	2230      	movs	r2, #48	@ 0x30
 8007008:	f108 0801 	add.w	r8, r8, #1
 800700c:	f88a 2000 	strb.w	r2, [sl]
 8007010:	781a      	ldrb	r2, [r3, #0]
 8007012:	3201      	adds	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e7a0      	b.n	8006f5a <_dtoa_r+0x622>
 8007018:	4b6f      	ldr	r3, [pc, #444]	@ (80071d8 <_dtoa_r+0x8a0>)
 800701a:	2200      	movs	r2, #0
 800701c:	f7f9 fb14 	bl	8000648 <__aeabi_dmul>
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4604      	mov	r4, r0
 8007026:	460d      	mov	r5, r1
 8007028:	f7f9 fd76 	bl	8000b18 <__aeabi_dcmpeq>
 800702c:	2800      	cmp	r0, #0
 800702e:	d09f      	beq.n	8006f70 <_dtoa_r+0x638>
 8007030:	e7d1      	b.n	8006fd6 <_dtoa_r+0x69e>
 8007032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007034:	2a00      	cmp	r2, #0
 8007036:	f000 80ea 	beq.w	800720e <_dtoa_r+0x8d6>
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	2a01      	cmp	r2, #1
 800703e:	f300 80cd 	bgt.w	80071dc <_dtoa_r+0x8a4>
 8007042:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007044:	2a00      	cmp	r2, #0
 8007046:	f000 80c1 	beq.w	80071cc <_dtoa_r+0x894>
 800704a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800704e:	9c08      	ldr	r4, [sp, #32]
 8007050:	9e00      	ldr	r6, [sp, #0]
 8007052:	9a00      	ldr	r2, [sp, #0]
 8007054:	441a      	add	r2, r3
 8007056:	9200      	str	r2, [sp, #0]
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	2101      	movs	r1, #1
 800705c:	441a      	add	r2, r3
 800705e:	4648      	mov	r0, r9
 8007060:	9206      	str	r2, [sp, #24]
 8007062:	f000 fc2d 	bl	80078c0 <__i2b>
 8007066:	4605      	mov	r5, r0
 8007068:	b166      	cbz	r6, 8007084 <_dtoa_r+0x74c>
 800706a:	9b06      	ldr	r3, [sp, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd09      	ble.n	8007084 <_dtoa_r+0x74c>
 8007070:	42b3      	cmp	r3, r6
 8007072:	9a00      	ldr	r2, [sp, #0]
 8007074:	bfa8      	it	ge
 8007076:	4633      	movge	r3, r6
 8007078:	1ad2      	subs	r2, r2, r3
 800707a:	9200      	str	r2, [sp, #0]
 800707c:	9a06      	ldr	r2, [sp, #24]
 800707e:	1af6      	subs	r6, r6, r3
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	9306      	str	r3, [sp, #24]
 8007084:	9b08      	ldr	r3, [sp, #32]
 8007086:	b30b      	cbz	r3, 80070cc <_dtoa_r+0x794>
 8007088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80c6 	beq.w	800721c <_dtoa_r+0x8e4>
 8007090:	2c00      	cmp	r4, #0
 8007092:	f000 80c0 	beq.w	8007216 <_dtoa_r+0x8de>
 8007096:	4629      	mov	r1, r5
 8007098:	4622      	mov	r2, r4
 800709a:	4648      	mov	r0, r9
 800709c:	f000 fcc8 	bl	8007a30 <__pow5mult>
 80070a0:	9a02      	ldr	r2, [sp, #8]
 80070a2:	4601      	mov	r1, r0
 80070a4:	4605      	mov	r5, r0
 80070a6:	4648      	mov	r0, r9
 80070a8:	f000 fc20 	bl	80078ec <__multiply>
 80070ac:	9902      	ldr	r1, [sp, #8]
 80070ae:	4680      	mov	r8, r0
 80070b0:	4648      	mov	r0, r9
 80070b2:	f000 fb51 	bl	8007758 <_Bfree>
 80070b6:	9b08      	ldr	r3, [sp, #32]
 80070b8:	1b1b      	subs	r3, r3, r4
 80070ba:	9308      	str	r3, [sp, #32]
 80070bc:	f000 80b1 	beq.w	8007222 <_dtoa_r+0x8ea>
 80070c0:	9a08      	ldr	r2, [sp, #32]
 80070c2:	4641      	mov	r1, r8
 80070c4:	4648      	mov	r0, r9
 80070c6:	f000 fcb3 	bl	8007a30 <__pow5mult>
 80070ca:	9002      	str	r0, [sp, #8]
 80070cc:	2101      	movs	r1, #1
 80070ce:	4648      	mov	r0, r9
 80070d0:	f000 fbf6 	bl	80078c0 <__i2b>
 80070d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070d6:	4604      	mov	r4, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 81d8 	beq.w	800748e <_dtoa_r+0xb56>
 80070de:	461a      	mov	r2, r3
 80070e0:	4601      	mov	r1, r0
 80070e2:	4648      	mov	r0, r9
 80070e4:	f000 fca4 	bl	8007a30 <__pow5mult>
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	4604      	mov	r4, r0
 80070ee:	f300 809f 	bgt.w	8007230 <_dtoa_r+0x8f8>
 80070f2:	9b04      	ldr	r3, [sp, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f040 8097 	bne.w	8007228 <_dtoa_r+0x8f0>
 80070fa:	9b05      	ldr	r3, [sp, #20]
 80070fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 8093 	bne.w	800722c <_dtoa_r+0x8f4>
 8007106:	9b05      	ldr	r3, [sp, #20]
 8007108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800710c:	0d1b      	lsrs	r3, r3, #20
 800710e:	051b      	lsls	r3, r3, #20
 8007110:	b133      	cbz	r3, 8007120 <_dtoa_r+0x7e8>
 8007112:	9b00      	ldr	r3, [sp, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	9b06      	ldr	r3, [sp, #24]
 800711a:	3301      	adds	r3, #1
 800711c:	9306      	str	r3, [sp, #24]
 800711e:	2301      	movs	r3, #1
 8007120:	9308      	str	r3, [sp, #32]
 8007122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 81b8 	beq.w	800749a <_dtoa_r+0xb62>
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007130:	6918      	ldr	r0, [r3, #16]
 8007132:	f000 fb79 	bl	8007828 <__hi0bits>
 8007136:	f1c0 0020 	rsb	r0, r0, #32
 800713a:	9b06      	ldr	r3, [sp, #24]
 800713c:	4418      	add	r0, r3
 800713e:	f010 001f 	ands.w	r0, r0, #31
 8007142:	f000 8082 	beq.w	800724a <_dtoa_r+0x912>
 8007146:	f1c0 0320 	rsb	r3, r0, #32
 800714a:	2b04      	cmp	r3, #4
 800714c:	dd73      	ble.n	8007236 <_dtoa_r+0x8fe>
 800714e:	9b00      	ldr	r3, [sp, #0]
 8007150:	f1c0 001c 	rsb	r0, r0, #28
 8007154:	4403      	add	r3, r0
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	9b06      	ldr	r3, [sp, #24]
 800715a:	4403      	add	r3, r0
 800715c:	4406      	add	r6, r0
 800715e:	9306      	str	r3, [sp, #24]
 8007160:	9b00      	ldr	r3, [sp, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	dd05      	ble.n	8007172 <_dtoa_r+0x83a>
 8007166:	9902      	ldr	r1, [sp, #8]
 8007168:	461a      	mov	r2, r3
 800716a:	4648      	mov	r0, r9
 800716c:	f000 fcba 	bl	8007ae4 <__lshift>
 8007170:	9002      	str	r0, [sp, #8]
 8007172:	9b06      	ldr	r3, [sp, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	dd05      	ble.n	8007184 <_dtoa_r+0x84c>
 8007178:	4621      	mov	r1, r4
 800717a:	461a      	mov	r2, r3
 800717c:	4648      	mov	r0, r9
 800717e:	f000 fcb1 	bl	8007ae4 <__lshift>
 8007182:	4604      	mov	r4, r0
 8007184:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d061      	beq.n	800724e <_dtoa_r+0x916>
 800718a:	9802      	ldr	r0, [sp, #8]
 800718c:	4621      	mov	r1, r4
 800718e:	f000 fd15 	bl	8007bbc <__mcmp>
 8007192:	2800      	cmp	r0, #0
 8007194:	da5b      	bge.n	800724e <_dtoa_r+0x916>
 8007196:	2300      	movs	r3, #0
 8007198:	9902      	ldr	r1, [sp, #8]
 800719a:	220a      	movs	r2, #10
 800719c:	4648      	mov	r0, r9
 800719e:	f000 fafd 	bl	800779c <__multadd>
 80071a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a4:	9002      	str	r0, [sp, #8]
 80071a6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 8177 	beq.w	800749e <_dtoa_r+0xb66>
 80071b0:	4629      	mov	r1, r5
 80071b2:	2300      	movs	r3, #0
 80071b4:	220a      	movs	r2, #10
 80071b6:	4648      	mov	r0, r9
 80071b8:	f000 faf0 	bl	800779c <__multadd>
 80071bc:	f1bb 0f00 	cmp.w	fp, #0
 80071c0:	4605      	mov	r5, r0
 80071c2:	dc6f      	bgt.n	80072a4 <_dtoa_r+0x96c>
 80071c4:	9b07      	ldr	r3, [sp, #28]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	dc49      	bgt.n	800725e <_dtoa_r+0x926>
 80071ca:	e06b      	b.n	80072a4 <_dtoa_r+0x96c>
 80071cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071d2:	e73c      	b.n	800704e <_dtoa_r+0x716>
 80071d4:	3fe00000 	.word	0x3fe00000
 80071d8:	40240000 	.word	0x40240000
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	1e5c      	subs	r4, r3, #1
 80071e0:	9b08      	ldr	r3, [sp, #32]
 80071e2:	42a3      	cmp	r3, r4
 80071e4:	db09      	blt.n	80071fa <_dtoa_r+0x8c2>
 80071e6:	1b1c      	subs	r4, r3, r4
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f6bf af30 	bge.w	8007050 <_dtoa_r+0x718>
 80071f0:	9b00      	ldr	r3, [sp, #0]
 80071f2:	9a03      	ldr	r2, [sp, #12]
 80071f4:	1a9e      	subs	r6, r3, r2
 80071f6:	2300      	movs	r3, #0
 80071f8:	e72b      	b.n	8007052 <_dtoa_r+0x71a>
 80071fa:	9b08      	ldr	r3, [sp, #32]
 80071fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071fe:	9408      	str	r4, [sp, #32]
 8007200:	1ae3      	subs	r3, r4, r3
 8007202:	441a      	add	r2, r3
 8007204:	9e00      	ldr	r6, [sp, #0]
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	920d      	str	r2, [sp, #52]	@ 0x34
 800720a:	2400      	movs	r4, #0
 800720c:	e721      	b.n	8007052 <_dtoa_r+0x71a>
 800720e:	9c08      	ldr	r4, [sp, #32]
 8007210:	9e00      	ldr	r6, [sp, #0]
 8007212:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007214:	e728      	b.n	8007068 <_dtoa_r+0x730>
 8007216:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800721a:	e751      	b.n	80070c0 <_dtoa_r+0x788>
 800721c:	9a08      	ldr	r2, [sp, #32]
 800721e:	9902      	ldr	r1, [sp, #8]
 8007220:	e750      	b.n	80070c4 <_dtoa_r+0x78c>
 8007222:	f8cd 8008 	str.w	r8, [sp, #8]
 8007226:	e751      	b.n	80070cc <_dtoa_r+0x794>
 8007228:	2300      	movs	r3, #0
 800722a:	e779      	b.n	8007120 <_dtoa_r+0x7e8>
 800722c:	9b04      	ldr	r3, [sp, #16]
 800722e:	e777      	b.n	8007120 <_dtoa_r+0x7e8>
 8007230:	2300      	movs	r3, #0
 8007232:	9308      	str	r3, [sp, #32]
 8007234:	e779      	b.n	800712a <_dtoa_r+0x7f2>
 8007236:	d093      	beq.n	8007160 <_dtoa_r+0x828>
 8007238:	9a00      	ldr	r2, [sp, #0]
 800723a:	331c      	adds	r3, #28
 800723c:	441a      	add	r2, r3
 800723e:	9200      	str	r2, [sp, #0]
 8007240:	9a06      	ldr	r2, [sp, #24]
 8007242:	441a      	add	r2, r3
 8007244:	441e      	add	r6, r3
 8007246:	9206      	str	r2, [sp, #24]
 8007248:	e78a      	b.n	8007160 <_dtoa_r+0x828>
 800724a:	4603      	mov	r3, r0
 800724c:	e7f4      	b.n	8007238 <_dtoa_r+0x900>
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	46b8      	mov	r8, r7
 8007254:	dc20      	bgt.n	8007298 <_dtoa_r+0x960>
 8007256:	469b      	mov	fp, r3
 8007258:	9b07      	ldr	r3, [sp, #28]
 800725a:	2b02      	cmp	r3, #2
 800725c:	dd1e      	ble.n	800729c <_dtoa_r+0x964>
 800725e:	f1bb 0f00 	cmp.w	fp, #0
 8007262:	f47f adb1 	bne.w	8006dc8 <_dtoa_r+0x490>
 8007266:	4621      	mov	r1, r4
 8007268:	465b      	mov	r3, fp
 800726a:	2205      	movs	r2, #5
 800726c:	4648      	mov	r0, r9
 800726e:	f000 fa95 	bl	800779c <__multadd>
 8007272:	4601      	mov	r1, r0
 8007274:	4604      	mov	r4, r0
 8007276:	9802      	ldr	r0, [sp, #8]
 8007278:	f000 fca0 	bl	8007bbc <__mcmp>
 800727c:	2800      	cmp	r0, #0
 800727e:	f77f ada3 	ble.w	8006dc8 <_dtoa_r+0x490>
 8007282:	4656      	mov	r6, sl
 8007284:	2331      	movs	r3, #49	@ 0x31
 8007286:	f806 3b01 	strb.w	r3, [r6], #1
 800728a:	f108 0801 	add.w	r8, r8, #1
 800728e:	e59f      	b.n	8006dd0 <_dtoa_r+0x498>
 8007290:	9c03      	ldr	r4, [sp, #12]
 8007292:	46b8      	mov	r8, r7
 8007294:	4625      	mov	r5, r4
 8007296:	e7f4      	b.n	8007282 <_dtoa_r+0x94a>
 8007298:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800729c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 8101 	beq.w	80074a6 <_dtoa_r+0xb6e>
 80072a4:	2e00      	cmp	r6, #0
 80072a6:	dd05      	ble.n	80072b4 <_dtoa_r+0x97c>
 80072a8:	4629      	mov	r1, r5
 80072aa:	4632      	mov	r2, r6
 80072ac:	4648      	mov	r0, r9
 80072ae:	f000 fc19 	bl	8007ae4 <__lshift>
 80072b2:	4605      	mov	r5, r0
 80072b4:	9b08      	ldr	r3, [sp, #32]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d05c      	beq.n	8007374 <_dtoa_r+0xa3c>
 80072ba:	6869      	ldr	r1, [r5, #4]
 80072bc:	4648      	mov	r0, r9
 80072be:	f000 fa0b 	bl	80076d8 <_Balloc>
 80072c2:	4606      	mov	r6, r0
 80072c4:	b928      	cbnz	r0, 80072d2 <_dtoa_r+0x99a>
 80072c6:	4b82      	ldr	r3, [pc, #520]	@ (80074d0 <_dtoa_r+0xb98>)
 80072c8:	4602      	mov	r2, r0
 80072ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80072ce:	f7ff bb4a 	b.w	8006966 <_dtoa_r+0x2e>
 80072d2:	692a      	ldr	r2, [r5, #16]
 80072d4:	3202      	adds	r2, #2
 80072d6:	0092      	lsls	r2, r2, #2
 80072d8:	f105 010c 	add.w	r1, r5, #12
 80072dc:	300c      	adds	r0, #12
 80072de:	f000 ffa3 	bl	8008228 <memcpy>
 80072e2:	2201      	movs	r2, #1
 80072e4:	4631      	mov	r1, r6
 80072e6:	4648      	mov	r0, r9
 80072e8:	f000 fbfc 	bl	8007ae4 <__lshift>
 80072ec:	f10a 0301 	add.w	r3, sl, #1
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	eb0a 030b 	add.w	r3, sl, fp
 80072f6:	9308      	str	r3, [sp, #32]
 80072f8:	9b04      	ldr	r3, [sp, #16]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	462f      	mov	r7, r5
 8007300:	9306      	str	r3, [sp, #24]
 8007302:	4605      	mov	r5, r0
 8007304:	9b00      	ldr	r3, [sp, #0]
 8007306:	9802      	ldr	r0, [sp, #8]
 8007308:	4621      	mov	r1, r4
 800730a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800730e:	f7ff fa8a 	bl	8006826 <quorem>
 8007312:	4603      	mov	r3, r0
 8007314:	3330      	adds	r3, #48	@ 0x30
 8007316:	9003      	str	r0, [sp, #12]
 8007318:	4639      	mov	r1, r7
 800731a:	9802      	ldr	r0, [sp, #8]
 800731c:	9309      	str	r3, [sp, #36]	@ 0x24
 800731e:	f000 fc4d 	bl	8007bbc <__mcmp>
 8007322:	462a      	mov	r2, r5
 8007324:	9004      	str	r0, [sp, #16]
 8007326:	4621      	mov	r1, r4
 8007328:	4648      	mov	r0, r9
 800732a:	f000 fc63 	bl	8007bf4 <__mdiff>
 800732e:	68c2      	ldr	r2, [r0, #12]
 8007330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007332:	4606      	mov	r6, r0
 8007334:	bb02      	cbnz	r2, 8007378 <_dtoa_r+0xa40>
 8007336:	4601      	mov	r1, r0
 8007338:	9802      	ldr	r0, [sp, #8]
 800733a:	f000 fc3f 	bl	8007bbc <__mcmp>
 800733e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007340:	4602      	mov	r2, r0
 8007342:	4631      	mov	r1, r6
 8007344:	4648      	mov	r0, r9
 8007346:	920c      	str	r2, [sp, #48]	@ 0x30
 8007348:	9309      	str	r3, [sp, #36]	@ 0x24
 800734a:	f000 fa05 	bl	8007758 <_Bfree>
 800734e:	9b07      	ldr	r3, [sp, #28]
 8007350:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007352:	9e00      	ldr	r6, [sp, #0]
 8007354:	ea42 0103 	orr.w	r1, r2, r3
 8007358:	9b06      	ldr	r3, [sp, #24]
 800735a:	4319      	orrs	r1, r3
 800735c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800735e:	d10d      	bne.n	800737c <_dtoa_r+0xa44>
 8007360:	2b39      	cmp	r3, #57	@ 0x39
 8007362:	d027      	beq.n	80073b4 <_dtoa_r+0xa7c>
 8007364:	9a04      	ldr	r2, [sp, #16]
 8007366:	2a00      	cmp	r2, #0
 8007368:	dd01      	ble.n	800736e <_dtoa_r+0xa36>
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	3331      	adds	r3, #49	@ 0x31
 800736e:	f88b 3000 	strb.w	r3, [fp]
 8007372:	e52e      	b.n	8006dd2 <_dtoa_r+0x49a>
 8007374:	4628      	mov	r0, r5
 8007376:	e7b9      	b.n	80072ec <_dtoa_r+0x9b4>
 8007378:	2201      	movs	r2, #1
 800737a:	e7e2      	b.n	8007342 <_dtoa_r+0xa0a>
 800737c:	9904      	ldr	r1, [sp, #16]
 800737e:	2900      	cmp	r1, #0
 8007380:	db04      	blt.n	800738c <_dtoa_r+0xa54>
 8007382:	9807      	ldr	r0, [sp, #28]
 8007384:	4301      	orrs	r1, r0
 8007386:	9806      	ldr	r0, [sp, #24]
 8007388:	4301      	orrs	r1, r0
 800738a:	d120      	bne.n	80073ce <_dtoa_r+0xa96>
 800738c:	2a00      	cmp	r2, #0
 800738e:	ddee      	ble.n	800736e <_dtoa_r+0xa36>
 8007390:	9902      	ldr	r1, [sp, #8]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2201      	movs	r2, #1
 8007396:	4648      	mov	r0, r9
 8007398:	f000 fba4 	bl	8007ae4 <__lshift>
 800739c:	4621      	mov	r1, r4
 800739e:	9002      	str	r0, [sp, #8]
 80073a0:	f000 fc0c 	bl	8007bbc <__mcmp>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	9b00      	ldr	r3, [sp, #0]
 80073a8:	dc02      	bgt.n	80073b0 <_dtoa_r+0xa78>
 80073aa:	d1e0      	bne.n	800736e <_dtoa_r+0xa36>
 80073ac:	07da      	lsls	r2, r3, #31
 80073ae:	d5de      	bpl.n	800736e <_dtoa_r+0xa36>
 80073b0:	2b39      	cmp	r3, #57	@ 0x39
 80073b2:	d1da      	bne.n	800736a <_dtoa_r+0xa32>
 80073b4:	2339      	movs	r3, #57	@ 0x39
 80073b6:	f88b 3000 	strb.w	r3, [fp]
 80073ba:	4633      	mov	r3, r6
 80073bc:	461e      	mov	r6, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80073c4:	2a39      	cmp	r2, #57	@ 0x39
 80073c6:	d04e      	beq.n	8007466 <_dtoa_r+0xb2e>
 80073c8:	3201      	adds	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e501      	b.n	8006dd2 <_dtoa_r+0x49a>
 80073ce:	2a00      	cmp	r2, #0
 80073d0:	dd03      	ble.n	80073da <_dtoa_r+0xaa2>
 80073d2:	2b39      	cmp	r3, #57	@ 0x39
 80073d4:	d0ee      	beq.n	80073b4 <_dtoa_r+0xa7c>
 80073d6:	3301      	adds	r3, #1
 80073d8:	e7c9      	b.n	800736e <_dtoa_r+0xa36>
 80073da:	9a00      	ldr	r2, [sp, #0]
 80073dc:	9908      	ldr	r1, [sp, #32]
 80073de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073e2:	428a      	cmp	r2, r1
 80073e4:	d028      	beq.n	8007438 <_dtoa_r+0xb00>
 80073e6:	9902      	ldr	r1, [sp, #8]
 80073e8:	2300      	movs	r3, #0
 80073ea:	220a      	movs	r2, #10
 80073ec:	4648      	mov	r0, r9
 80073ee:	f000 f9d5 	bl	800779c <__multadd>
 80073f2:	42af      	cmp	r7, r5
 80073f4:	9002      	str	r0, [sp, #8]
 80073f6:	f04f 0300 	mov.w	r3, #0
 80073fa:	f04f 020a 	mov.w	r2, #10
 80073fe:	4639      	mov	r1, r7
 8007400:	4648      	mov	r0, r9
 8007402:	d107      	bne.n	8007414 <_dtoa_r+0xadc>
 8007404:	f000 f9ca 	bl	800779c <__multadd>
 8007408:	4607      	mov	r7, r0
 800740a:	4605      	mov	r5, r0
 800740c:	9b00      	ldr	r3, [sp, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	e777      	b.n	8007304 <_dtoa_r+0x9cc>
 8007414:	f000 f9c2 	bl	800779c <__multadd>
 8007418:	4629      	mov	r1, r5
 800741a:	4607      	mov	r7, r0
 800741c:	2300      	movs	r3, #0
 800741e:	220a      	movs	r2, #10
 8007420:	4648      	mov	r0, r9
 8007422:	f000 f9bb 	bl	800779c <__multadd>
 8007426:	4605      	mov	r5, r0
 8007428:	e7f0      	b.n	800740c <_dtoa_r+0xad4>
 800742a:	f1bb 0f00 	cmp.w	fp, #0
 800742e:	bfcc      	ite	gt
 8007430:	465e      	movgt	r6, fp
 8007432:	2601      	movle	r6, #1
 8007434:	4456      	add	r6, sl
 8007436:	2700      	movs	r7, #0
 8007438:	9902      	ldr	r1, [sp, #8]
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	2201      	movs	r2, #1
 800743e:	4648      	mov	r0, r9
 8007440:	f000 fb50 	bl	8007ae4 <__lshift>
 8007444:	4621      	mov	r1, r4
 8007446:	9002      	str	r0, [sp, #8]
 8007448:	f000 fbb8 	bl	8007bbc <__mcmp>
 800744c:	2800      	cmp	r0, #0
 800744e:	dcb4      	bgt.n	80073ba <_dtoa_r+0xa82>
 8007450:	d102      	bne.n	8007458 <_dtoa_r+0xb20>
 8007452:	9b00      	ldr	r3, [sp, #0]
 8007454:	07db      	lsls	r3, r3, #31
 8007456:	d4b0      	bmi.n	80073ba <_dtoa_r+0xa82>
 8007458:	4633      	mov	r3, r6
 800745a:	461e      	mov	r6, r3
 800745c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007460:	2a30      	cmp	r2, #48	@ 0x30
 8007462:	d0fa      	beq.n	800745a <_dtoa_r+0xb22>
 8007464:	e4b5      	b.n	8006dd2 <_dtoa_r+0x49a>
 8007466:	459a      	cmp	sl, r3
 8007468:	d1a8      	bne.n	80073bc <_dtoa_r+0xa84>
 800746a:	2331      	movs	r3, #49	@ 0x31
 800746c:	f108 0801 	add.w	r8, r8, #1
 8007470:	f88a 3000 	strb.w	r3, [sl]
 8007474:	e4ad      	b.n	8006dd2 <_dtoa_r+0x49a>
 8007476:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007478:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80074d4 <_dtoa_r+0xb9c>
 800747c:	b11b      	cbz	r3, 8007486 <_dtoa_r+0xb4e>
 800747e:	f10a 0308 	add.w	r3, sl, #8
 8007482:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	4650      	mov	r0, sl
 8007488:	b017      	add	sp, #92	@ 0x5c
 800748a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748e:	9b07      	ldr	r3, [sp, #28]
 8007490:	2b01      	cmp	r3, #1
 8007492:	f77f ae2e 	ble.w	80070f2 <_dtoa_r+0x7ba>
 8007496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007498:	9308      	str	r3, [sp, #32]
 800749a:	2001      	movs	r0, #1
 800749c:	e64d      	b.n	800713a <_dtoa_r+0x802>
 800749e:	f1bb 0f00 	cmp.w	fp, #0
 80074a2:	f77f aed9 	ble.w	8007258 <_dtoa_r+0x920>
 80074a6:	4656      	mov	r6, sl
 80074a8:	9802      	ldr	r0, [sp, #8]
 80074aa:	4621      	mov	r1, r4
 80074ac:	f7ff f9bb 	bl	8006826 <quorem>
 80074b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80074b4:	f806 3b01 	strb.w	r3, [r6], #1
 80074b8:	eba6 020a 	sub.w	r2, r6, sl
 80074bc:	4593      	cmp	fp, r2
 80074be:	ddb4      	ble.n	800742a <_dtoa_r+0xaf2>
 80074c0:	9902      	ldr	r1, [sp, #8]
 80074c2:	2300      	movs	r3, #0
 80074c4:	220a      	movs	r2, #10
 80074c6:	4648      	mov	r0, r9
 80074c8:	f000 f968 	bl	800779c <__multadd>
 80074cc:	9002      	str	r0, [sp, #8]
 80074ce:	e7eb      	b.n	80074a8 <_dtoa_r+0xb70>
 80074d0:	08008a3c 	.word	0x08008a3c
 80074d4:	080089c0 	.word	0x080089c0

080074d8 <_free_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4605      	mov	r5, r0
 80074dc:	2900      	cmp	r1, #0
 80074de:	d041      	beq.n	8007564 <_free_r+0x8c>
 80074e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e4:	1f0c      	subs	r4, r1, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bfb8      	it	lt
 80074ea:	18e4      	addlt	r4, r4, r3
 80074ec:	f000 f8e8 	bl	80076c0 <__malloc_lock>
 80074f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007568 <_free_r+0x90>)
 80074f2:	6813      	ldr	r3, [r2, #0]
 80074f4:	b933      	cbnz	r3, 8007504 <_free_r+0x2c>
 80074f6:	6063      	str	r3, [r4, #4]
 80074f8:	6014      	str	r4, [r2, #0]
 80074fa:	4628      	mov	r0, r5
 80074fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007500:	f000 b8e4 	b.w	80076cc <__malloc_unlock>
 8007504:	42a3      	cmp	r3, r4
 8007506:	d908      	bls.n	800751a <_free_r+0x42>
 8007508:	6820      	ldr	r0, [r4, #0]
 800750a:	1821      	adds	r1, r4, r0
 800750c:	428b      	cmp	r3, r1
 800750e:	bf01      	itttt	eq
 8007510:	6819      	ldreq	r1, [r3, #0]
 8007512:	685b      	ldreq	r3, [r3, #4]
 8007514:	1809      	addeq	r1, r1, r0
 8007516:	6021      	streq	r1, [r4, #0]
 8007518:	e7ed      	b.n	80074f6 <_free_r+0x1e>
 800751a:	461a      	mov	r2, r3
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	b10b      	cbz	r3, 8007524 <_free_r+0x4c>
 8007520:	42a3      	cmp	r3, r4
 8007522:	d9fa      	bls.n	800751a <_free_r+0x42>
 8007524:	6811      	ldr	r1, [r2, #0]
 8007526:	1850      	adds	r0, r2, r1
 8007528:	42a0      	cmp	r0, r4
 800752a:	d10b      	bne.n	8007544 <_free_r+0x6c>
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	4401      	add	r1, r0
 8007530:	1850      	adds	r0, r2, r1
 8007532:	4283      	cmp	r3, r0
 8007534:	6011      	str	r1, [r2, #0]
 8007536:	d1e0      	bne.n	80074fa <_free_r+0x22>
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	6053      	str	r3, [r2, #4]
 800753e:	4408      	add	r0, r1
 8007540:	6010      	str	r0, [r2, #0]
 8007542:	e7da      	b.n	80074fa <_free_r+0x22>
 8007544:	d902      	bls.n	800754c <_free_r+0x74>
 8007546:	230c      	movs	r3, #12
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	e7d6      	b.n	80074fa <_free_r+0x22>
 800754c:	6820      	ldr	r0, [r4, #0]
 800754e:	1821      	adds	r1, r4, r0
 8007550:	428b      	cmp	r3, r1
 8007552:	bf04      	itt	eq
 8007554:	6819      	ldreq	r1, [r3, #0]
 8007556:	685b      	ldreq	r3, [r3, #4]
 8007558:	6063      	str	r3, [r4, #4]
 800755a:	bf04      	itt	eq
 800755c:	1809      	addeq	r1, r1, r0
 800755e:	6021      	streq	r1, [r4, #0]
 8007560:	6054      	str	r4, [r2, #4]
 8007562:	e7ca      	b.n	80074fa <_free_r+0x22>
 8007564:	bd38      	pop	{r3, r4, r5, pc}
 8007566:	bf00      	nop
 8007568:	2000053c 	.word	0x2000053c

0800756c <malloc>:
 800756c:	4b02      	ldr	r3, [pc, #8]	@ (8007578 <malloc+0xc>)
 800756e:	4601      	mov	r1, r0
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f000 b825 	b.w	80075c0 <_malloc_r>
 8007576:	bf00      	nop
 8007578:	2000001c 	.word	0x2000001c

0800757c <sbrk_aligned>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	4e0f      	ldr	r6, [pc, #60]	@ (80075bc <sbrk_aligned+0x40>)
 8007580:	460c      	mov	r4, r1
 8007582:	6831      	ldr	r1, [r6, #0]
 8007584:	4605      	mov	r5, r0
 8007586:	b911      	cbnz	r1, 800758e <sbrk_aligned+0x12>
 8007588:	f000 fe3e 	bl	8008208 <_sbrk_r>
 800758c:	6030      	str	r0, [r6, #0]
 800758e:	4621      	mov	r1, r4
 8007590:	4628      	mov	r0, r5
 8007592:	f000 fe39 	bl	8008208 <_sbrk_r>
 8007596:	1c43      	adds	r3, r0, #1
 8007598:	d103      	bne.n	80075a2 <sbrk_aligned+0x26>
 800759a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800759e:	4620      	mov	r0, r4
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
 80075a2:	1cc4      	adds	r4, r0, #3
 80075a4:	f024 0403 	bic.w	r4, r4, #3
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d0f8      	beq.n	800759e <sbrk_aligned+0x22>
 80075ac:	1a21      	subs	r1, r4, r0
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 fe2a 	bl	8008208 <_sbrk_r>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d1f2      	bne.n	800759e <sbrk_aligned+0x22>
 80075b8:	e7ef      	b.n	800759a <sbrk_aligned+0x1e>
 80075ba:	bf00      	nop
 80075bc:	20000538 	.word	0x20000538

080075c0 <_malloc_r>:
 80075c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c4:	1ccd      	adds	r5, r1, #3
 80075c6:	f025 0503 	bic.w	r5, r5, #3
 80075ca:	3508      	adds	r5, #8
 80075cc:	2d0c      	cmp	r5, #12
 80075ce:	bf38      	it	cc
 80075d0:	250c      	movcc	r5, #12
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	4606      	mov	r6, r0
 80075d6:	db01      	blt.n	80075dc <_malloc_r+0x1c>
 80075d8:	42a9      	cmp	r1, r5
 80075da:	d904      	bls.n	80075e6 <_malloc_r+0x26>
 80075dc:	230c      	movs	r3, #12
 80075de:	6033      	str	r3, [r6, #0]
 80075e0:	2000      	movs	r0, #0
 80075e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076bc <_malloc_r+0xfc>
 80075ea:	f000 f869 	bl	80076c0 <__malloc_lock>
 80075ee:	f8d8 3000 	ldr.w	r3, [r8]
 80075f2:	461c      	mov	r4, r3
 80075f4:	bb44      	cbnz	r4, 8007648 <_malloc_r+0x88>
 80075f6:	4629      	mov	r1, r5
 80075f8:	4630      	mov	r0, r6
 80075fa:	f7ff ffbf 	bl	800757c <sbrk_aligned>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	4604      	mov	r4, r0
 8007602:	d158      	bne.n	80076b6 <_malloc_r+0xf6>
 8007604:	f8d8 4000 	ldr.w	r4, [r8]
 8007608:	4627      	mov	r7, r4
 800760a:	2f00      	cmp	r7, #0
 800760c:	d143      	bne.n	8007696 <_malloc_r+0xd6>
 800760e:	2c00      	cmp	r4, #0
 8007610:	d04b      	beq.n	80076aa <_malloc_r+0xea>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	4639      	mov	r1, r7
 8007616:	4630      	mov	r0, r6
 8007618:	eb04 0903 	add.w	r9, r4, r3
 800761c:	f000 fdf4 	bl	8008208 <_sbrk_r>
 8007620:	4581      	cmp	r9, r0
 8007622:	d142      	bne.n	80076aa <_malloc_r+0xea>
 8007624:	6821      	ldr	r1, [r4, #0]
 8007626:	1a6d      	subs	r5, r5, r1
 8007628:	4629      	mov	r1, r5
 800762a:	4630      	mov	r0, r6
 800762c:	f7ff ffa6 	bl	800757c <sbrk_aligned>
 8007630:	3001      	adds	r0, #1
 8007632:	d03a      	beq.n	80076aa <_malloc_r+0xea>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	442b      	add	r3, r5
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	f8d8 3000 	ldr.w	r3, [r8]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	bb62      	cbnz	r2, 800769c <_malloc_r+0xdc>
 8007642:	f8c8 7000 	str.w	r7, [r8]
 8007646:	e00f      	b.n	8007668 <_malloc_r+0xa8>
 8007648:	6822      	ldr	r2, [r4, #0]
 800764a:	1b52      	subs	r2, r2, r5
 800764c:	d420      	bmi.n	8007690 <_malloc_r+0xd0>
 800764e:	2a0b      	cmp	r2, #11
 8007650:	d917      	bls.n	8007682 <_malloc_r+0xc2>
 8007652:	1961      	adds	r1, r4, r5
 8007654:	42a3      	cmp	r3, r4
 8007656:	6025      	str	r5, [r4, #0]
 8007658:	bf18      	it	ne
 800765a:	6059      	strne	r1, [r3, #4]
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	bf08      	it	eq
 8007660:	f8c8 1000 	streq.w	r1, [r8]
 8007664:	5162      	str	r2, [r4, r5]
 8007666:	604b      	str	r3, [r1, #4]
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f82f 	bl	80076cc <__malloc_unlock>
 800766e:	f104 000b 	add.w	r0, r4, #11
 8007672:	1d23      	adds	r3, r4, #4
 8007674:	f020 0007 	bic.w	r0, r0, #7
 8007678:	1ac2      	subs	r2, r0, r3
 800767a:	bf1c      	itt	ne
 800767c:	1a1b      	subne	r3, r3, r0
 800767e:	50a3      	strne	r3, [r4, r2]
 8007680:	e7af      	b.n	80075e2 <_malloc_r+0x22>
 8007682:	6862      	ldr	r2, [r4, #4]
 8007684:	42a3      	cmp	r3, r4
 8007686:	bf0c      	ite	eq
 8007688:	f8c8 2000 	streq.w	r2, [r8]
 800768c:	605a      	strne	r2, [r3, #4]
 800768e:	e7eb      	b.n	8007668 <_malloc_r+0xa8>
 8007690:	4623      	mov	r3, r4
 8007692:	6864      	ldr	r4, [r4, #4]
 8007694:	e7ae      	b.n	80075f4 <_malloc_r+0x34>
 8007696:	463c      	mov	r4, r7
 8007698:	687f      	ldr	r7, [r7, #4]
 800769a:	e7b6      	b.n	800760a <_malloc_r+0x4a>
 800769c:	461a      	mov	r2, r3
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	d1fb      	bne.n	800769c <_malloc_r+0xdc>
 80076a4:	2300      	movs	r3, #0
 80076a6:	6053      	str	r3, [r2, #4]
 80076a8:	e7de      	b.n	8007668 <_malloc_r+0xa8>
 80076aa:	230c      	movs	r3, #12
 80076ac:	6033      	str	r3, [r6, #0]
 80076ae:	4630      	mov	r0, r6
 80076b0:	f000 f80c 	bl	80076cc <__malloc_unlock>
 80076b4:	e794      	b.n	80075e0 <_malloc_r+0x20>
 80076b6:	6005      	str	r5, [r0, #0]
 80076b8:	e7d6      	b.n	8007668 <_malloc_r+0xa8>
 80076ba:	bf00      	nop
 80076bc:	2000053c 	.word	0x2000053c

080076c0 <__malloc_lock>:
 80076c0:	4801      	ldr	r0, [pc, #4]	@ (80076c8 <__malloc_lock+0x8>)
 80076c2:	f7ff b8ae 	b.w	8006822 <__retarget_lock_acquire_recursive>
 80076c6:	bf00      	nop
 80076c8:	20000534 	.word	0x20000534

080076cc <__malloc_unlock>:
 80076cc:	4801      	ldr	r0, [pc, #4]	@ (80076d4 <__malloc_unlock+0x8>)
 80076ce:	f7ff b8a9 	b.w	8006824 <__retarget_lock_release_recursive>
 80076d2:	bf00      	nop
 80076d4:	20000534 	.word	0x20000534

080076d8 <_Balloc>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	69c6      	ldr	r6, [r0, #28]
 80076dc:	4604      	mov	r4, r0
 80076de:	460d      	mov	r5, r1
 80076e0:	b976      	cbnz	r6, 8007700 <_Balloc+0x28>
 80076e2:	2010      	movs	r0, #16
 80076e4:	f7ff ff42 	bl	800756c <malloc>
 80076e8:	4602      	mov	r2, r0
 80076ea:	61e0      	str	r0, [r4, #28]
 80076ec:	b920      	cbnz	r0, 80076f8 <_Balloc+0x20>
 80076ee:	4b18      	ldr	r3, [pc, #96]	@ (8007750 <_Balloc+0x78>)
 80076f0:	4818      	ldr	r0, [pc, #96]	@ (8007754 <_Balloc+0x7c>)
 80076f2:	216b      	movs	r1, #107	@ 0x6b
 80076f4:	f000 fda6 	bl	8008244 <__assert_func>
 80076f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076fc:	6006      	str	r6, [r0, #0]
 80076fe:	60c6      	str	r6, [r0, #12]
 8007700:	69e6      	ldr	r6, [r4, #28]
 8007702:	68f3      	ldr	r3, [r6, #12]
 8007704:	b183      	cbz	r3, 8007728 <_Balloc+0x50>
 8007706:	69e3      	ldr	r3, [r4, #28]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800770e:	b9b8      	cbnz	r0, 8007740 <_Balloc+0x68>
 8007710:	2101      	movs	r1, #1
 8007712:	fa01 f605 	lsl.w	r6, r1, r5
 8007716:	1d72      	adds	r2, r6, #5
 8007718:	0092      	lsls	r2, r2, #2
 800771a:	4620      	mov	r0, r4
 800771c:	f000 fdb0 	bl	8008280 <_calloc_r>
 8007720:	b160      	cbz	r0, 800773c <_Balloc+0x64>
 8007722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007726:	e00e      	b.n	8007746 <_Balloc+0x6e>
 8007728:	2221      	movs	r2, #33	@ 0x21
 800772a:	2104      	movs	r1, #4
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fda7 	bl	8008280 <_calloc_r>
 8007732:	69e3      	ldr	r3, [r4, #28]
 8007734:	60f0      	str	r0, [r6, #12]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e4      	bne.n	8007706 <_Balloc+0x2e>
 800773c:	2000      	movs	r0, #0
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	6802      	ldr	r2, [r0, #0]
 8007742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007746:	2300      	movs	r3, #0
 8007748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800774c:	e7f7      	b.n	800773e <_Balloc+0x66>
 800774e:	bf00      	nop
 8007750:	080089cd 	.word	0x080089cd
 8007754:	08008a4d 	.word	0x08008a4d

08007758 <_Bfree>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	69c6      	ldr	r6, [r0, #28]
 800775c:	4605      	mov	r5, r0
 800775e:	460c      	mov	r4, r1
 8007760:	b976      	cbnz	r6, 8007780 <_Bfree+0x28>
 8007762:	2010      	movs	r0, #16
 8007764:	f7ff ff02 	bl	800756c <malloc>
 8007768:	4602      	mov	r2, r0
 800776a:	61e8      	str	r0, [r5, #28]
 800776c:	b920      	cbnz	r0, 8007778 <_Bfree+0x20>
 800776e:	4b09      	ldr	r3, [pc, #36]	@ (8007794 <_Bfree+0x3c>)
 8007770:	4809      	ldr	r0, [pc, #36]	@ (8007798 <_Bfree+0x40>)
 8007772:	218f      	movs	r1, #143	@ 0x8f
 8007774:	f000 fd66 	bl	8008244 <__assert_func>
 8007778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800777c:	6006      	str	r6, [r0, #0]
 800777e:	60c6      	str	r6, [r0, #12]
 8007780:	b13c      	cbz	r4, 8007792 <_Bfree+0x3a>
 8007782:	69eb      	ldr	r3, [r5, #28]
 8007784:	6862      	ldr	r2, [r4, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800778c:	6021      	str	r1, [r4, #0]
 800778e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	080089cd 	.word	0x080089cd
 8007798:	08008a4d 	.word	0x08008a4d

0800779c <__multadd>:
 800779c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a0:	690d      	ldr	r5, [r1, #16]
 80077a2:	4607      	mov	r7, r0
 80077a4:	460c      	mov	r4, r1
 80077a6:	461e      	mov	r6, r3
 80077a8:	f101 0c14 	add.w	ip, r1, #20
 80077ac:	2000      	movs	r0, #0
 80077ae:	f8dc 3000 	ldr.w	r3, [ip]
 80077b2:	b299      	uxth	r1, r3
 80077b4:	fb02 6101 	mla	r1, r2, r1, r6
 80077b8:	0c1e      	lsrs	r6, r3, #16
 80077ba:	0c0b      	lsrs	r3, r1, #16
 80077bc:	fb02 3306 	mla	r3, r2, r6, r3
 80077c0:	b289      	uxth	r1, r1
 80077c2:	3001      	adds	r0, #1
 80077c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077c8:	4285      	cmp	r5, r0
 80077ca:	f84c 1b04 	str.w	r1, [ip], #4
 80077ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077d2:	dcec      	bgt.n	80077ae <__multadd+0x12>
 80077d4:	b30e      	cbz	r6, 800781a <__multadd+0x7e>
 80077d6:	68a3      	ldr	r3, [r4, #8]
 80077d8:	42ab      	cmp	r3, r5
 80077da:	dc19      	bgt.n	8007810 <__multadd+0x74>
 80077dc:	6861      	ldr	r1, [r4, #4]
 80077de:	4638      	mov	r0, r7
 80077e0:	3101      	adds	r1, #1
 80077e2:	f7ff ff79 	bl	80076d8 <_Balloc>
 80077e6:	4680      	mov	r8, r0
 80077e8:	b928      	cbnz	r0, 80077f6 <__multadd+0x5a>
 80077ea:	4602      	mov	r2, r0
 80077ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <__multadd+0x84>)
 80077ee:	480d      	ldr	r0, [pc, #52]	@ (8007824 <__multadd+0x88>)
 80077f0:	21ba      	movs	r1, #186	@ 0xba
 80077f2:	f000 fd27 	bl	8008244 <__assert_func>
 80077f6:	6922      	ldr	r2, [r4, #16]
 80077f8:	3202      	adds	r2, #2
 80077fa:	f104 010c 	add.w	r1, r4, #12
 80077fe:	0092      	lsls	r2, r2, #2
 8007800:	300c      	adds	r0, #12
 8007802:	f000 fd11 	bl	8008228 <memcpy>
 8007806:	4621      	mov	r1, r4
 8007808:	4638      	mov	r0, r7
 800780a:	f7ff ffa5 	bl	8007758 <_Bfree>
 800780e:	4644      	mov	r4, r8
 8007810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007814:	3501      	adds	r5, #1
 8007816:	615e      	str	r6, [r3, #20]
 8007818:	6125      	str	r5, [r4, #16]
 800781a:	4620      	mov	r0, r4
 800781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007820:	08008a3c 	.word	0x08008a3c
 8007824:	08008a4d 	.word	0x08008a4d

08007828 <__hi0bits>:
 8007828:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800782c:	4603      	mov	r3, r0
 800782e:	bf36      	itet	cc
 8007830:	0403      	lslcc	r3, r0, #16
 8007832:	2000      	movcs	r0, #0
 8007834:	2010      	movcc	r0, #16
 8007836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800783a:	bf3c      	itt	cc
 800783c:	021b      	lslcc	r3, r3, #8
 800783e:	3008      	addcc	r0, #8
 8007840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007844:	bf3c      	itt	cc
 8007846:	011b      	lslcc	r3, r3, #4
 8007848:	3004      	addcc	r0, #4
 800784a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784e:	bf3c      	itt	cc
 8007850:	009b      	lslcc	r3, r3, #2
 8007852:	3002      	addcc	r0, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	db05      	blt.n	8007864 <__hi0bits+0x3c>
 8007858:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800785c:	f100 0001 	add.w	r0, r0, #1
 8007860:	bf08      	it	eq
 8007862:	2020      	moveq	r0, #32
 8007864:	4770      	bx	lr

08007866 <__lo0bits>:
 8007866:	6803      	ldr	r3, [r0, #0]
 8007868:	4602      	mov	r2, r0
 800786a:	f013 0007 	ands.w	r0, r3, #7
 800786e:	d00b      	beq.n	8007888 <__lo0bits+0x22>
 8007870:	07d9      	lsls	r1, r3, #31
 8007872:	d421      	bmi.n	80078b8 <__lo0bits+0x52>
 8007874:	0798      	lsls	r0, r3, #30
 8007876:	bf49      	itett	mi
 8007878:	085b      	lsrmi	r3, r3, #1
 800787a:	089b      	lsrpl	r3, r3, #2
 800787c:	2001      	movmi	r0, #1
 800787e:	6013      	strmi	r3, [r2, #0]
 8007880:	bf5c      	itt	pl
 8007882:	6013      	strpl	r3, [r2, #0]
 8007884:	2002      	movpl	r0, #2
 8007886:	4770      	bx	lr
 8007888:	b299      	uxth	r1, r3
 800788a:	b909      	cbnz	r1, 8007890 <__lo0bits+0x2a>
 800788c:	0c1b      	lsrs	r3, r3, #16
 800788e:	2010      	movs	r0, #16
 8007890:	b2d9      	uxtb	r1, r3
 8007892:	b909      	cbnz	r1, 8007898 <__lo0bits+0x32>
 8007894:	3008      	adds	r0, #8
 8007896:	0a1b      	lsrs	r3, r3, #8
 8007898:	0719      	lsls	r1, r3, #28
 800789a:	bf04      	itt	eq
 800789c:	091b      	lsreq	r3, r3, #4
 800789e:	3004      	addeq	r0, #4
 80078a0:	0799      	lsls	r1, r3, #30
 80078a2:	bf04      	itt	eq
 80078a4:	089b      	lsreq	r3, r3, #2
 80078a6:	3002      	addeq	r0, #2
 80078a8:	07d9      	lsls	r1, r3, #31
 80078aa:	d403      	bmi.n	80078b4 <__lo0bits+0x4e>
 80078ac:	085b      	lsrs	r3, r3, #1
 80078ae:	f100 0001 	add.w	r0, r0, #1
 80078b2:	d003      	beq.n	80078bc <__lo0bits+0x56>
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	4770      	bx	lr
 80078b8:	2000      	movs	r0, #0
 80078ba:	4770      	bx	lr
 80078bc:	2020      	movs	r0, #32
 80078be:	4770      	bx	lr

080078c0 <__i2b>:
 80078c0:	b510      	push	{r4, lr}
 80078c2:	460c      	mov	r4, r1
 80078c4:	2101      	movs	r1, #1
 80078c6:	f7ff ff07 	bl	80076d8 <_Balloc>
 80078ca:	4602      	mov	r2, r0
 80078cc:	b928      	cbnz	r0, 80078da <__i2b+0x1a>
 80078ce:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <__i2b+0x24>)
 80078d0:	4805      	ldr	r0, [pc, #20]	@ (80078e8 <__i2b+0x28>)
 80078d2:	f240 1145 	movw	r1, #325	@ 0x145
 80078d6:	f000 fcb5 	bl	8008244 <__assert_func>
 80078da:	2301      	movs	r3, #1
 80078dc:	6144      	str	r4, [r0, #20]
 80078de:	6103      	str	r3, [r0, #16]
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	bf00      	nop
 80078e4:	08008a3c 	.word	0x08008a3c
 80078e8:	08008a4d 	.word	0x08008a4d

080078ec <__multiply>:
 80078ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	4617      	mov	r7, r2
 80078f2:	690a      	ldr	r2, [r1, #16]
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	bfa8      	it	ge
 80078fa:	463b      	movge	r3, r7
 80078fc:	4689      	mov	r9, r1
 80078fe:	bfa4      	itt	ge
 8007900:	460f      	movge	r7, r1
 8007902:	4699      	movge	r9, r3
 8007904:	693d      	ldr	r5, [r7, #16]
 8007906:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	eb05 060a 	add.w	r6, r5, sl
 8007912:	42b3      	cmp	r3, r6
 8007914:	b085      	sub	sp, #20
 8007916:	bfb8      	it	lt
 8007918:	3101      	addlt	r1, #1
 800791a:	f7ff fedd 	bl	80076d8 <_Balloc>
 800791e:	b930      	cbnz	r0, 800792e <__multiply+0x42>
 8007920:	4602      	mov	r2, r0
 8007922:	4b41      	ldr	r3, [pc, #260]	@ (8007a28 <__multiply+0x13c>)
 8007924:	4841      	ldr	r0, [pc, #260]	@ (8007a2c <__multiply+0x140>)
 8007926:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800792a:	f000 fc8b 	bl	8008244 <__assert_func>
 800792e:	f100 0414 	add.w	r4, r0, #20
 8007932:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007936:	4623      	mov	r3, r4
 8007938:	2200      	movs	r2, #0
 800793a:	4573      	cmp	r3, lr
 800793c:	d320      	bcc.n	8007980 <__multiply+0x94>
 800793e:	f107 0814 	add.w	r8, r7, #20
 8007942:	f109 0114 	add.w	r1, r9, #20
 8007946:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800794a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800794e:	9302      	str	r3, [sp, #8]
 8007950:	1beb      	subs	r3, r5, r7
 8007952:	3b15      	subs	r3, #21
 8007954:	f023 0303 	bic.w	r3, r3, #3
 8007958:	3304      	adds	r3, #4
 800795a:	3715      	adds	r7, #21
 800795c:	42bd      	cmp	r5, r7
 800795e:	bf38      	it	cc
 8007960:	2304      	movcc	r3, #4
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	9b02      	ldr	r3, [sp, #8]
 8007966:	9103      	str	r1, [sp, #12]
 8007968:	428b      	cmp	r3, r1
 800796a:	d80c      	bhi.n	8007986 <__multiply+0x9a>
 800796c:	2e00      	cmp	r6, #0
 800796e:	dd03      	ble.n	8007978 <__multiply+0x8c>
 8007970:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007974:	2b00      	cmp	r3, #0
 8007976:	d055      	beq.n	8007a24 <__multiply+0x138>
 8007978:	6106      	str	r6, [r0, #16]
 800797a:	b005      	add	sp, #20
 800797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007980:	f843 2b04 	str.w	r2, [r3], #4
 8007984:	e7d9      	b.n	800793a <__multiply+0x4e>
 8007986:	f8b1 a000 	ldrh.w	sl, [r1]
 800798a:	f1ba 0f00 	cmp.w	sl, #0
 800798e:	d01f      	beq.n	80079d0 <__multiply+0xe4>
 8007990:	46c4      	mov	ip, r8
 8007992:	46a1      	mov	r9, r4
 8007994:	2700      	movs	r7, #0
 8007996:	f85c 2b04 	ldr.w	r2, [ip], #4
 800799a:	f8d9 3000 	ldr.w	r3, [r9]
 800799e:	fa1f fb82 	uxth.w	fp, r2
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80079a8:	443b      	add	r3, r7
 80079aa:	f8d9 7000 	ldr.w	r7, [r9]
 80079ae:	0c12      	lsrs	r2, r2, #16
 80079b0:	0c3f      	lsrs	r7, r7, #16
 80079b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80079b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c0:	4565      	cmp	r5, ip
 80079c2:	f849 3b04 	str.w	r3, [r9], #4
 80079c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80079ca:	d8e4      	bhi.n	8007996 <__multiply+0xaa>
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	50e7      	str	r7, [r4, r3]
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079d6:	3104      	adds	r1, #4
 80079d8:	f1b9 0f00 	cmp.w	r9, #0
 80079dc:	d020      	beq.n	8007a20 <__multiply+0x134>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	4647      	mov	r7, r8
 80079e2:	46a4      	mov	ip, r4
 80079e4:	f04f 0a00 	mov.w	sl, #0
 80079e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80079ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80079f0:	fb09 220b 	mla	r2, r9, fp, r2
 80079f4:	4452      	add	r2, sl
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079fc:	f84c 3b04 	str.w	r3, [ip], #4
 8007a00:	f857 3b04 	ldr.w	r3, [r7], #4
 8007a04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a08:	f8bc 3000 	ldrh.w	r3, [ip]
 8007a0c:	fb09 330a 	mla	r3, r9, sl, r3
 8007a10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007a14:	42bd      	cmp	r5, r7
 8007a16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a1a:	d8e5      	bhi.n	80079e8 <__multiply+0xfc>
 8007a1c:	9a01      	ldr	r2, [sp, #4]
 8007a1e:	50a3      	str	r3, [r4, r2]
 8007a20:	3404      	adds	r4, #4
 8007a22:	e79f      	b.n	8007964 <__multiply+0x78>
 8007a24:	3e01      	subs	r6, #1
 8007a26:	e7a1      	b.n	800796c <__multiply+0x80>
 8007a28:	08008a3c 	.word	0x08008a3c
 8007a2c:	08008a4d 	.word	0x08008a4d

08007a30 <__pow5mult>:
 8007a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a34:	4615      	mov	r5, r2
 8007a36:	f012 0203 	ands.w	r2, r2, #3
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	460e      	mov	r6, r1
 8007a3e:	d007      	beq.n	8007a50 <__pow5mult+0x20>
 8007a40:	4c25      	ldr	r4, [pc, #148]	@ (8007ad8 <__pow5mult+0xa8>)
 8007a42:	3a01      	subs	r2, #1
 8007a44:	2300      	movs	r3, #0
 8007a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a4a:	f7ff fea7 	bl	800779c <__multadd>
 8007a4e:	4606      	mov	r6, r0
 8007a50:	10ad      	asrs	r5, r5, #2
 8007a52:	d03d      	beq.n	8007ad0 <__pow5mult+0xa0>
 8007a54:	69fc      	ldr	r4, [r7, #28]
 8007a56:	b97c      	cbnz	r4, 8007a78 <__pow5mult+0x48>
 8007a58:	2010      	movs	r0, #16
 8007a5a:	f7ff fd87 	bl	800756c <malloc>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	61f8      	str	r0, [r7, #28]
 8007a62:	b928      	cbnz	r0, 8007a70 <__pow5mult+0x40>
 8007a64:	4b1d      	ldr	r3, [pc, #116]	@ (8007adc <__pow5mult+0xac>)
 8007a66:	481e      	ldr	r0, [pc, #120]	@ (8007ae0 <__pow5mult+0xb0>)
 8007a68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a6c:	f000 fbea 	bl	8008244 <__assert_func>
 8007a70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a74:	6004      	str	r4, [r0, #0]
 8007a76:	60c4      	str	r4, [r0, #12]
 8007a78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a80:	b94c      	cbnz	r4, 8007a96 <__pow5mult+0x66>
 8007a82:	f240 2171 	movw	r1, #625	@ 0x271
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7ff ff1a 	bl	80078c0 <__i2b>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a92:	4604      	mov	r4, r0
 8007a94:	6003      	str	r3, [r0, #0]
 8007a96:	f04f 0900 	mov.w	r9, #0
 8007a9a:	07eb      	lsls	r3, r5, #31
 8007a9c:	d50a      	bpl.n	8007ab4 <__pow5mult+0x84>
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4622      	mov	r2, r4
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	f7ff ff22 	bl	80078ec <__multiply>
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4680      	mov	r8, r0
 8007aac:	4638      	mov	r0, r7
 8007aae:	f7ff fe53 	bl	8007758 <_Bfree>
 8007ab2:	4646      	mov	r6, r8
 8007ab4:	106d      	asrs	r5, r5, #1
 8007ab6:	d00b      	beq.n	8007ad0 <__pow5mult+0xa0>
 8007ab8:	6820      	ldr	r0, [r4, #0]
 8007aba:	b938      	cbnz	r0, 8007acc <__pow5mult+0x9c>
 8007abc:	4622      	mov	r2, r4
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff ff13 	bl	80078ec <__multiply>
 8007ac6:	6020      	str	r0, [r4, #0]
 8007ac8:	f8c0 9000 	str.w	r9, [r0]
 8007acc:	4604      	mov	r4, r0
 8007ace:	e7e4      	b.n	8007a9a <__pow5mult+0x6a>
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08008b00 	.word	0x08008b00
 8007adc:	080089cd 	.word	0x080089cd
 8007ae0:	08008a4d 	.word	0x08008a4d

08007ae4 <__lshift>:
 8007ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	460c      	mov	r4, r1
 8007aea:	6849      	ldr	r1, [r1, #4]
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007af2:	68a3      	ldr	r3, [r4, #8]
 8007af4:	4607      	mov	r7, r0
 8007af6:	4691      	mov	r9, r2
 8007af8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007afc:	f108 0601 	add.w	r6, r8, #1
 8007b00:	42b3      	cmp	r3, r6
 8007b02:	db0b      	blt.n	8007b1c <__lshift+0x38>
 8007b04:	4638      	mov	r0, r7
 8007b06:	f7ff fde7 	bl	80076d8 <_Balloc>
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	b948      	cbnz	r0, 8007b22 <__lshift+0x3e>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	4b28      	ldr	r3, [pc, #160]	@ (8007bb4 <__lshift+0xd0>)
 8007b12:	4829      	ldr	r0, [pc, #164]	@ (8007bb8 <__lshift+0xd4>)
 8007b14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b18:	f000 fb94 	bl	8008244 <__assert_func>
 8007b1c:	3101      	adds	r1, #1
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	e7ee      	b.n	8007b00 <__lshift+0x1c>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f100 0114 	add.w	r1, r0, #20
 8007b28:	f100 0210 	add.w	r2, r0, #16
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	4553      	cmp	r3, sl
 8007b30:	db33      	blt.n	8007b9a <__lshift+0xb6>
 8007b32:	6920      	ldr	r0, [r4, #16]
 8007b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b38:	f104 0314 	add.w	r3, r4, #20
 8007b3c:	f019 091f 	ands.w	r9, r9, #31
 8007b40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b48:	d02b      	beq.n	8007ba2 <__lshift+0xbe>
 8007b4a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b4e:	468a      	mov	sl, r1
 8007b50:	2200      	movs	r2, #0
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	fa00 f009 	lsl.w	r0, r0, r9
 8007b58:	4310      	orrs	r0, r2
 8007b5a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b62:	459c      	cmp	ip, r3
 8007b64:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b68:	d8f3      	bhi.n	8007b52 <__lshift+0x6e>
 8007b6a:	ebac 0304 	sub.w	r3, ip, r4
 8007b6e:	3b15      	subs	r3, #21
 8007b70:	f023 0303 	bic.w	r3, r3, #3
 8007b74:	3304      	adds	r3, #4
 8007b76:	f104 0015 	add.w	r0, r4, #21
 8007b7a:	4560      	cmp	r0, ip
 8007b7c:	bf88      	it	hi
 8007b7e:	2304      	movhi	r3, #4
 8007b80:	50ca      	str	r2, [r1, r3]
 8007b82:	b10a      	cbz	r2, 8007b88 <__lshift+0xa4>
 8007b84:	f108 0602 	add.w	r6, r8, #2
 8007b88:	3e01      	subs	r6, #1
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	612e      	str	r6, [r5, #16]
 8007b8e:	4621      	mov	r1, r4
 8007b90:	f7ff fde2 	bl	8007758 <_Bfree>
 8007b94:	4628      	mov	r0, r5
 8007b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	e7c5      	b.n	8007b2e <__lshift+0x4a>
 8007ba2:	3904      	subs	r1, #4
 8007ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bac:	459c      	cmp	ip, r3
 8007bae:	d8f9      	bhi.n	8007ba4 <__lshift+0xc0>
 8007bb0:	e7ea      	b.n	8007b88 <__lshift+0xa4>
 8007bb2:	bf00      	nop
 8007bb4:	08008a3c 	.word	0x08008a3c
 8007bb8:	08008a4d 	.word	0x08008a4d

08007bbc <__mcmp>:
 8007bbc:	690a      	ldr	r2, [r1, #16]
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	6900      	ldr	r0, [r0, #16]
 8007bc2:	1a80      	subs	r0, r0, r2
 8007bc4:	b530      	push	{r4, r5, lr}
 8007bc6:	d10e      	bne.n	8007be6 <__mcmp+0x2a>
 8007bc8:	3314      	adds	r3, #20
 8007bca:	3114      	adds	r1, #20
 8007bcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007bd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007bd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bdc:	4295      	cmp	r5, r2
 8007bde:	d003      	beq.n	8007be8 <__mcmp+0x2c>
 8007be0:	d205      	bcs.n	8007bee <__mcmp+0x32>
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007be6:	bd30      	pop	{r4, r5, pc}
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d3f3      	bcc.n	8007bd4 <__mcmp+0x18>
 8007bec:	e7fb      	b.n	8007be6 <__mcmp+0x2a>
 8007bee:	2001      	movs	r0, #1
 8007bf0:	e7f9      	b.n	8007be6 <__mcmp+0x2a>
	...

08007bf4 <__mdiff>:
 8007bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	4689      	mov	r9, r1
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4648      	mov	r0, r9
 8007c00:	4614      	mov	r4, r2
 8007c02:	f7ff ffdb 	bl	8007bbc <__mcmp>
 8007c06:	1e05      	subs	r5, r0, #0
 8007c08:	d112      	bne.n	8007c30 <__mdiff+0x3c>
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7ff fd63 	bl	80076d8 <_Balloc>
 8007c12:	4602      	mov	r2, r0
 8007c14:	b928      	cbnz	r0, 8007c22 <__mdiff+0x2e>
 8007c16:	4b3f      	ldr	r3, [pc, #252]	@ (8007d14 <__mdiff+0x120>)
 8007c18:	f240 2137 	movw	r1, #567	@ 0x237
 8007c1c:	483e      	ldr	r0, [pc, #248]	@ (8007d18 <__mdiff+0x124>)
 8007c1e:	f000 fb11 	bl	8008244 <__assert_func>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c28:	4610      	mov	r0, r2
 8007c2a:	b003      	add	sp, #12
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	bfbc      	itt	lt
 8007c32:	464b      	movlt	r3, r9
 8007c34:	46a1      	movlt	r9, r4
 8007c36:	4630      	mov	r0, r6
 8007c38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c3c:	bfba      	itte	lt
 8007c3e:	461c      	movlt	r4, r3
 8007c40:	2501      	movlt	r5, #1
 8007c42:	2500      	movge	r5, #0
 8007c44:	f7ff fd48 	bl	80076d8 <_Balloc>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	b918      	cbnz	r0, 8007c54 <__mdiff+0x60>
 8007c4c:	4b31      	ldr	r3, [pc, #196]	@ (8007d14 <__mdiff+0x120>)
 8007c4e:	f240 2145 	movw	r1, #581	@ 0x245
 8007c52:	e7e3      	b.n	8007c1c <__mdiff+0x28>
 8007c54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c58:	6926      	ldr	r6, [r4, #16]
 8007c5a:	60c5      	str	r5, [r0, #12]
 8007c5c:	f109 0310 	add.w	r3, r9, #16
 8007c60:	f109 0514 	add.w	r5, r9, #20
 8007c64:	f104 0e14 	add.w	lr, r4, #20
 8007c68:	f100 0b14 	add.w	fp, r0, #20
 8007c6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	46d9      	mov	r9, fp
 8007c78:	f04f 0c00 	mov.w	ip, #0
 8007c7c:	9b01      	ldr	r3, [sp, #4]
 8007c7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	fa1f f38a 	uxth.w	r3, sl
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	b283      	uxth	r3, r0
 8007c90:	1acb      	subs	r3, r1, r3
 8007c92:	0c00      	lsrs	r0, r0, #16
 8007c94:	4463      	add	r3, ip
 8007c96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ca4:	4576      	cmp	r6, lr
 8007ca6:	f849 3b04 	str.w	r3, [r9], #4
 8007caa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cae:	d8e5      	bhi.n	8007c7c <__mdiff+0x88>
 8007cb0:	1b33      	subs	r3, r6, r4
 8007cb2:	3b15      	subs	r3, #21
 8007cb4:	f023 0303 	bic.w	r3, r3, #3
 8007cb8:	3415      	adds	r4, #21
 8007cba:	3304      	adds	r3, #4
 8007cbc:	42a6      	cmp	r6, r4
 8007cbe:	bf38      	it	cc
 8007cc0:	2304      	movcc	r3, #4
 8007cc2:	441d      	add	r5, r3
 8007cc4:	445b      	add	r3, fp
 8007cc6:	461e      	mov	r6, r3
 8007cc8:	462c      	mov	r4, r5
 8007cca:	4544      	cmp	r4, r8
 8007ccc:	d30e      	bcc.n	8007cec <__mdiff+0xf8>
 8007cce:	f108 0103 	add.w	r1, r8, #3
 8007cd2:	1b49      	subs	r1, r1, r5
 8007cd4:	f021 0103 	bic.w	r1, r1, #3
 8007cd8:	3d03      	subs	r5, #3
 8007cda:	45a8      	cmp	r8, r5
 8007cdc:	bf38      	it	cc
 8007cde:	2100      	movcc	r1, #0
 8007ce0:	440b      	add	r3, r1
 8007ce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ce6:	b191      	cbz	r1, 8007d0e <__mdiff+0x11a>
 8007ce8:	6117      	str	r7, [r2, #16]
 8007cea:	e79d      	b.n	8007c28 <__mdiff+0x34>
 8007cec:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cf0:	46e6      	mov	lr, ip
 8007cf2:	0c08      	lsrs	r0, r1, #16
 8007cf4:	fa1c fc81 	uxtah	ip, ip, r1
 8007cf8:	4471      	add	r1, lr
 8007cfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cfe:	b289      	uxth	r1, r1
 8007d00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d04:	f846 1b04 	str.w	r1, [r6], #4
 8007d08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d0c:	e7dd      	b.n	8007cca <__mdiff+0xd6>
 8007d0e:	3f01      	subs	r7, #1
 8007d10:	e7e7      	b.n	8007ce2 <__mdiff+0xee>
 8007d12:	bf00      	nop
 8007d14:	08008a3c 	.word	0x08008a3c
 8007d18:	08008a4d 	.word	0x08008a4d

08007d1c <__d2b>:
 8007d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	460f      	mov	r7, r1
 8007d22:	2101      	movs	r1, #1
 8007d24:	ec59 8b10 	vmov	r8, r9, d0
 8007d28:	4616      	mov	r6, r2
 8007d2a:	f7ff fcd5 	bl	80076d8 <_Balloc>
 8007d2e:	4604      	mov	r4, r0
 8007d30:	b930      	cbnz	r0, 8007d40 <__d2b+0x24>
 8007d32:	4602      	mov	r2, r0
 8007d34:	4b23      	ldr	r3, [pc, #140]	@ (8007dc4 <__d2b+0xa8>)
 8007d36:	4824      	ldr	r0, [pc, #144]	@ (8007dc8 <__d2b+0xac>)
 8007d38:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d3c:	f000 fa82 	bl	8008244 <__assert_func>
 8007d40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d48:	b10d      	cbz	r5, 8007d4e <__d2b+0x32>
 8007d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	f1b8 0300 	subs.w	r3, r8, #0
 8007d54:	d023      	beq.n	8007d9e <__d2b+0x82>
 8007d56:	4668      	mov	r0, sp
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	f7ff fd84 	bl	8007866 <__lo0bits>
 8007d5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d62:	b1d0      	cbz	r0, 8007d9a <__d2b+0x7e>
 8007d64:	f1c0 0320 	rsb	r3, r0, #32
 8007d68:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	40c2      	lsrs	r2, r0
 8007d70:	6163      	str	r3, [r4, #20]
 8007d72:	9201      	str	r2, [sp, #4]
 8007d74:	9b01      	ldr	r3, [sp, #4]
 8007d76:	61a3      	str	r3, [r4, #24]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2201      	moveq	r2, #1
 8007d7e:	2202      	movne	r2, #2
 8007d80:	6122      	str	r2, [r4, #16]
 8007d82:	b1a5      	cbz	r5, 8007dae <__d2b+0x92>
 8007d84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d88:	4405      	add	r5, r0
 8007d8a:	603d      	str	r5, [r7, #0]
 8007d8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d90:	6030      	str	r0, [r6, #0]
 8007d92:	4620      	mov	r0, r4
 8007d94:	b003      	add	sp, #12
 8007d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d9a:	6161      	str	r1, [r4, #20]
 8007d9c:	e7ea      	b.n	8007d74 <__d2b+0x58>
 8007d9e:	a801      	add	r0, sp, #4
 8007da0:	f7ff fd61 	bl	8007866 <__lo0bits>
 8007da4:	9b01      	ldr	r3, [sp, #4]
 8007da6:	6163      	str	r3, [r4, #20]
 8007da8:	3020      	adds	r0, #32
 8007daa:	2201      	movs	r2, #1
 8007dac:	e7e8      	b.n	8007d80 <__d2b+0x64>
 8007dae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007db2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007db6:	6038      	str	r0, [r7, #0]
 8007db8:	6918      	ldr	r0, [r3, #16]
 8007dba:	f7ff fd35 	bl	8007828 <__hi0bits>
 8007dbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dc2:	e7e5      	b.n	8007d90 <__d2b+0x74>
 8007dc4:	08008a3c 	.word	0x08008a3c
 8007dc8:	08008a4d 	.word	0x08008a4d

08007dcc <__ssputs_r>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	688e      	ldr	r6, [r1, #8]
 8007dd2:	461f      	mov	r7, r3
 8007dd4:	42be      	cmp	r6, r7
 8007dd6:	680b      	ldr	r3, [r1, #0]
 8007dd8:	4682      	mov	sl, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	4690      	mov	r8, r2
 8007dde:	d82d      	bhi.n	8007e3c <__ssputs_r+0x70>
 8007de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007de4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007de8:	d026      	beq.n	8007e38 <__ssputs_r+0x6c>
 8007dea:	6965      	ldr	r5, [r4, #20]
 8007dec:	6909      	ldr	r1, [r1, #16]
 8007dee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007df2:	eba3 0901 	sub.w	r9, r3, r1
 8007df6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dfa:	1c7b      	adds	r3, r7, #1
 8007dfc:	444b      	add	r3, r9
 8007dfe:	106d      	asrs	r5, r5, #1
 8007e00:	429d      	cmp	r5, r3
 8007e02:	bf38      	it	cc
 8007e04:	461d      	movcc	r5, r3
 8007e06:	0553      	lsls	r3, r2, #21
 8007e08:	d527      	bpl.n	8007e5a <__ssputs_r+0x8e>
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	f7ff fbd8 	bl	80075c0 <_malloc_r>
 8007e10:	4606      	mov	r6, r0
 8007e12:	b360      	cbz	r0, 8007e6e <__ssputs_r+0xa2>
 8007e14:	6921      	ldr	r1, [r4, #16]
 8007e16:	464a      	mov	r2, r9
 8007e18:	f000 fa06 	bl	8008228 <memcpy>
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e26:	81a3      	strh	r3, [r4, #12]
 8007e28:	6126      	str	r6, [r4, #16]
 8007e2a:	6165      	str	r5, [r4, #20]
 8007e2c:	444e      	add	r6, r9
 8007e2e:	eba5 0509 	sub.w	r5, r5, r9
 8007e32:	6026      	str	r6, [r4, #0]
 8007e34:	60a5      	str	r5, [r4, #8]
 8007e36:	463e      	mov	r6, r7
 8007e38:	42be      	cmp	r6, r7
 8007e3a:	d900      	bls.n	8007e3e <__ssputs_r+0x72>
 8007e3c:	463e      	mov	r6, r7
 8007e3e:	6820      	ldr	r0, [r4, #0]
 8007e40:	4632      	mov	r2, r6
 8007e42:	4641      	mov	r1, r8
 8007e44:	f000 f9c6 	bl	80081d4 <memmove>
 8007e48:	68a3      	ldr	r3, [r4, #8]
 8007e4a:	1b9b      	subs	r3, r3, r6
 8007e4c:	60a3      	str	r3, [r4, #8]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	4433      	add	r3, r6
 8007e52:	6023      	str	r3, [r4, #0]
 8007e54:	2000      	movs	r0, #0
 8007e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	f000 fa36 	bl	80082cc <_realloc_r>
 8007e60:	4606      	mov	r6, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d1e0      	bne.n	8007e28 <__ssputs_r+0x5c>
 8007e66:	6921      	ldr	r1, [r4, #16]
 8007e68:	4650      	mov	r0, sl
 8007e6a:	f7ff fb35 	bl	80074d8 <_free_r>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	f8ca 3000 	str.w	r3, [sl]
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e7a:	81a3      	strh	r3, [r4, #12]
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e80:	e7e9      	b.n	8007e56 <__ssputs_r+0x8a>
	...

08007e84 <_svfiprintf_r>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	4698      	mov	r8, r3
 8007e8a:	898b      	ldrh	r3, [r1, #12]
 8007e8c:	061b      	lsls	r3, r3, #24
 8007e8e:	b09d      	sub	sp, #116	@ 0x74
 8007e90:	4607      	mov	r7, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	4614      	mov	r4, r2
 8007e96:	d510      	bpl.n	8007eba <_svfiprintf_r+0x36>
 8007e98:	690b      	ldr	r3, [r1, #16]
 8007e9a:	b973      	cbnz	r3, 8007eba <_svfiprintf_r+0x36>
 8007e9c:	2140      	movs	r1, #64	@ 0x40
 8007e9e:	f7ff fb8f 	bl	80075c0 <_malloc_r>
 8007ea2:	6028      	str	r0, [r5, #0]
 8007ea4:	6128      	str	r0, [r5, #16]
 8007ea6:	b930      	cbnz	r0, 8007eb6 <_svfiprintf_r+0x32>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007eb0:	b01d      	add	sp, #116	@ 0x74
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	2340      	movs	r3, #64	@ 0x40
 8007eb8:	616b      	str	r3, [r5, #20]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ebe:	2320      	movs	r3, #32
 8007ec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec8:	2330      	movs	r3, #48	@ 0x30
 8007eca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008068 <_svfiprintf_r+0x1e4>
 8007ece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ed2:	f04f 0901 	mov.w	r9, #1
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	469a      	mov	sl, r3
 8007eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ede:	b10a      	cbz	r2, 8007ee4 <_svfiprintf_r+0x60>
 8007ee0:	2a25      	cmp	r2, #37	@ 0x25
 8007ee2:	d1f9      	bne.n	8007ed8 <_svfiprintf_r+0x54>
 8007ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ee8:	d00b      	beq.n	8007f02 <_svfiprintf_r+0x7e>
 8007eea:	465b      	mov	r3, fp
 8007eec:	4622      	mov	r2, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f7ff ff6b 	bl	8007dcc <__ssputs_r>
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	f000 80a7 	beq.w	800804a <_svfiprintf_r+0x1c6>
 8007efc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007efe:	445a      	add	r2, fp
 8007f00:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f02:	f89a 3000 	ldrb.w	r3, [sl]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 809f 	beq.w	800804a <_svfiprintf_r+0x1c6>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f16:	f10a 0a01 	add.w	sl, sl, #1
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	9307      	str	r3, [sp, #28]
 8007f1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f22:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f24:	4654      	mov	r4, sl
 8007f26:	2205      	movs	r2, #5
 8007f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2c:	484e      	ldr	r0, [pc, #312]	@ (8008068 <_svfiprintf_r+0x1e4>)
 8007f2e:	f7f8 f977 	bl	8000220 <memchr>
 8007f32:	9a04      	ldr	r2, [sp, #16]
 8007f34:	b9d8      	cbnz	r0, 8007f6e <_svfiprintf_r+0xea>
 8007f36:	06d0      	lsls	r0, r2, #27
 8007f38:	bf44      	itt	mi
 8007f3a:	2320      	movmi	r3, #32
 8007f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f40:	0711      	lsls	r1, r2, #28
 8007f42:	bf44      	itt	mi
 8007f44:	232b      	movmi	r3, #43	@ 0x2b
 8007f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f50:	d015      	beq.n	8007f7e <_svfiprintf_r+0xfa>
 8007f52:	9a07      	ldr	r2, [sp, #28]
 8007f54:	4654      	mov	r4, sl
 8007f56:	2000      	movs	r0, #0
 8007f58:	f04f 0c0a 	mov.w	ip, #10
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f62:	3b30      	subs	r3, #48	@ 0x30
 8007f64:	2b09      	cmp	r3, #9
 8007f66:	d94b      	bls.n	8008000 <_svfiprintf_r+0x17c>
 8007f68:	b1b0      	cbz	r0, 8007f98 <_svfiprintf_r+0x114>
 8007f6a:	9207      	str	r2, [sp, #28]
 8007f6c:	e014      	b.n	8007f98 <_svfiprintf_r+0x114>
 8007f6e:	eba0 0308 	sub.w	r3, r0, r8
 8007f72:	fa09 f303 	lsl.w	r3, r9, r3
 8007f76:	4313      	orrs	r3, r2
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	46a2      	mov	sl, r4
 8007f7c:	e7d2      	b.n	8007f24 <_svfiprintf_r+0xa0>
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	1d19      	adds	r1, r3, #4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	9103      	str	r1, [sp, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bfbb      	ittet	lt
 8007f8a:	425b      	neglt	r3, r3
 8007f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f90:	9307      	strge	r3, [sp, #28]
 8007f92:	9307      	strlt	r3, [sp, #28]
 8007f94:	bfb8      	it	lt
 8007f96:	9204      	strlt	r2, [sp, #16]
 8007f98:	7823      	ldrb	r3, [r4, #0]
 8007f9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f9c:	d10a      	bne.n	8007fb4 <_svfiprintf_r+0x130>
 8007f9e:	7863      	ldrb	r3, [r4, #1]
 8007fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fa2:	d132      	bne.n	800800a <_svfiprintf_r+0x186>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	1d1a      	adds	r2, r3, #4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	9203      	str	r2, [sp, #12]
 8007fac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fb0:	3402      	adds	r4, #2
 8007fb2:	9305      	str	r3, [sp, #20]
 8007fb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008078 <_svfiprintf_r+0x1f4>
 8007fb8:	7821      	ldrb	r1, [r4, #0]
 8007fba:	2203      	movs	r2, #3
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	f7f8 f92f 	bl	8000220 <memchr>
 8007fc2:	b138      	cbz	r0, 8007fd4 <_svfiprintf_r+0x150>
 8007fc4:	9b04      	ldr	r3, [sp, #16]
 8007fc6:	eba0 000a 	sub.w	r0, r0, sl
 8007fca:	2240      	movs	r2, #64	@ 0x40
 8007fcc:	4082      	lsls	r2, r0
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	3401      	adds	r4, #1
 8007fd2:	9304      	str	r3, [sp, #16]
 8007fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd8:	4824      	ldr	r0, [pc, #144]	@ (800806c <_svfiprintf_r+0x1e8>)
 8007fda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fde:	2206      	movs	r2, #6
 8007fe0:	f7f8 f91e 	bl	8000220 <memchr>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d036      	beq.n	8008056 <_svfiprintf_r+0x1d2>
 8007fe8:	4b21      	ldr	r3, [pc, #132]	@ (8008070 <_svfiprintf_r+0x1ec>)
 8007fea:	bb1b      	cbnz	r3, 8008034 <_svfiprintf_r+0x1b0>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	3307      	adds	r3, #7
 8007ff0:	f023 0307 	bic.w	r3, r3, #7
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	9303      	str	r3, [sp, #12]
 8007ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffa:	4433      	add	r3, r6
 8007ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ffe:	e76a      	b.n	8007ed6 <_svfiprintf_r+0x52>
 8008000:	fb0c 3202 	mla	r2, ip, r2, r3
 8008004:	460c      	mov	r4, r1
 8008006:	2001      	movs	r0, #1
 8008008:	e7a8      	b.n	8007f5c <_svfiprintf_r+0xd8>
 800800a:	2300      	movs	r3, #0
 800800c:	3401      	adds	r4, #1
 800800e:	9305      	str	r3, [sp, #20]
 8008010:	4619      	mov	r1, r3
 8008012:	f04f 0c0a 	mov.w	ip, #10
 8008016:	4620      	mov	r0, r4
 8008018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800801c:	3a30      	subs	r2, #48	@ 0x30
 800801e:	2a09      	cmp	r2, #9
 8008020:	d903      	bls.n	800802a <_svfiprintf_r+0x1a6>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0c6      	beq.n	8007fb4 <_svfiprintf_r+0x130>
 8008026:	9105      	str	r1, [sp, #20]
 8008028:	e7c4      	b.n	8007fb4 <_svfiprintf_r+0x130>
 800802a:	fb0c 2101 	mla	r1, ip, r1, r2
 800802e:	4604      	mov	r4, r0
 8008030:	2301      	movs	r3, #1
 8008032:	e7f0      	b.n	8008016 <_svfiprintf_r+0x192>
 8008034:	ab03      	add	r3, sp, #12
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	462a      	mov	r2, r5
 800803a:	4b0e      	ldr	r3, [pc, #56]	@ (8008074 <_svfiprintf_r+0x1f0>)
 800803c:	a904      	add	r1, sp, #16
 800803e:	4638      	mov	r0, r7
 8008040:	f7fd fe94 	bl	8005d6c <_printf_float>
 8008044:	1c42      	adds	r2, r0, #1
 8008046:	4606      	mov	r6, r0
 8008048:	d1d6      	bne.n	8007ff8 <_svfiprintf_r+0x174>
 800804a:	89ab      	ldrh	r3, [r5, #12]
 800804c:	065b      	lsls	r3, r3, #25
 800804e:	f53f af2d 	bmi.w	8007eac <_svfiprintf_r+0x28>
 8008052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008054:	e72c      	b.n	8007eb0 <_svfiprintf_r+0x2c>
 8008056:	ab03      	add	r3, sp, #12
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	462a      	mov	r2, r5
 800805c:	4b05      	ldr	r3, [pc, #20]	@ (8008074 <_svfiprintf_r+0x1f0>)
 800805e:	a904      	add	r1, sp, #16
 8008060:	4638      	mov	r0, r7
 8008062:	f7fe f91b 	bl	800629c <_printf_i>
 8008066:	e7ed      	b.n	8008044 <_svfiprintf_r+0x1c0>
 8008068:	08008aa6 	.word	0x08008aa6
 800806c:	08008ab0 	.word	0x08008ab0
 8008070:	08005d6d 	.word	0x08005d6d
 8008074:	08007dcd 	.word	0x08007dcd
 8008078:	08008aac 	.word	0x08008aac

0800807c <__sflush_r>:
 800807c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008084:	0716      	lsls	r6, r2, #28
 8008086:	4605      	mov	r5, r0
 8008088:	460c      	mov	r4, r1
 800808a:	d454      	bmi.n	8008136 <__sflush_r+0xba>
 800808c:	684b      	ldr	r3, [r1, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	dc02      	bgt.n	8008098 <__sflush_r+0x1c>
 8008092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	dd48      	ble.n	800812a <__sflush_r+0xae>
 8008098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800809a:	2e00      	cmp	r6, #0
 800809c:	d045      	beq.n	800812a <__sflush_r+0xae>
 800809e:	2300      	movs	r3, #0
 80080a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080a4:	682f      	ldr	r7, [r5, #0]
 80080a6:	6a21      	ldr	r1, [r4, #32]
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	d030      	beq.n	800810e <__sflush_r+0x92>
 80080ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	0759      	lsls	r1, r3, #29
 80080b2:	d505      	bpl.n	80080c0 <__sflush_r+0x44>
 80080b4:	6863      	ldr	r3, [r4, #4]
 80080b6:	1ad2      	subs	r2, r2, r3
 80080b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080ba:	b10b      	cbz	r3, 80080c0 <__sflush_r+0x44>
 80080bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	2300      	movs	r3, #0
 80080c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080c4:	6a21      	ldr	r1, [r4, #32]
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b0      	blx	r6
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	d106      	bne.n	80080de <__sflush_r+0x62>
 80080d0:	6829      	ldr	r1, [r5, #0]
 80080d2:	291d      	cmp	r1, #29
 80080d4:	d82b      	bhi.n	800812e <__sflush_r+0xb2>
 80080d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008180 <__sflush_r+0x104>)
 80080d8:	40ca      	lsrs	r2, r1
 80080da:	07d6      	lsls	r6, r2, #31
 80080dc:	d527      	bpl.n	800812e <__sflush_r+0xb2>
 80080de:	2200      	movs	r2, #0
 80080e0:	6062      	str	r2, [r4, #4]
 80080e2:	04d9      	lsls	r1, r3, #19
 80080e4:	6922      	ldr	r2, [r4, #16]
 80080e6:	6022      	str	r2, [r4, #0]
 80080e8:	d504      	bpl.n	80080f4 <__sflush_r+0x78>
 80080ea:	1c42      	adds	r2, r0, #1
 80080ec:	d101      	bne.n	80080f2 <__sflush_r+0x76>
 80080ee:	682b      	ldr	r3, [r5, #0]
 80080f0:	b903      	cbnz	r3, 80080f4 <__sflush_r+0x78>
 80080f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80080f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080f6:	602f      	str	r7, [r5, #0]
 80080f8:	b1b9      	cbz	r1, 800812a <__sflush_r+0xae>
 80080fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080fe:	4299      	cmp	r1, r3
 8008100:	d002      	beq.n	8008108 <__sflush_r+0x8c>
 8008102:	4628      	mov	r0, r5
 8008104:	f7ff f9e8 	bl	80074d8 <_free_r>
 8008108:	2300      	movs	r3, #0
 800810a:	6363      	str	r3, [r4, #52]	@ 0x34
 800810c:	e00d      	b.n	800812a <__sflush_r+0xae>
 800810e:	2301      	movs	r3, #1
 8008110:	4628      	mov	r0, r5
 8008112:	47b0      	blx	r6
 8008114:	4602      	mov	r2, r0
 8008116:	1c50      	adds	r0, r2, #1
 8008118:	d1c9      	bne.n	80080ae <__sflush_r+0x32>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0c6      	beq.n	80080ae <__sflush_r+0x32>
 8008120:	2b1d      	cmp	r3, #29
 8008122:	d001      	beq.n	8008128 <__sflush_r+0xac>
 8008124:	2b16      	cmp	r3, #22
 8008126:	d11e      	bne.n	8008166 <__sflush_r+0xea>
 8008128:	602f      	str	r7, [r5, #0]
 800812a:	2000      	movs	r0, #0
 800812c:	e022      	b.n	8008174 <__sflush_r+0xf8>
 800812e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008132:	b21b      	sxth	r3, r3
 8008134:	e01b      	b.n	800816e <__sflush_r+0xf2>
 8008136:	690f      	ldr	r7, [r1, #16]
 8008138:	2f00      	cmp	r7, #0
 800813a:	d0f6      	beq.n	800812a <__sflush_r+0xae>
 800813c:	0793      	lsls	r3, r2, #30
 800813e:	680e      	ldr	r6, [r1, #0]
 8008140:	bf08      	it	eq
 8008142:	694b      	ldreq	r3, [r1, #20]
 8008144:	600f      	str	r7, [r1, #0]
 8008146:	bf18      	it	ne
 8008148:	2300      	movne	r3, #0
 800814a:	eba6 0807 	sub.w	r8, r6, r7
 800814e:	608b      	str	r3, [r1, #8]
 8008150:	f1b8 0f00 	cmp.w	r8, #0
 8008154:	dde9      	ble.n	800812a <__sflush_r+0xae>
 8008156:	6a21      	ldr	r1, [r4, #32]
 8008158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800815a:	4643      	mov	r3, r8
 800815c:	463a      	mov	r2, r7
 800815e:	4628      	mov	r0, r5
 8008160:	47b0      	blx	r6
 8008162:	2800      	cmp	r0, #0
 8008164:	dc08      	bgt.n	8008178 <__sflush_r+0xfc>
 8008166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800816a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800816e:	81a3      	strh	r3, [r4, #12]
 8008170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008178:	4407      	add	r7, r0
 800817a:	eba8 0800 	sub.w	r8, r8, r0
 800817e:	e7e7      	b.n	8008150 <__sflush_r+0xd4>
 8008180:	20400001 	.word	0x20400001

08008184 <_fflush_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	690b      	ldr	r3, [r1, #16]
 8008188:	4605      	mov	r5, r0
 800818a:	460c      	mov	r4, r1
 800818c:	b913      	cbnz	r3, 8008194 <_fflush_r+0x10>
 800818e:	2500      	movs	r5, #0
 8008190:	4628      	mov	r0, r5
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	b118      	cbz	r0, 800819e <_fflush_r+0x1a>
 8008196:	6a03      	ldr	r3, [r0, #32]
 8008198:	b90b      	cbnz	r3, 800819e <_fflush_r+0x1a>
 800819a:	f7fe fa29 	bl	80065f0 <__sinit>
 800819e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0f3      	beq.n	800818e <_fflush_r+0xa>
 80081a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081a8:	07d0      	lsls	r0, r2, #31
 80081aa:	d404      	bmi.n	80081b6 <_fflush_r+0x32>
 80081ac:	0599      	lsls	r1, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_fflush_r+0x32>
 80081b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081b2:	f7fe fb36 	bl	8006822 <__retarget_lock_acquire_recursive>
 80081b6:	4628      	mov	r0, r5
 80081b8:	4621      	mov	r1, r4
 80081ba:	f7ff ff5f 	bl	800807c <__sflush_r>
 80081be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081c0:	07da      	lsls	r2, r3, #31
 80081c2:	4605      	mov	r5, r0
 80081c4:	d4e4      	bmi.n	8008190 <_fflush_r+0xc>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	059b      	lsls	r3, r3, #22
 80081ca:	d4e1      	bmi.n	8008190 <_fflush_r+0xc>
 80081cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ce:	f7fe fb29 	bl	8006824 <__retarget_lock_release_recursive>
 80081d2:	e7dd      	b.n	8008190 <_fflush_r+0xc>

080081d4 <memmove>:
 80081d4:	4288      	cmp	r0, r1
 80081d6:	b510      	push	{r4, lr}
 80081d8:	eb01 0402 	add.w	r4, r1, r2
 80081dc:	d902      	bls.n	80081e4 <memmove+0x10>
 80081de:	4284      	cmp	r4, r0
 80081e0:	4623      	mov	r3, r4
 80081e2:	d807      	bhi.n	80081f4 <memmove+0x20>
 80081e4:	1e43      	subs	r3, r0, #1
 80081e6:	42a1      	cmp	r1, r4
 80081e8:	d008      	beq.n	80081fc <memmove+0x28>
 80081ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081f2:	e7f8      	b.n	80081e6 <memmove+0x12>
 80081f4:	4402      	add	r2, r0
 80081f6:	4601      	mov	r1, r0
 80081f8:	428a      	cmp	r2, r1
 80081fa:	d100      	bne.n	80081fe <memmove+0x2a>
 80081fc:	bd10      	pop	{r4, pc}
 80081fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008206:	e7f7      	b.n	80081f8 <memmove+0x24>

08008208 <_sbrk_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d06      	ldr	r5, [pc, #24]	@ (8008224 <_sbrk_r+0x1c>)
 800820c:	2300      	movs	r3, #0
 800820e:	4604      	mov	r4, r0
 8008210:	4608      	mov	r0, r1
 8008212:	602b      	str	r3, [r5, #0]
 8008214:	f7f9 fd44 	bl	8001ca0 <_sbrk>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_sbrk_r+0x1a>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_sbrk_r+0x1a>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	20000530 	.word	0x20000530

08008228 <memcpy>:
 8008228:	440a      	add	r2, r1
 800822a:	4291      	cmp	r1, r2
 800822c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008230:	d100      	bne.n	8008234 <memcpy+0xc>
 8008232:	4770      	bx	lr
 8008234:	b510      	push	{r4, lr}
 8008236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800823a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800823e:	4291      	cmp	r1, r2
 8008240:	d1f9      	bne.n	8008236 <memcpy+0xe>
 8008242:	bd10      	pop	{r4, pc}

08008244 <__assert_func>:
 8008244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008246:	4614      	mov	r4, r2
 8008248:	461a      	mov	r2, r3
 800824a:	4b09      	ldr	r3, [pc, #36]	@ (8008270 <__assert_func+0x2c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4605      	mov	r5, r0
 8008250:	68d8      	ldr	r0, [r3, #12]
 8008252:	b14c      	cbz	r4, 8008268 <__assert_func+0x24>
 8008254:	4b07      	ldr	r3, [pc, #28]	@ (8008274 <__assert_func+0x30>)
 8008256:	9100      	str	r1, [sp, #0]
 8008258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800825c:	4906      	ldr	r1, [pc, #24]	@ (8008278 <__assert_func+0x34>)
 800825e:	462b      	mov	r3, r5
 8008260:	f000 f870 	bl	8008344 <fiprintf>
 8008264:	f000 f880 	bl	8008368 <abort>
 8008268:	4b04      	ldr	r3, [pc, #16]	@ (800827c <__assert_func+0x38>)
 800826a:	461c      	mov	r4, r3
 800826c:	e7f3      	b.n	8008256 <__assert_func+0x12>
 800826e:	bf00      	nop
 8008270:	2000001c 	.word	0x2000001c
 8008274:	08008ac1 	.word	0x08008ac1
 8008278:	08008ace 	.word	0x08008ace
 800827c:	08008afc 	.word	0x08008afc

08008280 <_calloc_r>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	fba1 5402 	umull	r5, r4, r1, r2
 8008286:	b934      	cbnz	r4, 8008296 <_calloc_r+0x16>
 8008288:	4629      	mov	r1, r5
 800828a:	f7ff f999 	bl	80075c0 <_malloc_r>
 800828e:	4606      	mov	r6, r0
 8008290:	b928      	cbnz	r0, 800829e <_calloc_r+0x1e>
 8008292:	4630      	mov	r0, r6
 8008294:	bd70      	pop	{r4, r5, r6, pc}
 8008296:	220c      	movs	r2, #12
 8008298:	6002      	str	r2, [r0, #0]
 800829a:	2600      	movs	r6, #0
 800829c:	e7f9      	b.n	8008292 <_calloc_r+0x12>
 800829e:	462a      	mov	r2, r5
 80082a0:	4621      	mov	r1, r4
 80082a2:	f7fe fa40 	bl	8006726 <memset>
 80082a6:	e7f4      	b.n	8008292 <_calloc_r+0x12>

080082a8 <__ascii_mbtowc>:
 80082a8:	b082      	sub	sp, #8
 80082aa:	b901      	cbnz	r1, 80082ae <__ascii_mbtowc+0x6>
 80082ac:	a901      	add	r1, sp, #4
 80082ae:	b142      	cbz	r2, 80082c2 <__ascii_mbtowc+0x1a>
 80082b0:	b14b      	cbz	r3, 80082c6 <__ascii_mbtowc+0x1e>
 80082b2:	7813      	ldrb	r3, [r2, #0]
 80082b4:	600b      	str	r3, [r1, #0]
 80082b6:	7812      	ldrb	r2, [r2, #0]
 80082b8:	1e10      	subs	r0, r2, #0
 80082ba:	bf18      	it	ne
 80082bc:	2001      	movne	r0, #1
 80082be:	b002      	add	sp, #8
 80082c0:	4770      	bx	lr
 80082c2:	4610      	mov	r0, r2
 80082c4:	e7fb      	b.n	80082be <__ascii_mbtowc+0x16>
 80082c6:	f06f 0001 	mvn.w	r0, #1
 80082ca:	e7f8      	b.n	80082be <__ascii_mbtowc+0x16>

080082cc <_realloc_r>:
 80082cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d0:	4607      	mov	r7, r0
 80082d2:	4614      	mov	r4, r2
 80082d4:	460d      	mov	r5, r1
 80082d6:	b921      	cbnz	r1, 80082e2 <_realloc_r+0x16>
 80082d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082dc:	4611      	mov	r1, r2
 80082de:	f7ff b96f 	b.w	80075c0 <_malloc_r>
 80082e2:	b92a      	cbnz	r2, 80082f0 <_realloc_r+0x24>
 80082e4:	f7ff f8f8 	bl	80074d8 <_free_r>
 80082e8:	4625      	mov	r5, r4
 80082ea:	4628      	mov	r0, r5
 80082ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f0:	f000 f841 	bl	8008376 <_malloc_usable_size_r>
 80082f4:	4284      	cmp	r4, r0
 80082f6:	4606      	mov	r6, r0
 80082f8:	d802      	bhi.n	8008300 <_realloc_r+0x34>
 80082fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082fe:	d8f4      	bhi.n	80082ea <_realloc_r+0x1e>
 8008300:	4621      	mov	r1, r4
 8008302:	4638      	mov	r0, r7
 8008304:	f7ff f95c 	bl	80075c0 <_malloc_r>
 8008308:	4680      	mov	r8, r0
 800830a:	b908      	cbnz	r0, 8008310 <_realloc_r+0x44>
 800830c:	4645      	mov	r5, r8
 800830e:	e7ec      	b.n	80082ea <_realloc_r+0x1e>
 8008310:	42b4      	cmp	r4, r6
 8008312:	4622      	mov	r2, r4
 8008314:	4629      	mov	r1, r5
 8008316:	bf28      	it	cs
 8008318:	4632      	movcs	r2, r6
 800831a:	f7ff ff85 	bl	8008228 <memcpy>
 800831e:	4629      	mov	r1, r5
 8008320:	4638      	mov	r0, r7
 8008322:	f7ff f8d9 	bl	80074d8 <_free_r>
 8008326:	e7f1      	b.n	800830c <_realloc_r+0x40>

08008328 <__ascii_wctomb>:
 8008328:	4603      	mov	r3, r0
 800832a:	4608      	mov	r0, r1
 800832c:	b141      	cbz	r1, 8008340 <__ascii_wctomb+0x18>
 800832e:	2aff      	cmp	r2, #255	@ 0xff
 8008330:	d904      	bls.n	800833c <__ascii_wctomb+0x14>
 8008332:	228a      	movs	r2, #138	@ 0x8a
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800833a:	4770      	bx	lr
 800833c:	700a      	strb	r2, [r1, #0]
 800833e:	2001      	movs	r0, #1
 8008340:	4770      	bx	lr
	...

08008344 <fiprintf>:
 8008344:	b40e      	push	{r1, r2, r3}
 8008346:	b503      	push	{r0, r1, lr}
 8008348:	4601      	mov	r1, r0
 800834a:	ab03      	add	r3, sp, #12
 800834c:	4805      	ldr	r0, [pc, #20]	@ (8008364 <fiprintf+0x20>)
 800834e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008352:	6800      	ldr	r0, [r0, #0]
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	f000 f83f 	bl	80083d8 <_vfiprintf_r>
 800835a:	b002      	add	sp, #8
 800835c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008360:	b003      	add	sp, #12
 8008362:	4770      	bx	lr
 8008364:	2000001c 	.word	0x2000001c

08008368 <abort>:
 8008368:	b508      	push	{r3, lr}
 800836a:	2006      	movs	r0, #6
 800836c:	f000 fa08 	bl	8008780 <raise>
 8008370:	2001      	movs	r0, #1
 8008372:	f7f9 fc1d 	bl	8001bb0 <_exit>

08008376 <_malloc_usable_size_r>:
 8008376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837a:	1f18      	subs	r0, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	bfbc      	itt	lt
 8008380:	580b      	ldrlt	r3, [r1, r0]
 8008382:	18c0      	addlt	r0, r0, r3
 8008384:	4770      	bx	lr

08008386 <__sfputc_r>:
 8008386:	6893      	ldr	r3, [r2, #8]
 8008388:	3b01      	subs	r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	b410      	push	{r4}
 800838e:	6093      	str	r3, [r2, #8]
 8008390:	da08      	bge.n	80083a4 <__sfputc_r+0x1e>
 8008392:	6994      	ldr	r4, [r2, #24]
 8008394:	42a3      	cmp	r3, r4
 8008396:	db01      	blt.n	800839c <__sfputc_r+0x16>
 8008398:	290a      	cmp	r1, #10
 800839a:	d103      	bne.n	80083a4 <__sfputc_r+0x1e>
 800839c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a0:	f000 b932 	b.w	8008608 <__swbuf_r>
 80083a4:	6813      	ldr	r3, [r2, #0]
 80083a6:	1c58      	adds	r0, r3, #1
 80083a8:	6010      	str	r0, [r2, #0]
 80083aa:	7019      	strb	r1, [r3, #0]
 80083ac:	4608      	mov	r0, r1
 80083ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <__sfputs_r>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	4606      	mov	r6, r0
 80083b8:	460f      	mov	r7, r1
 80083ba:	4614      	mov	r4, r2
 80083bc:	18d5      	adds	r5, r2, r3
 80083be:	42ac      	cmp	r4, r5
 80083c0:	d101      	bne.n	80083c6 <__sfputs_r+0x12>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e007      	b.n	80083d6 <__sfputs_r+0x22>
 80083c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ca:	463a      	mov	r2, r7
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7ff ffda 	bl	8008386 <__sfputc_r>
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d1f3      	bne.n	80083be <__sfputs_r+0xa>
 80083d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083d8 <_vfiprintf_r>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	460d      	mov	r5, r1
 80083de:	b09d      	sub	sp, #116	@ 0x74
 80083e0:	4614      	mov	r4, r2
 80083e2:	4698      	mov	r8, r3
 80083e4:	4606      	mov	r6, r0
 80083e6:	b118      	cbz	r0, 80083f0 <_vfiprintf_r+0x18>
 80083e8:	6a03      	ldr	r3, [r0, #32]
 80083ea:	b90b      	cbnz	r3, 80083f0 <_vfiprintf_r+0x18>
 80083ec:	f7fe f900 	bl	80065f0 <__sinit>
 80083f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083f2:	07d9      	lsls	r1, r3, #31
 80083f4:	d405      	bmi.n	8008402 <_vfiprintf_r+0x2a>
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	059a      	lsls	r2, r3, #22
 80083fa:	d402      	bmi.n	8008402 <_vfiprintf_r+0x2a>
 80083fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083fe:	f7fe fa10 	bl	8006822 <__retarget_lock_acquire_recursive>
 8008402:	89ab      	ldrh	r3, [r5, #12]
 8008404:	071b      	lsls	r3, r3, #28
 8008406:	d501      	bpl.n	800840c <_vfiprintf_r+0x34>
 8008408:	692b      	ldr	r3, [r5, #16]
 800840a:	b99b      	cbnz	r3, 8008434 <_vfiprintf_r+0x5c>
 800840c:	4629      	mov	r1, r5
 800840e:	4630      	mov	r0, r6
 8008410:	f000 f938 	bl	8008684 <__swsetup_r>
 8008414:	b170      	cbz	r0, 8008434 <_vfiprintf_r+0x5c>
 8008416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008418:	07dc      	lsls	r4, r3, #31
 800841a:	d504      	bpl.n	8008426 <_vfiprintf_r+0x4e>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008420:	b01d      	add	sp, #116	@ 0x74
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	0598      	lsls	r0, r3, #22
 800842a:	d4f7      	bmi.n	800841c <_vfiprintf_r+0x44>
 800842c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800842e:	f7fe f9f9 	bl	8006824 <__retarget_lock_release_recursive>
 8008432:	e7f3      	b.n	800841c <_vfiprintf_r+0x44>
 8008434:	2300      	movs	r3, #0
 8008436:	9309      	str	r3, [sp, #36]	@ 0x24
 8008438:	2320      	movs	r3, #32
 800843a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800843e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008442:	2330      	movs	r3, #48	@ 0x30
 8008444:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085f4 <_vfiprintf_r+0x21c>
 8008448:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800844c:	f04f 0901 	mov.w	r9, #1
 8008450:	4623      	mov	r3, r4
 8008452:	469a      	mov	sl, r3
 8008454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008458:	b10a      	cbz	r2, 800845e <_vfiprintf_r+0x86>
 800845a:	2a25      	cmp	r2, #37	@ 0x25
 800845c:	d1f9      	bne.n	8008452 <_vfiprintf_r+0x7a>
 800845e:	ebba 0b04 	subs.w	fp, sl, r4
 8008462:	d00b      	beq.n	800847c <_vfiprintf_r+0xa4>
 8008464:	465b      	mov	r3, fp
 8008466:	4622      	mov	r2, r4
 8008468:	4629      	mov	r1, r5
 800846a:	4630      	mov	r0, r6
 800846c:	f7ff ffa2 	bl	80083b4 <__sfputs_r>
 8008470:	3001      	adds	r0, #1
 8008472:	f000 80a7 	beq.w	80085c4 <_vfiprintf_r+0x1ec>
 8008476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008478:	445a      	add	r2, fp
 800847a:	9209      	str	r2, [sp, #36]	@ 0x24
 800847c:	f89a 3000 	ldrb.w	r3, [sl]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 809f 	beq.w	80085c4 <_vfiprintf_r+0x1ec>
 8008486:	2300      	movs	r3, #0
 8008488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800848c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008490:	f10a 0a01 	add.w	sl, sl, #1
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800849c:	931a      	str	r3, [sp, #104]	@ 0x68
 800849e:	4654      	mov	r4, sl
 80084a0:	2205      	movs	r2, #5
 80084a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a6:	4853      	ldr	r0, [pc, #332]	@ (80085f4 <_vfiprintf_r+0x21c>)
 80084a8:	f7f7 feba 	bl	8000220 <memchr>
 80084ac:	9a04      	ldr	r2, [sp, #16]
 80084ae:	b9d8      	cbnz	r0, 80084e8 <_vfiprintf_r+0x110>
 80084b0:	06d1      	lsls	r1, r2, #27
 80084b2:	bf44      	itt	mi
 80084b4:	2320      	movmi	r3, #32
 80084b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084ba:	0713      	lsls	r3, r2, #28
 80084bc:	bf44      	itt	mi
 80084be:	232b      	movmi	r3, #43	@ 0x2b
 80084c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084c4:	f89a 3000 	ldrb.w	r3, [sl]
 80084c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ca:	d015      	beq.n	80084f8 <_vfiprintf_r+0x120>
 80084cc:	9a07      	ldr	r2, [sp, #28]
 80084ce:	4654      	mov	r4, sl
 80084d0:	2000      	movs	r0, #0
 80084d2:	f04f 0c0a 	mov.w	ip, #10
 80084d6:	4621      	mov	r1, r4
 80084d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084dc:	3b30      	subs	r3, #48	@ 0x30
 80084de:	2b09      	cmp	r3, #9
 80084e0:	d94b      	bls.n	800857a <_vfiprintf_r+0x1a2>
 80084e2:	b1b0      	cbz	r0, 8008512 <_vfiprintf_r+0x13a>
 80084e4:	9207      	str	r2, [sp, #28]
 80084e6:	e014      	b.n	8008512 <_vfiprintf_r+0x13a>
 80084e8:	eba0 0308 	sub.w	r3, r0, r8
 80084ec:	fa09 f303 	lsl.w	r3, r9, r3
 80084f0:	4313      	orrs	r3, r2
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	46a2      	mov	sl, r4
 80084f6:	e7d2      	b.n	800849e <_vfiprintf_r+0xc6>
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	1d19      	adds	r1, r3, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	9103      	str	r1, [sp, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	bfbb      	ittet	lt
 8008504:	425b      	neglt	r3, r3
 8008506:	f042 0202 	orrlt.w	r2, r2, #2
 800850a:	9307      	strge	r3, [sp, #28]
 800850c:	9307      	strlt	r3, [sp, #28]
 800850e:	bfb8      	it	lt
 8008510:	9204      	strlt	r2, [sp, #16]
 8008512:	7823      	ldrb	r3, [r4, #0]
 8008514:	2b2e      	cmp	r3, #46	@ 0x2e
 8008516:	d10a      	bne.n	800852e <_vfiprintf_r+0x156>
 8008518:	7863      	ldrb	r3, [r4, #1]
 800851a:	2b2a      	cmp	r3, #42	@ 0x2a
 800851c:	d132      	bne.n	8008584 <_vfiprintf_r+0x1ac>
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	1d1a      	adds	r2, r3, #4
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	9203      	str	r2, [sp, #12]
 8008526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800852a:	3402      	adds	r4, #2
 800852c:	9305      	str	r3, [sp, #20]
 800852e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008604 <_vfiprintf_r+0x22c>
 8008532:	7821      	ldrb	r1, [r4, #0]
 8008534:	2203      	movs	r2, #3
 8008536:	4650      	mov	r0, sl
 8008538:	f7f7 fe72 	bl	8000220 <memchr>
 800853c:	b138      	cbz	r0, 800854e <_vfiprintf_r+0x176>
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	eba0 000a 	sub.w	r0, r0, sl
 8008544:	2240      	movs	r2, #64	@ 0x40
 8008546:	4082      	lsls	r2, r0
 8008548:	4313      	orrs	r3, r2
 800854a:	3401      	adds	r4, #1
 800854c:	9304      	str	r3, [sp, #16]
 800854e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008552:	4829      	ldr	r0, [pc, #164]	@ (80085f8 <_vfiprintf_r+0x220>)
 8008554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008558:	2206      	movs	r2, #6
 800855a:	f7f7 fe61 	bl	8000220 <memchr>
 800855e:	2800      	cmp	r0, #0
 8008560:	d03f      	beq.n	80085e2 <_vfiprintf_r+0x20a>
 8008562:	4b26      	ldr	r3, [pc, #152]	@ (80085fc <_vfiprintf_r+0x224>)
 8008564:	bb1b      	cbnz	r3, 80085ae <_vfiprintf_r+0x1d6>
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	3307      	adds	r3, #7
 800856a:	f023 0307 	bic.w	r3, r3, #7
 800856e:	3308      	adds	r3, #8
 8008570:	9303      	str	r3, [sp, #12]
 8008572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008574:	443b      	add	r3, r7
 8008576:	9309      	str	r3, [sp, #36]	@ 0x24
 8008578:	e76a      	b.n	8008450 <_vfiprintf_r+0x78>
 800857a:	fb0c 3202 	mla	r2, ip, r2, r3
 800857e:	460c      	mov	r4, r1
 8008580:	2001      	movs	r0, #1
 8008582:	e7a8      	b.n	80084d6 <_vfiprintf_r+0xfe>
 8008584:	2300      	movs	r3, #0
 8008586:	3401      	adds	r4, #1
 8008588:	9305      	str	r3, [sp, #20]
 800858a:	4619      	mov	r1, r3
 800858c:	f04f 0c0a 	mov.w	ip, #10
 8008590:	4620      	mov	r0, r4
 8008592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008596:	3a30      	subs	r2, #48	@ 0x30
 8008598:	2a09      	cmp	r2, #9
 800859a:	d903      	bls.n	80085a4 <_vfiprintf_r+0x1cc>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0c6      	beq.n	800852e <_vfiprintf_r+0x156>
 80085a0:	9105      	str	r1, [sp, #20]
 80085a2:	e7c4      	b.n	800852e <_vfiprintf_r+0x156>
 80085a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a8:	4604      	mov	r4, r0
 80085aa:	2301      	movs	r3, #1
 80085ac:	e7f0      	b.n	8008590 <_vfiprintf_r+0x1b8>
 80085ae:	ab03      	add	r3, sp, #12
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	462a      	mov	r2, r5
 80085b4:	4b12      	ldr	r3, [pc, #72]	@ (8008600 <_vfiprintf_r+0x228>)
 80085b6:	a904      	add	r1, sp, #16
 80085b8:	4630      	mov	r0, r6
 80085ba:	f7fd fbd7 	bl	8005d6c <_printf_float>
 80085be:	4607      	mov	r7, r0
 80085c0:	1c78      	adds	r0, r7, #1
 80085c2:	d1d6      	bne.n	8008572 <_vfiprintf_r+0x19a>
 80085c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085c6:	07d9      	lsls	r1, r3, #31
 80085c8:	d405      	bmi.n	80085d6 <_vfiprintf_r+0x1fe>
 80085ca:	89ab      	ldrh	r3, [r5, #12]
 80085cc:	059a      	lsls	r2, r3, #22
 80085ce:	d402      	bmi.n	80085d6 <_vfiprintf_r+0x1fe>
 80085d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085d2:	f7fe f927 	bl	8006824 <__retarget_lock_release_recursive>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	065b      	lsls	r3, r3, #25
 80085da:	f53f af1f 	bmi.w	800841c <_vfiprintf_r+0x44>
 80085de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085e0:	e71e      	b.n	8008420 <_vfiprintf_r+0x48>
 80085e2:	ab03      	add	r3, sp, #12
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	462a      	mov	r2, r5
 80085e8:	4b05      	ldr	r3, [pc, #20]	@ (8008600 <_vfiprintf_r+0x228>)
 80085ea:	a904      	add	r1, sp, #16
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7fd fe55 	bl	800629c <_printf_i>
 80085f2:	e7e4      	b.n	80085be <_vfiprintf_r+0x1e6>
 80085f4:	08008aa6 	.word	0x08008aa6
 80085f8:	08008ab0 	.word	0x08008ab0
 80085fc:	08005d6d 	.word	0x08005d6d
 8008600:	080083b5 	.word	0x080083b5
 8008604:	08008aac 	.word	0x08008aac

08008608 <__swbuf_r>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	460e      	mov	r6, r1
 800860c:	4614      	mov	r4, r2
 800860e:	4605      	mov	r5, r0
 8008610:	b118      	cbz	r0, 800861a <__swbuf_r+0x12>
 8008612:	6a03      	ldr	r3, [r0, #32]
 8008614:	b90b      	cbnz	r3, 800861a <__swbuf_r+0x12>
 8008616:	f7fd ffeb 	bl	80065f0 <__sinit>
 800861a:	69a3      	ldr	r3, [r4, #24]
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	071a      	lsls	r2, r3, #28
 8008622:	d501      	bpl.n	8008628 <__swbuf_r+0x20>
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	b943      	cbnz	r3, 800863a <__swbuf_r+0x32>
 8008628:	4621      	mov	r1, r4
 800862a:	4628      	mov	r0, r5
 800862c:	f000 f82a 	bl	8008684 <__swsetup_r>
 8008630:	b118      	cbz	r0, 800863a <__swbuf_r+0x32>
 8008632:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008636:	4638      	mov	r0, r7
 8008638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	6922      	ldr	r2, [r4, #16]
 800863e:	1a98      	subs	r0, r3, r2
 8008640:	6963      	ldr	r3, [r4, #20]
 8008642:	b2f6      	uxtb	r6, r6
 8008644:	4283      	cmp	r3, r0
 8008646:	4637      	mov	r7, r6
 8008648:	dc05      	bgt.n	8008656 <__swbuf_r+0x4e>
 800864a:	4621      	mov	r1, r4
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff fd99 	bl	8008184 <_fflush_r>
 8008652:	2800      	cmp	r0, #0
 8008654:	d1ed      	bne.n	8008632 <__swbuf_r+0x2a>
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	3b01      	subs	r3, #1
 800865a:	60a3      	str	r3, [r4, #8]
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	6022      	str	r2, [r4, #0]
 8008662:	701e      	strb	r6, [r3, #0]
 8008664:	6962      	ldr	r2, [r4, #20]
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	429a      	cmp	r2, r3
 800866a:	d004      	beq.n	8008676 <__swbuf_r+0x6e>
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	07db      	lsls	r3, r3, #31
 8008670:	d5e1      	bpl.n	8008636 <__swbuf_r+0x2e>
 8008672:	2e0a      	cmp	r6, #10
 8008674:	d1df      	bne.n	8008636 <__swbuf_r+0x2e>
 8008676:	4621      	mov	r1, r4
 8008678:	4628      	mov	r0, r5
 800867a:	f7ff fd83 	bl	8008184 <_fflush_r>
 800867e:	2800      	cmp	r0, #0
 8008680:	d0d9      	beq.n	8008636 <__swbuf_r+0x2e>
 8008682:	e7d6      	b.n	8008632 <__swbuf_r+0x2a>

08008684 <__swsetup_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4b29      	ldr	r3, [pc, #164]	@ (800872c <__swsetup_r+0xa8>)
 8008688:	4605      	mov	r5, r0
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	460c      	mov	r4, r1
 800868e:	b118      	cbz	r0, 8008698 <__swsetup_r+0x14>
 8008690:	6a03      	ldr	r3, [r0, #32]
 8008692:	b90b      	cbnz	r3, 8008698 <__swsetup_r+0x14>
 8008694:	f7fd ffac 	bl	80065f0 <__sinit>
 8008698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869c:	0719      	lsls	r1, r3, #28
 800869e:	d422      	bmi.n	80086e6 <__swsetup_r+0x62>
 80086a0:	06da      	lsls	r2, r3, #27
 80086a2:	d407      	bmi.n	80086b4 <__swsetup_r+0x30>
 80086a4:	2209      	movs	r2, #9
 80086a6:	602a      	str	r2, [r5, #0]
 80086a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086b2:	e033      	b.n	800871c <__swsetup_r+0x98>
 80086b4:	0758      	lsls	r0, r3, #29
 80086b6:	d512      	bpl.n	80086de <__swsetup_r+0x5a>
 80086b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086ba:	b141      	cbz	r1, 80086ce <__swsetup_r+0x4a>
 80086bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086c0:	4299      	cmp	r1, r3
 80086c2:	d002      	beq.n	80086ca <__swsetup_r+0x46>
 80086c4:	4628      	mov	r0, r5
 80086c6:	f7fe ff07 	bl	80074d8 <_free_r>
 80086ca:	2300      	movs	r3, #0
 80086cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	2300      	movs	r3, #0
 80086d8:	6063      	str	r3, [r4, #4]
 80086da:	6923      	ldr	r3, [r4, #16]
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	f043 0308 	orr.w	r3, r3, #8
 80086e4:	81a3      	strh	r3, [r4, #12]
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	b94b      	cbnz	r3, 80086fe <__swsetup_r+0x7a>
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086f4:	d003      	beq.n	80086fe <__swsetup_r+0x7a>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4628      	mov	r0, r5
 80086fa:	f000 f883 	bl	8008804 <__smakebuf_r>
 80086fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008702:	f013 0201 	ands.w	r2, r3, #1
 8008706:	d00a      	beq.n	800871e <__swsetup_r+0x9a>
 8008708:	2200      	movs	r2, #0
 800870a:	60a2      	str	r2, [r4, #8]
 800870c:	6962      	ldr	r2, [r4, #20]
 800870e:	4252      	negs	r2, r2
 8008710:	61a2      	str	r2, [r4, #24]
 8008712:	6922      	ldr	r2, [r4, #16]
 8008714:	b942      	cbnz	r2, 8008728 <__swsetup_r+0xa4>
 8008716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800871a:	d1c5      	bne.n	80086a8 <__swsetup_r+0x24>
 800871c:	bd38      	pop	{r3, r4, r5, pc}
 800871e:	0799      	lsls	r1, r3, #30
 8008720:	bf58      	it	pl
 8008722:	6962      	ldrpl	r2, [r4, #20]
 8008724:	60a2      	str	r2, [r4, #8]
 8008726:	e7f4      	b.n	8008712 <__swsetup_r+0x8e>
 8008728:	2000      	movs	r0, #0
 800872a:	e7f7      	b.n	800871c <__swsetup_r+0x98>
 800872c:	2000001c 	.word	0x2000001c

08008730 <_raise_r>:
 8008730:	291f      	cmp	r1, #31
 8008732:	b538      	push	{r3, r4, r5, lr}
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	d904      	bls.n	8008744 <_raise_r+0x14>
 800873a:	2316      	movs	r3, #22
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008746:	b112      	cbz	r2, 800874e <_raise_r+0x1e>
 8008748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800874c:	b94b      	cbnz	r3, 8008762 <_raise_r+0x32>
 800874e:	4628      	mov	r0, r5
 8008750:	f000 f830 	bl	80087b4 <_getpid_r>
 8008754:	4622      	mov	r2, r4
 8008756:	4601      	mov	r1, r0
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875e:	f000 b817 	b.w	8008790 <_kill_r>
 8008762:	2b01      	cmp	r3, #1
 8008764:	d00a      	beq.n	800877c <_raise_r+0x4c>
 8008766:	1c59      	adds	r1, r3, #1
 8008768:	d103      	bne.n	8008772 <_raise_r+0x42>
 800876a:	2316      	movs	r3, #22
 800876c:	6003      	str	r3, [r0, #0]
 800876e:	2001      	movs	r0, #1
 8008770:	e7e7      	b.n	8008742 <_raise_r+0x12>
 8008772:	2100      	movs	r1, #0
 8008774:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008778:	4620      	mov	r0, r4
 800877a:	4798      	blx	r3
 800877c:	2000      	movs	r0, #0
 800877e:	e7e0      	b.n	8008742 <_raise_r+0x12>

08008780 <raise>:
 8008780:	4b02      	ldr	r3, [pc, #8]	@ (800878c <raise+0xc>)
 8008782:	4601      	mov	r1, r0
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	f7ff bfd3 	b.w	8008730 <_raise_r>
 800878a:	bf00      	nop
 800878c:	2000001c 	.word	0x2000001c

08008790 <_kill_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d07      	ldr	r5, [pc, #28]	@ (80087b0 <_kill_r+0x20>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	602b      	str	r3, [r5, #0]
 800879e:	f7f9 f9f7 	bl	8001b90 <_kill>
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	d102      	bne.n	80087ac <_kill_r+0x1c>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	b103      	cbz	r3, 80087ac <_kill_r+0x1c>
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	bd38      	pop	{r3, r4, r5, pc}
 80087ae:	bf00      	nop
 80087b0:	20000530 	.word	0x20000530

080087b4 <_getpid_r>:
 80087b4:	f7f9 b9e4 	b.w	8001b80 <_getpid>

080087b8 <__swhatbuf_r>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	460c      	mov	r4, r1
 80087bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c0:	2900      	cmp	r1, #0
 80087c2:	b096      	sub	sp, #88	@ 0x58
 80087c4:	4615      	mov	r5, r2
 80087c6:	461e      	mov	r6, r3
 80087c8:	da0d      	bge.n	80087e6 <__swhatbuf_r+0x2e>
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087d0:	f04f 0100 	mov.w	r1, #0
 80087d4:	bf14      	ite	ne
 80087d6:	2340      	movne	r3, #64	@ 0x40
 80087d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087dc:	2000      	movs	r0, #0
 80087de:	6031      	str	r1, [r6, #0]
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	b016      	add	sp, #88	@ 0x58
 80087e4:	bd70      	pop	{r4, r5, r6, pc}
 80087e6:	466a      	mov	r2, sp
 80087e8:	f000 f848 	bl	800887c <_fstat_r>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	dbec      	blt.n	80087ca <__swhatbuf_r+0x12>
 80087f0:	9901      	ldr	r1, [sp, #4]
 80087f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087fa:	4259      	negs	r1, r3
 80087fc:	4159      	adcs	r1, r3
 80087fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008802:	e7eb      	b.n	80087dc <__swhatbuf_r+0x24>

08008804 <__smakebuf_r>:
 8008804:	898b      	ldrh	r3, [r1, #12]
 8008806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008808:	079d      	lsls	r5, r3, #30
 800880a:	4606      	mov	r6, r0
 800880c:	460c      	mov	r4, r1
 800880e:	d507      	bpl.n	8008820 <__smakebuf_r+0x1c>
 8008810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	2301      	movs	r3, #1
 800881a:	6163      	str	r3, [r4, #20]
 800881c:	b003      	add	sp, #12
 800881e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008820:	ab01      	add	r3, sp, #4
 8008822:	466a      	mov	r2, sp
 8008824:	f7ff ffc8 	bl	80087b8 <__swhatbuf_r>
 8008828:	9f00      	ldr	r7, [sp, #0]
 800882a:	4605      	mov	r5, r0
 800882c:	4639      	mov	r1, r7
 800882e:	4630      	mov	r0, r6
 8008830:	f7fe fec6 	bl	80075c0 <_malloc_r>
 8008834:	b948      	cbnz	r0, 800884a <__smakebuf_r+0x46>
 8008836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800883a:	059a      	lsls	r2, r3, #22
 800883c:	d4ee      	bmi.n	800881c <__smakebuf_r+0x18>
 800883e:	f023 0303 	bic.w	r3, r3, #3
 8008842:	f043 0302 	orr.w	r3, r3, #2
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	e7e2      	b.n	8008810 <__smakebuf_r+0xc>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	6020      	str	r0, [r4, #0]
 800884e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008852:	81a3      	strh	r3, [r4, #12]
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800885a:	b15b      	cbz	r3, 8008874 <__smakebuf_r+0x70>
 800885c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008860:	4630      	mov	r0, r6
 8008862:	f000 f81d 	bl	80088a0 <_isatty_r>
 8008866:	b128      	cbz	r0, 8008874 <__smakebuf_r+0x70>
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	f023 0303 	bic.w	r3, r3, #3
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	431d      	orrs	r5, r3
 8008878:	81a5      	strh	r5, [r4, #12]
 800887a:	e7cf      	b.n	800881c <__smakebuf_r+0x18>

0800887c <_fstat_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d07      	ldr	r5, [pc, #28]	@ (800889c <_fstat_r+0x20>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	f7f9 f9e1 	bl	8001c50 <_fstat>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	d102      	bne.n	8008898 <_fstat_r+0x1c>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	b103      	cbz	r3, 8008898 <_fstat_r+0x1c>
 8008896:	6023      	str	r3, [r4, #0]
 8008898:	bd38      	pop	{r3, r4, r5, pc}
 800889a:	bf00      	nop
 800889c:	20000530 	.word	0x20000530

080088a0 <_isatty_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4d06      	ldr	r5, [pc, #24]	@ (80088bc <_isatty_r+0x1c>)
 80088a4:	2300      	movs	r3, #0
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	602b      	str	r3, [r5, #0]
 80088ac:	f7f9 f9e0 	bl	8001c70 <_isatty>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_isatty_r+0x1a>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_isatty_r+0x1a>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20000530 	.word	0x20000530

080088c0 <_init>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	bf00      	nop
 80088c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c6:	bc08      	pop	{r3}
 80088c8:	469e      	mov	lr, r3
 80088ca:	4770      	bx	lr

080088cc <_fini>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	bf00      	nop
 80088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d2:	bc08      	pop	{r3}
 80088d4:	469e      	mov	lr, r3
 80088d6:	4770      	bx	lr
