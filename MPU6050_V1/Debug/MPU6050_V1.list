
MPU6050_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003834  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003a0c  08003a0c  00004a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a4c  08003a4c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003a4c  08003a4c  00004a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a54  08003a54  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a54  08003a54  00004a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a58  08003a58  00004a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08003a68  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003a68  00005120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f87  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002533  00000000  00000000  00015fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000184f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4b  00000000  00000000  00019248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d87  00000000  00000000  00019c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e74  00000000  00000000  0003fa1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eceb3  00000000  00000000  0005088e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d741  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003610  00000000  00000000  0013d784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00140d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080039f4 	.word	0x080039f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080039f4 	.word	0x080039f4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MPU6050_Init>:
float gy_offset = 0.0f;
float gz_offset = 0.0f;


MPU6050_STATE_t MPU6050_Init(MPU6050_t *MPU6050, I2C_HandleTypeDef *Hi2c, uint16_t Address)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	4613      	mov	r3, r2
 8000550:	80fb      	strh	r3, [r7, #6]
	uint8_t CheckID;

	MPU6050->hi2c 		= 	Hi2c;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	601a      	str	r2, [r3, #0]
	MPU6050->address 	= 	Address;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	809a      	strh	r2, [r3, #4]

	CheckID = Read8(MPU6050, 0x75);
 800055e:	2175      	movs	r1, #117	@ 0x75
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f000 f80c 	bl	800057e <Read8>
 8000566:	4603      	mov	r3, r0
 8000568:	75fb      	strb	r3, [r7, #23]
	if (CheckID != 0x68)
 800056a:	7dfb      	ldrb	r3, [r7, #23]
 800056c:	2b68      	cmp	r3, #104	@ 0x68
 800056e:	d001      	beq.n	8000574 <MPU6050_Init+0x30>
	{
		return MPU6050_ERROR;
 8000570:	2301      	movs	r3, #1
 8000572:	e000      	b.n	8000576 <MPU6050_Init+0x32>
	}
	return MPU6050_OK;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <Read8>:

uint8_t Read8(MPU6050_t *MPU6050, uint8_t Register)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b088      	sub	sp, #32
 8000582:	af04      	add	r7, sp, #16
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	460b      	mov	r3, r1
 8000588:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(MPU6050->hi2c, (MPU6050->address << 1), Register, 1, &Value, 1, MPU6050_TIMEOUT);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	889b      	ldrh	r3, [r3, #4]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	b299      	uxth	r1, r3
 8000596:	78fb      	ldrb	r3, [r7, #3]
 8000598:	b29a      	uxth	r2, r3
 800059a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800059e:	9302      	str	r3, [sp, #8]
 80005a0:	2301      	movs	r3, #1
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	f107 030f 	add.w	r3, r7, #15
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	f000 feaa 	bl	8001304 <HAL_I2C_Mem_Read>

	return Value;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <MPU6050_WHO_AM_I>:

	return ((Value[1] << 8) | (Value[0]));
}

uint8_t MPU6050_WHO_AM_I (MPU6050_t *MPU6050)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	uint8_t DeviceAdress = Read8(MPU6050, 0x75);
 80005c2:	2175      	movs	r1, #117	@ 0x75
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffda 	bl	800057e <Read8>
 80005ca:	4603      	mov	r3, r0
 80005cc:	73fb      	strb	r3, [r7, #15]
	return DeviceAdress;
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	@ 0x28
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b2f      	ldr	r3, [pc, #188]	@ (80006ac <MX_GPIO_Init+0xd4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	4a2e      	ldr	r2, [pc, #184]	@ (80006ac <MX_GPIO_Init+0xd4>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <MX_GPIO_Init+0xd4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <MX_GPIO_Init+0xd4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a28      	ldr	r2, [pc, #160]	@ (80006ac <MX_GPIO_Init+0xd4>)
 800060c:	f043 0320 	orr.w	r3, r3, #32
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <MX_GPIO_Init+0xd4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	f003 0320 	and.w	r3, r3, #32
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <MX_GPIO_Init+0xd4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	4a22      	ldr	r2, [pc, #136]	@ (80006ac <MX_GPIO_Init+0xd4>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062a:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <MX_GPIO_Init+0xd4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <MX_GPIO_Init+0xd4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ac <MX_GPIO_Init+0xd4>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000642:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_GPIO_Init+0xd4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2120      	movs	r1, #32
 8000652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000656:	f000 fd7f 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000660:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <MX_GPIO_Init+0xd8>)
 8000672:	f000 fbef 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000676:	2320      	movs	r3, #32
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f000 fbe0 	bl	8000e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2028      	movs	r0, #40	@ 0x28
 800069a:	f000 fba6 	bl	8000dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800069e:	2028      	movs	r0, #40	@ 0x28
 80006a0:	f000 fbbd 	bl	8000e1e <HAL_NVIC_EnableIRQ>

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	@ 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000800 	.word	0x48000800

080006b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006ba:	4a1c      	ldr	r2, [pc, #112]	@ (800072c <MX_I2C1_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000730 <MX_I2C1_Init+0x7c>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ee:	480e      	ldr	r0, [pc, #56]	@ (8000728 <MX_I2C1_Init+0x74>)
 80006f0:	f000 fd6d 	bl	80011ce <HAL_I2C_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006fa:	f000 f8ea 	bl	80008d2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	4809      	ldr	r0, [pc, #36]	@ (8000728 <MX_I2C1_Init+0x74>)
 8000702:	f001 f987 	bl	8001a14 <HAL_I2CEx_ConfigAnalogFilter>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 f8e1 	bl	80008d2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_I2C1_Init+0x74>)
 8000714:	f001 f9c9 	bl	8001aaa <HAL_I2CEx_ConfigDigitalFilter>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 f8d8 	bl	80008d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000028 	.word	0x20000028
 800072c:	40005400 	.word	0x40005400
 8000730:	40b285c2 	.word	0x40b285c2

08000734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09e      	sub	sp, #120	@ 0x78
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	2254      	movs	r2, #84	@ 0x54
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f003 f921 	bl	800399c <memset>
  if(i2cHandle->Instance==I2C1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <HAL_I2C_MspInit+0xa8>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d136      	bne.n	80007d2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000764:	2340      	movs	r3, #64	@ 0x40
 8000766:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000768:	2300      	movs	r3, #0
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ffc9 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800077c:	f000 f8a9 	bl	80008d2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_I2C_MspInit+0xac>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000784:	4a16      	ldr	r2, [pc, #88]	@ (80007e0 <HAL_I2C_MspInit+0xac>)
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_I2C_MspInit+0xac>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000798:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079e:	2312      	movs	r3, #18
 80007a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007aa:	2304      	movs	r3, #4
 80007ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <HAL_I2C_MspInit+0xb0>)
 80007b6:	f000 fb4d 	bl	8000e54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <HAL_I2C_MspInit+0xac>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0xac>)
 80007c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_I2C_MspInit+0xac>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3778      	adds	r7, #120	@ 0x78
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000400 	.word	0x48000400

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 f9b1 	bl	8000b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f824 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff fef0 	bl	80005d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007f8:	f7ff ff5c 	bl	80006b4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80007fc:	f000 f8de 	bl	80009bc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&MPU6050, &hi2c1, 0x68);
 8000800:	2268      	movs	r2, #104	@ 0x68
 8000802:	490a      	ldr	r1, [pc, #40]	@ (800082c <main+0x44>)
 8000804:	480a      	ldr	r0, [pc, #40]	@ (8000830 <main+0x48>)
 8000806:	f7ff fe9d 	bl	8000544 <MPU6050_Init>
  DeviceAddress = MPU6050_WHO_AM_I(&MPU6050);
 800080a:	4809      	ldr	r0, [pc, #36]	@ (8000830 <main+0x48>)
 800080c:	f7ff fed5 	bl	80005ba <MPU6050_WHO_AM_I>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <main+0x4c>)
 8000816:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&hlpuart1, &DeviceAddress, sizeof(DeviceAddress), HAL_MAX_DELAY);
 8000818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800081c:	2201      	movs	r2, #1
 800081e:	4905      	ldr	r1, [pc, #20]	@ (8000834 <main+0x4c>)
 8000820:	4805      	ldr	r0, [pc, #20]	@ (8000838 <main+0x50>)
 8000822:	f002 fa0f 	bl	8002c44 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000826:	bf00      	nop
 8000828:	e7fd      	b.n	8000826 <main+0x3e>
 800082a:	bf00      	nop
 800082c:	20000028 	.word	0x20000028
 8000830:	2000007c 	.word	0x2000007c
 8000834:	20000084 	.word	0x20000084
 8000838:	20000088 	.word	0x20000088

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	@ 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	2238      	movs	r2, #56	@ 0x38
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 f8a6 	bl	800399c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800085e:	2000      	movs	r0, #0
 8000860:	f001 f970 	bl	8001b44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086e:	2340      	movs	r3, #64	@ 0x40
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000876:	2302      	movs	r3, #2
 8000878:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800087a:	2304      	movs	r3, #4
 800087c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800087e:	2355      	movs	r3, #85	@ 0x55
 8000880:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fa0a 	bl	8001cac <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800089e:	f000 f818 	bl	80008d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2104      	movs	r1, #4
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fd08 	bl	80022d0 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008c6:	f000 f804 	bl	80008d2 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3750      	adds	r7, #80	@ 0x50
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
}
 80008d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008da:	bf00      	nop
 80008dc:	e7fd      	b.n	80008da <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000916:	f001 f9b9 	bl	8001c8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f93b 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}

08000986 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800098a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800098e:	f000 fbfb 	bl	8001188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009c0:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009c2:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <MX_LPUART1_UART_Init+0x90>)
 80009c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009fe:	4812      	ldr	r0, [pc, #72]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 8000a00:	f002 f8d0 	bl	8002ba4 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f7ff ff62 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 8000a12:	f002 fef9 	bl	8003808 <HAL_UARTEx_SetTxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a1c:	f7ff ff59 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 8000a24:	f002 ff2e 	bl	8003884 <HAL_UARTEx_SetRxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a2e:	f7ff ff50 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_LPUART1_UART_Init+0x8c>)
 8000a34:	f002 feaf 	bl	8003796 <HAL_UARTEx_DisableFifoMode>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a3e:	f7ff ff48 	bl	80008d2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000088 	.word	0x20000088
 8000a4c:	40008000 	.word	0x40008000

08000a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09e      	sub	sp, #120	@ 0x78
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2254      	movs	r2, #84	@ 0x54
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 ff93 	bl	800399c <memset>
  if(uartHandle->Instance==LPUART1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d136      	bne.n	8000aee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a80:	2320      	movs	r3, #32
 8000a82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fe3b 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff ff1b 	bl	80008d2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aa0:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000acc:	230c      	movs	r3, #12
 8000ace:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000adc:	230c      	movs	r3, #12
 8000ade:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f000 f9b3 	bl	8000e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000aee:	bf00      	nop
 8000af0:	3778      	adds	r7, #120	@ 0x78
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40008000 	.word	0x40008000
 8000afc:	40021000 	.word	0x40021000

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff ff48 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f002 ff3d 	bl	80039ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fe59 	bl	80007e8 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   r0, =_estack
 8000b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b44:	08003a5c 	.word	0x08003a5c
  ldr r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b4c:	20000120 	.word	0x20000120

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>

08000b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f939 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f80e 	bl	8000b84 <HAL_InitTick>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	e001      	b.n	8000b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b74:	f7ff feb4 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b78:	79fb      	ldrb	r3, [r7, #7]

}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <HAL_InitTick+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d022      	beq.n	8000bde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_InitTick+0x6c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <HAL_InitTick+0x68>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f944 	bl	8000e3a <HAL_SYSTICK_Config>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10f      	bne.n	8000bd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d809      	bhi.n	8000bd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc6:	f000 f910 	bl	8000dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_InitTick+0x70>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e004      	b.n	8000be2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e001      	b.n	8000be2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a03      	ldr	r2, [pc, #12]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	2000011c 	.word	0x2000011c
 8000c18:	20000008 	.word	0x20000008

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2000011c 	.word	0x2000011c

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	@ (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	@ (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	@ (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	@ 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff29 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff40 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff90 	bl	8000d28 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5f 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff33 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa4 	bl	8000d90 <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e62:	e15a      	b.n	800111a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 814c 	beq.w	8001114 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d005      	beq.n	8000e94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d130      	bne.n	8000ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eca:	2201      	movs	r2, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	f003 0201 	and.w	r2, r3, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d017      	beq.n	8000f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d123      	bne.n	8000f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	691a      	ldr	r2, [r3, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	6939      	ldr	r1, [r7, #16]
 8000f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0203 	and.w	r2, r3, #3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 80a6 	beq.w	8001114 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8001138 <HAL_GPIO_Init+0x2e4>)
 8000fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8001138 <HAL_GPIO_Init+0x2e4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd4:	4b58      	ldr	r3, [pc, #352]	@ (8001138 <HAL_GPIO_Init+0x2e4>)
 8000fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe0:	4a56      	ldr	r2, [pc, #344]	@ (800113c <HAL_GPIO_Init+0x2e8>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800100a:	d01f      	beq.n	800104c <HAL_GPIO_Init+0x1f8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <HAL_GPIO_Init+0x2ec>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d019      	beq.n	8001048 <HAL_GPIO_Init+0x1f4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4b      	ldr	r2, [pc, #300]	@ (8001144 <HAL_GPIO_Init+0x2f0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d013      	beq.n	8001044 <HAL_GPIO_Init+0x1f0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4a      	ldr	r2, [pc, #296]	@ (8001148 <HAL_GPIO_Init+0x2f4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00d      	beq.n	8001040 <HAL_GPIO_Init+0x1ec>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a49      	ldr	r2, [pc, #292]	@ (800114c <HAL_GPIO_Init+0x2f8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x1e8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a48      	ldr	r2, [pc, #288]	@ (8001150 <HAL_GPIO_Init+0x2fc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <HAL_GPIO_Init+0x1e4>
 8001034:	2305      	movs	r3, #5
 8001036:	e00a      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 8001038:	2306      	movs	r3, #6
 800103a:	e008      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 800103c:	2304      	movs	r3, #4
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 8001040:	2303      	movs	r3, #3
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 8001044:	2302      	movs	r3, #2
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 800104c:	2300      	movs	r3, #0
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105e:	4937      	ldr	r1, [pc, #220]	@ (800113c <HAL_GPIO_Init+0x2e8>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <HAL_GPIO_Init+0x300>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001090:	4a30      	ldr	r2, [pc, #192]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001096:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ba:	4a26      	ldr	r2, [pc, #152]	@ (8001154 <HAL_GPIO_Init+0x300>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010c0:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <HAL_GPIO_Init+0x300>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <HAL_GPIO_Init+0x300>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_GPIO_Init+0x300>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110e:	4a11      	ldr	r2, [pc, #68]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	f47f ae9d 	bne.w	8000e64 <HAL_GPIO_Init+0x10>
  }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48001000 	.word	0x48001000
 8001150:	48001400 	.word	0x48001400
 8001154:	40010400 	.word	0x40010400

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001174:	e002      	b.n	800117c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800119e:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f806 	bl	80011b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e08d      	b.n	80012fc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fa9d 	bl	8000734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2224      	movs	r2, #36	@ 0x24
 80011fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800121e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800122e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d107      	bne.n	8001248 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	e006      	b.n	8001256 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001254:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d108      	bne.n	8001270 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	e007      	b.n	8001280 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800127e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800128e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001292:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69d9      	ldr	r1, [r3, #28]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0201 	orr.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2220      	movs	r2, #32
 80012e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af02      	add	r7, sp, #8
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4603      	mov	r3, r0
 8001314:	817b      	strh	r3, [r7, #10]
 8001316:	460b      	mov	r3, r1
 8001318:	813b      	strh	r3, [r7, #8]
 800131a:	4613      	mov	r3, r2
 800131c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b20      	cmp	r3, #32
 8001328:	f040 80fd 	bne.w	8001526 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_I2C_Mem_Read+0x34>
 8001332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0f1      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Mem_Read+0x4e>
 800134e:	2302      	movs	r3, #2
 8001350:	e0ea      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800135a:	f7ff fc5f 	bl	8000c1c <HAL_GetTick>
 800135e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2319      	movs	r3, #25
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 f95b 	bl	8001628 <I2C_WaitOnFlagUntilTimeout>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0d5      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2222      	movs	r2, #34	@ 0x22
 8001380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2240      	movs	r2, #64	@ 0x40
 8001388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a3a      	ldr	r2, [r7, #32]
 8001396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800139c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013a4:	88f8      	ldrh	r0, [r7, #6]
 80013a6:	893a      	ldrh	r2, [r7, #8]
 80013a8:	8979      	ldrh	r1, [r7, #10]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4603      	mov	r3, r0
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 f8bf 	bl	8001538 <I2C_RequestMemoryRead>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0ad      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2bff      	cmp	r3, #255	@ 0xff
 80013d4:	d90e      	bls.n	80013f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	22ff      	movs	r2, #255	@ 0xff
 80013da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	8979      	ldrh	r1, [r7, #10]
 80013e4:	4b52      	ldr	r3, [pc, #328]	@ (8001530 <HAL_I2C_Mem_Read+0x22c>)
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 fadf 	bl	80019b0 <I2C_TransferConfig>
 80013f2:	e00f      	b.n	8001414 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001402:	b2da      	uxtb	r2, r3
 8001404:	8979      	ldrh	r1, [r7, #10]
 8001406:	4b4a      	ldr	r3, [pc, #296]	@ (8001530 <HAL_I2C_Mem_Read+0x22c>)
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 face 	bl	80019b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	2104      	movs	r1, #4
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f902 	bl	8001628 <I2C_WaitOnFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e07c      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001456:	b29b      	uxth	r3, r3
 8001458:	3b01      	subs	r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001464:	b29b      	uxth	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d034      	beq.n	80014d4 <HAL_I2C_Mem_Read+0x1d0>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800146e:	2b00      	cmp	r3, #0
 8001470:	d130      	bne.n	80014d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001478:	2200      	movs	r2, #0
 800147a:	2180      	movs	r1, #128	@ 0x80
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f8d3 	bl	8001628 <I2C_WaitOnFlagUntilTimeout>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e04d      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001490:	b29b      	uxth	r3, r3
 8001492:	2bff      	cmp	r3, #255	@ 0xff
 8001494:	d90e      	bls.n	80014b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	22ff      	movs	r2, #255	@ 0xff
 800149a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	8979      	ldrh	r1, [r7, #10]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fa7f 	bl	80019b0 <I2C_TransferConfig>
 80014b2:	e00f      	b.n	80014d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	8979      	ldrh	r1, [r7, #10]
 80014c6:	2300      	movs	r3, #0
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 fa6e 	bl	80019b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d19a      	bne.n	8001414 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f940 	bl	8001768 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e01a      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2220      	movs	r2, #32
 80014f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_I2C_Mem_Read+0x230>)
 8001506:	400b      	ands	r3, r1
 8001508:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2220      	movs	r2, #32
 800150e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001526:	2302      	movs	r3, #2
  }
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	80002400 	.word	0x80002400
 8001534:	fe00e800 	.word	0xfe00e800

08001538 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	817b      	strh	r3, [r7, #10]
 800154a:	460b      	mov	r3, r1
 800154c:	813b      	strh	r3, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	8979      	ldrh	r1, [r7, #10]
 8001558:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <I2C_RequestMemoryRead+0xa4>)
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2300      	movs	r3, #0
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 fa26 	bl	80019b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	69b9      	ldr	r1, [r7, #24]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f8b6 	bl	80016da <I2C_WaitOnTXISFlagUntilTimeout>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e02c      	b.n	80015d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d105      	bne.n	800158a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800157e:	893b      	ldrh	r3, [r7, #8]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
 8001588:	e015      	b.n	80015b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800158a:	893b      	ldrh	r3, [r7, #8]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	b29b      	uxth	r3, r3
 8001590:	b2da      	uxtb	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	69b9      	ldr	r1, [r7, #24]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f89c 	bl	80016da <I2C_WaitOnTXISFlagUntilTimeout>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e012      	b.n	80015d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015ac:	893b      	ldrh	r3, [r7, #8]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	@ 0x40
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f831 	bl	8001628 <I2C_WaitOnFlagUntilTimeout>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	80002000 	.word	0x80002000

080015e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d103      	bne.n	80015fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	d007      	beq.n	800161c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	619a      	str	r2, [r3, #24]
  }
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	4613      	mov	r3, r2
 8001636:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001638:	e03b      	b.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	6839      	ldr	r1, [r7, #0]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f8d6 	bl	80017f0 <I2C_IsErrorOccurred>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e041      	b.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001654:	d02d      	beq.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001656:	f7ff fae1 	bl	8000c1c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d302      	bcc.n	800166c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d122      	bne.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	4013      	ands	r3, r2
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	429a      	cmp	r2, r3
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	429a      	cmp	r2, r3
 8001688:	d113      	bne.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f043 0220 	orr.w	r2, r3, #32
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2220      	movs	r2, #32
 800169a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4013      	ands	r3, r2
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	bf0c      	ite	eq
 80016c2:	2301      	moveq	r3, #1
 80016c4:	2300      	movne	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d0b4      	beq.n	800163a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016e6:	e033      	b.n	8001750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f87f 	bl	80017f0 <I2C_IsErrorOccurred>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e031      	b.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001702:	d025      	beq.n	8001750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001704:	f7ff fa8a 	bl	8000c1c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	429a      	cmp	r2, r3
 8001712:	d302      	bcc.n	800171a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11a      	bne.n	8001750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b02      	cmp	r3, #2
 8001726:	d013      	beq.n	8001750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172c:	f043 0220 	orr.w	r2, r3, #32
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2220      	movs	r2, #32
 8001738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e007      	b.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d1c4      	bne.n	80016e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001774:	e02f      	b.n	80017d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f838 	bl	80017f0 <I2C_IsErrorOccurred>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e02d      	b.n	80017e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800178a:	f7ff fa47 	bl	8000c1c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	d302      	bcc.n	80017a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d11a      	bne.n	80017d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	d013      	beq.n	80017d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	f043 0220 	orr.w	r2, r3, #32
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2220      	movs	r2, #32
 80017be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e007      	b.n	80017e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	2b20      	cmp	r3, #32
 80017e2:	d1c8      	bne.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	@ 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	d068      	beq.n	80018ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2210      	movs	r2, #16
 8001822:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001824:	e049      	b.n	80018ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800182c:	d045      	beq.n	80018ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800182e:	f7ff f9f5 	bl	8000c1c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <I2C_IsErrorOccurred+0x54>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d13a      	bne.n	80018ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001856:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001862:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001866:	d121      	bne.n	80018ac <I2C_IsErrorOccurred+0xbc>
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800186e:	d01d      	beq.n	80018ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001870:	7cfb      	ldrb	r3, [r7, #19]
 8001872:	2b20      	cmp	r3, #32
 8001874:	d01a      	beq.n	80018ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001884:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001886:	f7ff f9c9 	bl	8000c1c <HAL_GetTick>
 800188a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800188c:	e00e      	b.n	80018ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800188e:	f7ff f9c5 	bl	8000c1c <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b19      	cmp	r3, #25
 800189a:	d907      	bls.n	80018ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80018aa:	e006      	b.n	80018ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d1e9      	bne.n	800188e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d003      	beq.n	80018d0 <I2C_IsErrorOccurred+0xe0>
 80018c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0aa      	beq.n	8001826 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d103      	bne.n	80018e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2220      	movs	r2, #32
 80018de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00b      	beq.n	8001918 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001910:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001932:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00b      	beq.n	800195c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800195c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01c      	beq.n	800199e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fe3b 	bl	80015e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <I2C_IsErrorOccurred+0x1bc>)
 8001976:	400b      	ands	r3, r1
 8001978:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	431a      	orrs	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800199e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3728      	adds	r7, #40	@ 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	fe00e800 	.word	0xfe00e800

080019b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	817b      	strh	r3, [r7, #10]
 80019be:	4613      	mov	r3, r2
 80019c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019c8:	7a7b      	ldrb	r3, [r7, #9]
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	4313      	orrs	r3, r2
 80019da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	0d5b      	lsrs	r3, r3, #21
 80019ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80019ee:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <I2C_TransferConfig+0x60>)
 80019f0:	430b      	orrs	r3, r1
 80019f2:	43db      	mvns	r3, r3
 80019f4:	ea02 0103 	and.w	r1, r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	03ff63ff 	.word	0x03ff63ff

08001a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	d138      	bne.n	8001a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e032      	b.n	8001a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6819      	ldr	r1, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d139      	bne.n	8001b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e033      	b.n	8001b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2224      	movs	r2, #36	@ 0x24
 8001ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b34:	2302      	movs	r3, #2
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d141      	bne.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b52:	4b4b      	ldr	r3, [pc, #300]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5e:	d131      	bne.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b60:	4b47      	ldr	r3, [pc, #284]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b66:	4a46      	ldr	r2, [pc, #280]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	4b43      	ldr	r3, [pc, #268]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b78:	4a41      	ldr	r2, [pc, #260]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b80:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2232      	movs	r2, #50	@ 0x32
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b96:	e002      	b.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001baa:	d102      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f2      	bne.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb2:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bbe:	d158      	bne.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e057      	b.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bca:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bd4:	e04d      	b.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bdc:	d141      	bne.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bde:	4b28      	ldr	r3, [pc, #160]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bea:	d131      	bne.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bec:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bf2:	4a23      	ldr	r2, [pc, #140]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bfc:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c04:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2232      	movs	r2, #50	@ 0x32
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a1c      	ldr	r2, [pc, #112]	@ (8001c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	0c9b      	lsrs	r3, r3, #18
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c22:	e002      	b.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c36:	d102      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f2      	bne.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c4a:	d112      	bne.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e011      	b.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c60:	e007      	b.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40007000 	.word	0x40007000
 8001c84:	20000000 	.word	0x20000000
 8001c88:	431bde83 	.word	0x431bde83

08001c8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9a:	6093      	str	r3, [r2, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40007000 	.word	0x40007000

08001cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e2fe      	b.n	80022bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d075      	beq.n	8001db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cca:	4b97      	ldr	r3, [pc, #604]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd4:	4b94      	ldr	r3, [pc, #592]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	d102      	bne.n	8001cea <HAL_RCC_OscConfig+0x3e>
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d002      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x44>
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d10b      	bne.n	8001d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d05b      	beq.n	8001db4 <HAL_RCC_OscConfig+0x108>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d157      	bne.n	8001db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e2d9      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_OscConfig+0x74>
 8001d12:	4b85      	ldr	r3, [pc, #532]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a84      	ldr	r2, [pc, #528]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e01d      	b.n	8001d5c <HAL_RCC_OscConfig+0xb0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x98>
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b7c      	ldr	r3, [pc, #496]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xb0>
 8001d44:	4b78      	ldr	r3, [pc, #480]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a77      	ldr	r2, [pc, #476]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b75      	ldr	r3, [pc, #468]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a74      	ldr	r2, [pc, #464]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7fe ff5a 	bl	8000c1c <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7fe ff56 	bl	8000c1c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	@ 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e29e      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0xc0>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7fe ff46 	bl	8000c1c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7fe ff42 	bl	8000c1c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	@ 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e28a      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da6:	4b60      	ldr	r3, [pc, #384]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0xe8>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d075      	beq.n	8001eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc2:	4b59      	ldr	r3, [pc, #356]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dcc:	4b56      	ldr	r3, [pc, #344]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_OscConfig+0x136>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d002      	beq.n	8001de8 <HAL_RCC_OscConfig+0x13c>
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d11f      	bne.n	8001e28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x154>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e25d      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b49      	ldr	r3, [pc, #292]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	4946      	ldr	r1, [pc, #280]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e14:	4b45      	ldr	r3, [pc, #276]	@ (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe feb3 	bl	8000b84 <HAL_InitTick>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d043      	beq.n	8001eac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e249      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b3d      	ldr	r3, [pc, #244]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3c      	ldr	r2, [pc, #240]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7fe feee 	bl	8000c1c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e44:	f7fe feea 	bl	8000c1c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e232      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e56:	4b34      	ldr	r3, [pc, #208]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	061b      	lsls	r3, r3, #24
 8001e70:	492d      	ldr	r1, [pc, #180]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
 8001e76:	e01a      	b.n	8001eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e78:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe feca 	bl	8000c1c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fec6 	bl	8000c1c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e20e      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e9e:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1e0>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d041      	beq.n	8001f3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01c      	beq.n	8001efc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec2:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec8:	4a17      	ldr	r2, [pc, #92]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fea3 	bl	8000c1c <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7fe fe9f 	bl	8000c1c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1e7      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0ef      	beq.n	8001eda <HAL_RCC_OscConfig+0x22e>
 8001efa:	e020      	b.n	8001f3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f02:	4a09      	ldr	r2, [pc, #36]	@ (8001f28 <HAL_RCC_OscConfig+0x27c>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7fe fe86 	bl	8000c1c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f12:	e00d      	b.n	8001f30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f14:	f7fe fe82 	bl	8000c1c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d906      	bls.n	8001f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1ca      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f30:	4b8c      	ldr	r3, [pc, #560]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ea      	bne.n	8001f14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80a6 	beq.w	8002098 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f50:	4b84      	ldr	r3, [pc, #528]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_OscConfig+0x2b4>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x2b6>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00d      	beq.n	8001f82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b7f      	ldr	r3, [pc, #508]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f72:	4b7c      	ldr	r3, [pc, #496]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f82:	4b79      	ldr	r3, [pc, #484]	@ (8002168 <HAL_RCC_OscConfig+0x4bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8e:	4b76      	ldr	r3, [pc, #472]	@ (8002168 <HAL_RCC_OscConfig+0x4bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a75      	ldr	r2, [pc, #468]	@ (8002168 <HAL_RCC_OscConfig+0x4bc>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fe3f 	bl	8000c1c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe fe3b 	bl	8000c1c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e183      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002168 <HAL_RCC_OscConfig+0x4bc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d108      	bne.n	8001fda <HAL_RCC_OscConfig+0x32e>
 8001fc8:	4b66      	ldr	r3, [pc, #408]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fce:	4a65      	ldr	r2, [pc, #404]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fd8:	e024      	b.n	8002024 <HAL_RCC_OscConfig+0x378>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d110      	bne.n	8002004 <HAL_RCC_OscConfig+0x358>
 8001fe2:	4b60      	ldr	r3, [pc, #384]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002002:	e00f      	b.n	8002024 <HAL_RCC_OscConfig+0x378>
 8002004:	4b57      	ldr	r3, [pc, #348]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200a:	4a56      	ldr	r2, [pc, #344]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002014:	4b53      	ldr	r3, [pc, #332]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	4a52      	ldr	r2, [pc, #328]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d016      	beq.n	800205a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7fe fdf6 	bl	8000c1c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7fe fdf2 	bl	8000c1c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e138      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204a:	4b46      	ldr	r3, [pc, #280]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ed      	beq.n	8002034 <HAL_RCC_OscConfig+0x388>
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7fe fddf 	bl	8000c1c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe fddb 	bl	8000c1c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e121      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002078:	4b3a      	ldr	r3, [pc, #232]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ed      	bne.n	8002062 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b35      	ldr	r3, [pc, #212]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	4a34      	ldr	r2, [pc, #208]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d03c      	beq.n	800211e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 80020ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7fe fdae 	bl	8000c1c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c4:	f7fe fdaa 	bl	8000c1c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0f2      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020d6:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 80020d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ef      	beq.n	80020c4 <HAL_RCC_OscConfig+0x418>
 80020e4:	e01b      	b.n	800211e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7fe fd91 	bl	8000c1c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020fe:	f7fe fd8d 	bl	8000c1c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0d5      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8002112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ef      	bne.n	80020fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80c9 	beq.w	80022ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002128:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b0c      	cmp	r3, #12
 8002132:	f000 8083 	beq.w	800223c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d15e      	bne.n	80021fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a08      	ldr	r2, [pc, #32]	@ (8002164 <HAL_RCC_OscConfig+0x4b8>)
 8002144:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7fe fd67 	bl	8000c1c <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002150:	e00c      	b.n	800216c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7fe fd63 	bl	8000c1c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d905      	bls.n	800216c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0ab      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216c:	4b55      	ldr	r3, [pc, #340]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ec      	bne.n	8002152 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002178:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	4b52      	ldr	r3, [pc, #328]	@ (80022c8 <HAL_RCC_OscConfig+0x61c>)
 800217e:	4013      	ands	r3, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6a11      	ldr	r1, [r2, #32]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002188:	3a01      	subs	r2, #1
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002192:	0212      	lsls	r2, r2, #8
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800219a:	0852      	lsrs	r2, r2, #1
 800219c:	3a01      	subs	r2, #1
 800219e:	0552      	lsls	r2, r2, #21
 80021a0:	4311      	orrs	r1, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021a6:	0852      	lsrs	r2, r2, #1
 80021a8:	3a01      	subs	r2, #1
 80021aa:	0652      	lsls	r2, r2, #25
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021b2:	06d2      	lsls	r2, r2, #27
 80021b4:	430a      	orrs	r2, r1
 80021b6:	4943      	ldr	r1, [pc, #268]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021bc:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a40      	ldr	r2, [pc, #256]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 80021c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c8:	4b3e      	ldr	r3, [pc, #248]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a3d      	ldr	r2, [pc, #244]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe fd22 	bl	8000c1c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe fd1e 	bl	8000c1c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e066      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	4b35      	ldr	r3, [pc, #212]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x530>
 80021fa:	e05e      	b.n	80022ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a30      	ldr	r2, [pc, #192]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 8002202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe fd08 	bl	8000c1c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe fd04 	bl	8000c1c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e04c      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002222:	4b28      	ldr	r3, [pc, #160]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800222e:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	4924      	ldr	r1, [pc, #144]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 8002234:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <HAL_RCC_OscConfig+0x620>)
 8002236:	4013      	ands	r3, r2
 8002238:	60cb      	str	r3, [r1, #12]
 800223a:	e03e      	b.n	80022ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e039      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002248:	4b1e      	ldr	r3, [pc, #120]	@ (80022c4 <HAL_RCC_OscConfig+0x618>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	429a      	cmp	r2, r3
 800225a:	d12c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	3b01      	subs	r3, #1
 8002268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d123      	bne.n	80022b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d11b      	bne.n	80022b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d113      	bne.n	80022b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	3b01      	subs	r3, #1
 800229c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	3b01      	subs	r3, #1
 80022b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	019f800c 	.word	0x019f800c
 80022cc:	feeefffc 	.word	0xfeeefffc

080022d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e11e      	b.n	8002526 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b91      	ldr	r3, [pc, #580]	@ (8002530 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b8e      	ldr	r3, [pc, #568]	@ (8002530 <HAL_RCC_ClockConfig+0x260>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 020f 	bic.w	r2, r3, #15
 80022fe:	498c      	ldr	r1, [pc, #560]	@ (8002530 <HAL_RCC_ClockConfig+0x260>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b8a      	ldr	r3, [pc, #552]	@ (8002530 <HAL_RCC_ClockConfig+0x260>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e106      	b.n	8002526 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d073      	beq.n	800240c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d129      	bne.n	8002380 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232c:	4b81      	ldr	r3, [pc, #516]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0f4      	b.n	8002526 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800233c:	f000 f99e 	bl	800267c <RCC_GetSysClockFreqFromPLLSource>
 8002340:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4a7c      	ldr	r2, [pc, #496]	@ (8002538 <HAL_RCC_ClockConfig+0x268>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d93f      	bls.n	80023ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800234a:	4b7a      	ldr	r3, [pc, #488]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800235e:	2b00      	cmp	r3, #0
 8002360:	d033      	beq.n	80023ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002366:	2b00      	cmp	r3, #0
 8002368:	d12f      	bne.n	80023ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800236a:	4b72      	ldr	r3, [pc, #456]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002372:	4a70      	ldr	r2, [pc, #448]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 8002374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002378:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e024      	b.n	80023ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d107      	bne.n	8002398 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002388:	4b6a      	ldr	r3, [pc, #424]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0c6      	b.n	8002526 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b66      	ldr	r3, [pc, #408]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0be      	b.n	8002526 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023a8:	f000 f8ce 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4a61      	ldr	r2, [pc, #388]	@ (8002538 <HAL_RCC_ClockConfig+0x268>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d909      	bls.n	80023ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023be:	4a5d      	ldr	r2, [pc, #372]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4957      	ldr	r1, [pc, #348]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023dc:	f7fe fc1e 	bl	8000c1c <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fc1a 	bl	8000c1c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e095      	b.n	8002526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d023      	beq.n	8002460 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002424:	4b43      	ldr	r3, [pc, #268]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a42      	ldr	r2, [pc, #264]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800242a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800242e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800243c:	4b3d      	ldr	r3, [pc, #244]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002444:	4a3b      	ldr	r2, [pc, #236]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 8002446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800244a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b39      	ldr	r3, [pc, #228]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4936      	ldr	r1, [pc, #216]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
 800245e:	e008      	b.n	8002472 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b80      	cmp	r3, #128	@ 0x80
 8002464:	d105      	bne.n	8002472 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002466:	4b33      	ldr	r3, [pc, #204]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4a32      	ldr	r2, [pc, #200]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 800246c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002470:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <HAL_RCC_ClockConfig+0x260>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d21d      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002480:	4b2b      	ldr	r3, [pc, #172]	@ (8002530 <HAL_RCC_ClockConfig+0x260>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 020f 	bic.w	r2, r3, #15
 8002488:	4929      	ldr	r1, [pc, #164]	@ (8002530 <HAL_RCC_ClockConfig+0x260>)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002490:	f7fe fbc4 	bl	8000c1c <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fbc0 	bl	8000c1c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e03b      	b.n	8002526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <HAL_RCC_ClockConfig+0x260>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1ed      	bne.n	8002498 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4917      	ldr	r1, [pc, #92]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490f      	ldr	r1, [pc, #60]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024fa:	f000 f825 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <HAL_RCC_ClockConfig+0x264>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490c      	ldr	r1, [pc, #48]	@ (800253c <HAL_RCC_ClockConfig+0x26c>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_RCC_ClockConfig+0x270>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_RCC_ClockConfig+0x274>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fb30 	bl	8000b84 <HAL_InitTick>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000
 8002534:	40021000 	.word	0x40021000
 8002538:	04c4b400 	.word	0x04c4b400
 800253c:	08003a0c 	.word	0x08003a0c
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800254e:	4b2c      	ldr	r3, [pc, #176]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d102      	bne.n	8002560 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800255a:	4b2a      	ldr	r3, [pc, #168]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xbc>)
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e047      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002560:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d102      	bne.n	8002572 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800256c:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	e03e      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002572:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d136      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3301      	adds	r3, #1
 8002594:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d10c      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800259c:	4a1a      	ldr	r2, [pc, #104]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	4a16      	ldr	r2, [pc, #88]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a6:	68d2      	ldr	r2, [r2, #12]
 80025a8:	0a12      	lsrs	r2, r2, #8
 80025aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
      break;
 80025b4:	e00c      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b6:	4a13      	ldr	r2, [pc, #76]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	4a10      	ldr	r2, [pc, #64]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	0a12      	lsrs	r2, r2, #8
 80025c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
      break;
 80025ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0e5b      	lsrs	r3, r3, #25
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	3301      	adds	r3, #1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	e001      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025f0:	693b      	ldr	r3, [r7, #16]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	00f42400 	.word	0x00f42400
 8002608:	016e3600 	.word	0x016e3600

0800260c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <HAL_RCC_GetHCLKFreq+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000000 	.word	0x20000000

08002624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002628:	f7ff fff0 	bl	800260c <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4904      	ldr	r1, [pc, #16]	@ (800264c <HAL_RCC_GetPCLK1Freq+0x28>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	08003a1c 	.word	0x08003a1c

08002650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002654:	f7ff ffda 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	0adb      	lsrs	r3, r3, #11
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4904      	ldr	r1, [pc, #16]	@ (8002678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	08003a1c 	.word	0x08003a1c

0800267c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3301      	adds	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d10c      	bne.n	80026ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a0:	4a17      	ldr	r2, [pc, #92]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026aa:	68d2      	ldr	r2, [r2, #12]
 80026ac:	0a12      	lsrs	r2, r2, #8
 80026ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
    break;
 80026b8:	e00c      	b.n	80026d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4a0e      	ldr	r2, [pc, #56]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c4:	68d2      	ldr	r2, [r2, #12]
 80026c6:	0a12      	lsrs	r2, r2, #8
 80026c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    break;
 80026d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026d4:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0e5b      	lsrs	r3, r3, #25
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	3301      	adds	r3, #1
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ee:	687b      	ldr	r3, [r7, #4]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40021000 	.word	0x40021000
 8002700:	016e3600 	.word	0x016e3600
 8002704:	00f42400 	.word	0x00f42400

08002708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002710:	2300      	movs	r3, #0
 8002712:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002714:	2300      	movs	r3, #0
 8002716:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8098 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272a:	4b43      	ldr	r3, [pc, #268]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4b40      	ldr	r3, [pc, #256]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	4a3f      	ldr	r2, [pc, #252]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	@ 0x58
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002752:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a39      	ldr	r2, [pc, #228]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800275e:	f7fe fa5d 	bl	8000c1c <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002764:	e009      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7fe fa59 	bl	8000c1c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d902      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	74fb      	strb	r3, [r7, #19]
        break;
 8002778:	e005      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277a:	4b30      	ldr	r3, [pc, #192]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0ef      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d159      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002796:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01e      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d019      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a8:	4b23      	ldr	r3, [pc, #140]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b4:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027d4:	4a18      	ldr	r2, [pc, #96]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe fa19 	bl	8000c1c <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ec:	e00b      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fa15 	bl	8000c1c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d902      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	74fb      	strb	r3, [r7, #19]
            break;
 8002804:	e006      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ec      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800281a:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002828:	4903      	ldr	r1, [pc, #12]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002830:	e008      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	74bb      	strb	r3, [r7, #18]
 8002836:	e005      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002844:	7c7b      	ldrb	r3, [r7, #17]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4ba7      	ldr	r3, [pc, #668]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	4aa6      	ldr	r2, [pc, #664]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002862:	4ba1      	ldr	r3, [pc, #644]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002868:	f023 0203 	bic.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	499d      	ldr	r1, [pc, #628]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002884:	4b98      	ldr	r3, [pc, #608]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	f023 020c 	bic.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4995      	ldr	r1, [pc, #596]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a6:	4b90      	ldr	r3, [pc, #576]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	498c      	ldr	r1, [pc, #560]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c8:	4b87      	ldr	r3, [pc, #540]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4984      	ldr	r1, [pc, #528]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	497b      	ldr	r1, [pc, #492]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800290c:	4b76      	ldr	r3, [pc, #472]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	4973      	ldr	r1, [pc, #460]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	496a      	ldr	r1, [pc, #424]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002950:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4962      	ldr	r1, [pc, #392]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002972:	4b5d      	ldr	r3, [pc, #372]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002978:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	4959      	ldr	r1, [pc, #356]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002994:	4b54      	ldr	r3, [pc, #336]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800299a:	f023 0203 	bic.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	4951      	ldr	r1, [pc, #324]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029b6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	4948      	ldr	r1, [pc, #288]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d8:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4940      	ldr	r1, [pc, #256]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a02:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a10:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1e:	4932      	ldr	r1, [pc, #200]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d015      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a56:	4924      	ldr	r1, [pc, #144]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a66:	d105      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a80:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	4916      	ldr	r1, [pc, #88]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a9e:	d105      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a10      	ldr	r2, [pc, #64]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aaa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d019      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4908      	ldr	r1, [pc, #32]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ad6:	d109      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	4b03      	ldr	r3, [pc, #12]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a02      	ldr	r2, [pc, #8]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ae2:	60d3      	str	r3, [r2, #12]
 8002ae4:	e002      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002af8:	4b29      	ldr	r3, [pc, #164]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	4926      	ldr	r1, [pc, #152]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b18:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a20      	ldr	r2, [pc, #128]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b22:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3e:	4918      	ldr	r1, [pc, #96]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a12      	ldr	r2, [pc, #72]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	490a      	ldr	r1, [pc, #40]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e042      	b.n	8002c3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fd ff41 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	@ 0x24
 8002bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fbb2 	bl	8003358 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8b3 	bl	8002d60 <UART_SetConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e01b      	b.n	8002c3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fc31 	bl	800349c <UART_CheckIdleState>
 8002c3a:	4603      	mov	r3, r0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	@ 0x28
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d17b      	bne.n	8002d56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_UART_Transmit+0x26>
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e074      	b.n	8002d58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2221      	movs	r2, #33	@ 0x21
 8002c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c7e:	f7fd ffcd 	bl	8000c1c <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9c:	d108      	bne.n	8002cb0 <HAL_UART_Transmit+0x6c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	e003      	b.n	8002cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cb8:	e030      	b.n	8002d1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2180      	movs	r1, #128	@ 0x80
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fc93 	bl	80035f0 <UART_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e03d      	b.n	8002d58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	e007      	b.n	8002d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3301      	adds	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1c8      	bne.n	8002cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2140      	movs	r1, #64	@ 0x40
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fc5c 	bl	80035f0 <UART_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e006      	b.n	8002d58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d64:	b08c      	sub	sp, #48	@ 0x30
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4baa      	ldr	r3, [pc, #680]	@ (8003038 <UART_SetConfig+0x2d8>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a9f      	ldr	r2, [pc, #636]	@ (800303c <UART_SetConfig+0x2dc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002dd6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dea:	f023 010f 	bic.w	r1, r3, #15
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a90      	ldr	r2, [pc, #576]	@ (8003040 <UART_SetConfig+0x2e0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d125      	bne.n	8002e50 <UART_SetConfig+0xf0>
 8002e04:	4b8f      	ldr	r3, [pc, #572]	@ (8003044 <UART_SetConfig+0x2e4>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d81a      	bhi.n	8002e48 <UART_SetConfig+0xe8>
 8002e12:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <UART_SetConfig+0xb8>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002e39 	.word	0x08002e39
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e41 	.word	0x08002e41
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2e:	e116      	b.n	800305e <UART_SetConfig+0x2fe>
 8002e30:	2302      	movs	r3, #2
 8002e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e36:	e112      	b.n	800305e <UART_SetConfig+0x2fe>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e3e:	e10e      	b.n	800305e <UART_SetConfig+0x2fe>
 8002e40:	2308      	movs	r3, #8
 8002e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e46:	e10a      	b.n	800305e <UART_SetConfig+0x2fe>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e4e:	e106      	b.n	800305e <UART_SetConfig+0x2fe>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7c      	ldr	r2, [pc, #496]	@ (8003048 <UART_SetConfig+0x2e8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d138      	bne.n	8002ecc <UART_SetConfig+0x16c>
 8002e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003044 <UART_SetConfig+0x2e4>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d82d      	bhi.n	8002ec4 <UART_SetConfig+0x164>
 8002e68:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <UART_SetConfig+0x110>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002ec5 	.word	0x08002ec5
 8002e78:	08002ec5 	.word	0x08002ec5
 8002e7c:	08002ec5 	.word	0x08002ec5
 8002e80:	08002eb5 	.word	0x08002eb5
 8002e84:	08002ec5 	.word	0x08002ec5
 8002e88:	08002ec5 	.word	0x08002ec5
 8002e8c:	08002ec5 	.word	0x08002ec5
 8002e90:	08002ead 	.word	0x08002ead
 8002e94:	08002ec5 	.word	0x08002ec5
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	08002ebd 	.word	0x08002ebd
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eaa:	e0d8      	b.n	800305e <UART_SetConfig+0x2fe>
 8002eac:	2302      	movs	r3, #2
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb2:	e0d4      	b.n	800305e <UART_SetConfig+0x2fe>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eba:	e0d0      	b.n	800305e <UART_SetConfig+0x2fe>
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec2:	e0cc      	b.n	800305e <UART_SetConfig+0x2fe>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eca:	e0c8      	b.n	800305e <UART_SetConfig+0x2fe>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800304c <UART_SetConfig+0x2ec>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d125      	bne.n	8002f22 <UART_SetConfig+0x1c2>
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8003044 <UART_SetConfig+0x2e4>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002edc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ee0:	2b30      	cmp	r3, #48	@ 0x30
 8002ee2:	d016      	beq.n	8002f12 <UART_SetConfig+0x1b2>
 8002ee4:	2b30      	cmp	r3, #48	@ 0x30
 8002ee6:	d818      	bhi.n	8002f1a <UART_SetConfig+0x1ba>
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d00a      	beq.n	8002f02 <UART_SetConfig+0x1a2>
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d814      	bhi.n	8002f1a <UART_SetConfig+0x1ba>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <UART_SetConfig+0x19a>
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d008      	beq.n	8002f0a <UART_SetConfig+0x1aa>
 8002ef8:	e00f      	b.n	8002f1a <UART_SetConfig+0x1ba>
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f00:	e0ad      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f02:	2302      	movs	r3, #2
 8002f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f08:	e0a9      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f10:	e0a5      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f12:	2308      	movs	r3, #8
 8002f14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f18:	e0a1      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f20:	e09d      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a4a      	ldr	r2, [pc, #296]	@ (8003050 <UART_SetConfig+0x2f0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d125      	bne.n	8002f78 <UART_SetConfig+0x218>
 8002f2c:	4b45      	ldr	r3, [pc, #276]	@ (8003044 <UART_SetConfig+0x2e4>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f38:	d016      	beq.n	8002f68 <UART_SetConfig+0x208>
 8002f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f3c:	d818      	bhi.n	8002f70 <UART_SetConfig+0x210>
 8002f3e:	2b80      	cmp	r3, #128	@ 0x80
 8002f40:	d00a      	beq.n	8002f58 <UART_SetConfig+0x1f8>
 8002f42:	2b80      	cmp	r3, #128	@ 0x80
 8002f44:	d814      	bhi.n	8002f70 <UART_SetConfig+0x210>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <UART_SetConfig+0x1f0>
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d008      	beq.n	8002f60 <UART_SetConfig+0x200>
 8002f4e:	e00f      	b.n	8002f70 <UART_SetConfig+0x210>
 8002f50:	2300      	movs	r3, #0
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f56:	e082      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5e:	e07e      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f60:	2304      	movs	r3, #4
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f66:	e07a      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f68:	2308      	movs	r3, #8
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6e:	e076      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f70:	2310      	movs	r3, #16
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f76:	e072      	b.n	800305e <UART_SetConfig+0x2fe>
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a35      	ldr	r2, [pc, #212]	@ (8003054 <UART_SetConfig+0x2f4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d12a      	bne.n	8002fd8 <UART_SetConfig+0x278>
 8002f82:	4b30      	ldr	r3, [pc, #192]	@ (8003044 <UART_SetConfig+0x2e4>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f90:	d01a      	beq.n	8002fc8 <UART_SetConfig+0x268>
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f96:	d81b      	bhi.n	8002fd0 <UART_SetConfig+0x270>
 8002f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f9c:	d00c      	beq.n	8002fb8 <UART_SetConfig+0x258>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa2:	d815      	bhi.n	8002fd0 <UART_SetConfig+0x270>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <UART_SetConfig+0x250>
 8002fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fac:	d008      	beq.n	8002fc0 <UART_SetConfig+0x260>
 8002fae:	e00f      	b.n	8002fd0 <UART_SetConfig+0x270>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb6:	e052      	b.n	800305e <UART_SetConfig+0x2fe>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fbe:	e04e      	b.n	800305e <UART_SetConfig+0x2fe>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc6:	e04a      	b.n	800305e <UART_SetConfig+0x2fe>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fce:	e046      	b.n	800305e <UART_SetConfig+0x2fe>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fd6:	e042      	b.n	800305e <UART_SetConfig+0x2fe>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a17      	ldr	r2, [pc, #92]	@ (800303c <UART_SetConfig+0x2dc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d13a      	bne.n	8003058 <UART_SetConfig+0x2f8>
 8002fe2:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <UART_SetConfig+0x2e4>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ff0:	d01a      	beq.n	8003028 <UART_SetConfig+0x2c8>
 8002ff2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ff6:	d81b      	bhi.n	8003030 <UART_SetConfig+0x2d0>
 8002ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ffc:	d00c      	beq.n	8003018 <UART_SetConfig+0x2b8>
 8002ffe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003002:	d815      	bhi.n	8003030 <UART_SetConfig+0x2d0>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <UART_SetConfig+0x2b0>
 8003008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300c:	d008      	beq.n	8003020 <UART_SetConfig+0x2c0>
 800300e:	e00f      	b.n	8003030 <UART_SetConfig+0x2d0>
 8003010:	2300      	movs	r3, #0
 8003012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003016:	e022      	b.n	800305e <UART_SetConfig+0x2fe>
 8003018:	2302      	movs	r3, #2
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800301e:	e01e      	b.n	800305e <UART_SetConfig+0x2fe>
 8003020:	2304      	movs	r3, #4
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003026:	e01a      	b.n	800305e <UART_SetConfig+0x2fe>
 8003028:	2308      	movs	r3, #8
 800302a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800302e:	e016      	b.n	800305e <UART_SetConfig+0x2fe>
 8003030:	2310      	movs	r3, #16
 8003032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003036:	e012      	b.n	800305e <UART_SetConfig+0x2fe>
 8003038:	cfff69f3 	.word	0xcfff69f3
 800303c:	40008000 	.word	0x40008000
 8003040:	40013800 	.word	0x40013800
 8003044:	40021000 	.word	0x40021000
 8003048:	40004400 	.word	0x40004400
 800304c:	40004800 	.word	0x40004800
 8003050:	40004c00 	.word	0x40004c00
 8003054:	40005000 	.word	0x40005000
 8003058:	2310      	movs	r3, #16
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4aae      	ldr	r2, [pc, #696]	@ (800331c <UART_SetConfig+0x5bc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	f040 8097 	bne.w	8003198 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800306a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800306e:	2b08      	cmp	r3, #8
 8003070:	d823      	bhi.n	80030ba <UART_SetConfig+0x35a>
 8003072:	a201      	add	r2, pc, #4	@ (adr r2, 8003078 <UART_SetConfig+0x318>)
 8003074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003078:	0800309d 	.word	0x0800309d
 800307c:	080030bb 	.word	0x080030bb
 8003080:	080030a5 	.word	0x080030a5
 8003084:	080030bb 	.word	0x080030bb
 8003088:	080030ab 	.word	0x080030ab
 800308c:	080030bb 	.word	0x080030bb
 8003090:	080030bb 	.word	0x080030bb
 8003094:	080030bb 	.word	0x080030bb
 8003098:	080030b3 	.word	0x080030b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7ff fac2 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 80030a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030a2:	e010      	b.n	80030c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a4:	4b9e      	ldr	r3, [pc, #632]	@ (8003320 <UART_SetConfig+0x5c0>)
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030a8:	e00d      	b.n	80030c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030aa:	f7ff fa4d 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80030ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030b0:	e009      	b.n	80030c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030b8:	e005      	b.n	80030c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8130 	beq.w	800332e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	4a94      	ldr	r2, [pc, #592]	@ (8003324 <UART_SetConfig+0x5c4>)
 80030d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030d8:	461a      	mov	r2, r3
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d305      	bcc.n	80030fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d903      	bls.n	8003106 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003104:	e113      	b.n	800332e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	2200      	movs	r2, #0
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	60fa      	str	r2, [r7, #12]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	4a84      	ldr	r2, [pc, #528]	@ (8003324 <UART_SetConfig+0x5c4>)
 8003114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003118:	b29b      	uxth	r3, r3
 800311a:	2200      	movs	r2, #0
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003128:	f7fd f876 	bl	8000218 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	020b      	lsls	r3, r1, #8
 800313e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003142:	0202      	lsls	r2, r0, #8
 8003144:	6979      	ldr	r1, [r7, #20]
 8003146:	6849      	ldr	r1, [r1, #4]
 8003148:	0849      	lsrs	r1, r1, #1
 800314a:	2000      	movs	r0, #0
 800314c:	460c      	mov	r4, r1
 800314e:	4605      	mov	r5, r0
 8003150:	eb12 0804 	adds.w	r8, r2, r4
 8003154:	eb43 0905 	adc.w	r9, r3, r5
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	469a      	mov	sl, r3
 8003160:	4693      	mov	fp, r2
 8003162:	4652      	mov	r2, sl
 8003164:	465b      	mov	r3, fp
 8003166:	4640      	mov	r0, r8
 8003168:	4649      	mov	r1, r9
 800316a:	f7fd f855 	bl	8000218 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4613      	mov	r3, r2
 8003174:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800317c:	d308      	bcc.n	8003190 <UART_SetConfig+0x430>
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003184:	d204      	bcs.n	8003190 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a3a      	ldr	r2, [r7, #32]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	e0ce      	b.n	800332e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003196:	e0ca      	b.n	800332e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031a0:	d166      	bne.n	8003270 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80031a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d827      	bhi.n	80031fa <UART_SetConfig+0x49a>
 80031aa:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <UART_SetConfig+0x450>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031d5 	.word	0x080031d5
 80031b4:	080031dd 	.word	0x080031dd
 80031b8:	080031e5 	.word	0x080031e5
 80031bc:	080031fb 	.word	0x080031fb
 80031c0:	080031eb 	.word	0x080031eb
 80031c4:	080031fb 	.word	0x080031fb
 80031c8:	080031fb 	.word	0x080031fb
 80031cc:	080031fb 	.word	0x080031fb
 80031d0:	080031f3 	.word	0x080031f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d4:	f7ff fa26 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 80031d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031da:	e014      	b.n	8003206 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7ff fa38 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 80031e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031e2:	e010      	b.n	8003206 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e4:	4b4e      	ldr	r3, [pc, #312]	@ (8003320 <UART_SetConfig+0x5c0>)
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031e8:	e00d      	b.n	8003206 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ea:	f7ff f9ad 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80031ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031f0:	e009      	b.n	8003206 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031f8:	e005      	b.n	8003206 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8090 	beq.w	800332e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	4a44      	ldr	r2, [pc, #272]	@ (8003324 <UART_SetConfig+0x5c4>)
 8003214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003218:	461a      	mov	r2, r3
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003220:	005a      	lsls	r2, r3, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	441a      	add	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	d916      	bls.n	8003268 <UART_SetConfig+0x508>
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003240:	d212      	bcs.n	8003268 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	b29b      	uxth	r3, r3
 8003246:	f023 030f 	bic.w	r3, r3, #15
 800324a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	b29a      	uxth	r2, r3
 8003258:	8bfb      	ldrh	r3, [r7, #30]
 800325a:	4313      	orrs	r3, r2
 800325c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	8bfa      	ldrh	r2, [r7, #30]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	e062      	b.n	800332e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800326e:	e05e      	b.n	800332e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003270:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003274:	2b08      	cmp	r3, #8
 8003276:	d828      	bhi.n	80032ca <UART_SetConfig+0x56a>
 8003278:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <UART_SetConfig+0x520>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032a5 	.word	0x080032a5
 8003284:	080032ad 	.word	0x080032ad
 8003288:	080032b5 	.word	0x080032b5
 800328c:	080032cb 	.word	0x080032cb
 8003290:	080032bb 	.word	0x080032bb
 8003294:	080032cb 	.word	0x080032cb
 8003298:	080032cb 	.word	0x080032cb
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	080032c3 	.word	0x080032c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7ff f9be 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 80032a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032aa:	e014      	b.n	80032d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032ac:	f7ff f9d0 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 80032b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032b2:	e010      	b.n	80032d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <UART_SetConfig+0x5c0>)
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032b8:	e00d      	b.n	80032d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7ff f945 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80032be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032c0:	e009      	b.n	80032d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032c8:	e005      	b.n	80032d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032d4:	bf00      	nop
    }

    if (pclk != 0U)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d028      	beq.n	800332e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	4a10      	ldr	r2, [pc, #64]	@ (8003324 <UART_SetConfig+0x5c4>)
 80032e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e6:	461a      	mov	r2, r3
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	441a      	add	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d910      	bls.n	8003328 <UART_SetConfig+0x5c8>
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800330c:	d20c      	bcs.n	8003328 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	b29a      	uxth	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	e009      	b.n	800332e <UART_SetConfig+0x5ce>
 800331a:	bf00      	nop
 800331c:	40008000 	.word	0x40008000
 8003320:	00f42400 	.word	0x00f42400
 8003324:	08003a24 	.word	0x08003a24
      }
      else
      {
        ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2201      	movs	r2, #1
 8003332:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2201      	movs	r2, #1
 800333a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800334a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800334e:	4618      	mov	r0, r3
 8003350:	3730      	adds	r7, #48	@ 0x30
 8003352:	46bd      	mov	sp, r7
 8003354:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01a      	beq.n	800346e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003456:	d10a      	bne.n	800346e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b098      	sub	sp, #96	@ 0x60
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034ac:	f7fd fbb6 	bl	8000c1c <HAL_GetTick>
 80034b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d12f      	bne.n	8003520 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f88e 	bl	80035f0 <UART_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d022      	beq.n	8003520 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e063      	b.n	80035e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d149      	bne.n	80035c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800352e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003536:	2200      	movs	r2, #0
 8003538:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f857 	bl	80035f0 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03c      	beq.n	80035c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	623b      	str	r3, [r7, #32]
   return(result);
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800355c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003566:	633b      	str	r3, [r7, #48]	@ 0x30
 8003568:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800356c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e6      	bne.n	8003548 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3308      	adds	r3, #8
 8003580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	60fb      	str	r3, [r7, #12]
   return(result);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3308      	adds	r3, #8
 8003598:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800359a:	61fa      	str	r2, [r7, #28]
 800359c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	e841 2300 	strex	r3, r2, [r1]
 80035a6:	617b      	str	r3, [r7, #20]
   return(result);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e5      	bne.n	800357a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e012      	b.n	80035e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3758      	adds	r7, #88	@ 0x58
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	e04f      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003608:	d04b      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fd fb07 	bl	8000c1c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <UART_WaitOnFlagUntilTimeout+0x30>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e04e      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d037      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b80      	cmp	r3, #128	@ 0x80
 8003636:	d034      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b40      	cmp	r3, #64	@ 0x40
 800363c:	d031      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d110      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2208      	movs	r2, #8
 8003652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f838 	bl	80036ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2208      	movs	r2, #8
 800365e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e029      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800367c:	d111      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f81e 	bl	80036ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e00f      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d0a0      	beq.n	8003602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b095      	sub	sp, #84	@ 0x54
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e6      	bne.n	80036d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3308      	adds	r3, #8
 800370a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	61fb      	str	r3, [r7, #28]
   return(result);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800372a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e3      	bne.n	8003704 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d118      	bne.n	8003776 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	60bb      	str	r3, [r7, #8]
   return(result);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 0310 	bic.w	r3, r3, #16
 8003758:	647b      	str	r3, [r7, #68]	@ 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6979      	ldr	r1, [r7, #20]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	613b      	str	r3, [r7, #16]
   return(result);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e6      	bne.n	8003744 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800378a:	bf00      	nop
 800378c:	3754      	adds	r7, #84	@ 0x54
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_UARTEx_DisableFifoMode+0x16>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e027      	b.n	80037fc <HAL_UARTEx_DisableFifoMode+0x66>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	@ 0x24
 80037b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80037da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800381c:	2302      	movs	r3, #2
 800381e:	e02d      	b.n	800387c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	@ 0x24
 800382c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f84f 	bl	8003900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003898:	2302      	movs	r3, #2
 800389a:	e02d      	b.n	80038f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	@ 0x24
 80038a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f811 	bl	8003900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003920:	e031      	b.n	8003986 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003922:	2308      	movs	r3, #8
 8003924:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003926:	2308      	movs	r3, #8
 8003928:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	0e5b      	lsrs	r3, r3, #25
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	0f5b      	lsrs	r3, r3, #29
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800394a:	7bbb      	ldrb	r3, [r7, #14]
 800394c:	7b3a      	ldrb	r2, [r7, #12]
 800394e:	4911      	ldr	r1, [pc, #68]	@ (8003994 <UARTEx_SetNbDataToProcess+0x94>)
 8003950:	5c8a      	ldrb	r2, [r1, r2]
 8003952:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003956:	7b3a      	ldrb	r2, [r7, #12]
 8003958:	490f      	ldr	r1, [pc, #60]	@ (8003998 <UARTEx_SetNbDataToProcess+0x98>)
 800395a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800395c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	7b7a      	ldrb	r2, [r7, #13]
 800396c:	4909      	ldr	r1, [pc, #36]	@ (8003994 <UARTEx_SetNbDataToProcess+0x94>)
 800396e:	5c8a      	ldrb	r2, [r1, r2]
 8003970:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003974:	7b7a      	ldrb	r2, [r7, #13]
 8003976:	4908      	ldr	r1, [pc, #32]	@ (8003998 <UARTEx_SetNbDataToProcess+0x98>)
 8003978:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800397a:	fb93 f3f2 	sdiv	r3, r3, r2
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	08003a3c 	.word	0x08003a3c
 8003998:	08003a44 	.word	0x08003a44

0800399c <memset>:
 800399c:	4402      	add	r2, r0
 800399e:	4603      	mov	r3, r0
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d100      	bne.n	80039a6 <memset+0xa>
 80039a4:	4770      	bx	lr
 80039a6:	f803 1b01 	strb.w	r1, [r3], #1
 80039aa:	e7f9      	b.n	80039a0 <memset+0x4>

080039ac <__libc_init_array>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4d0d      	ldr	r5, [pc, #52]	@ (80039e4 <__libc_init_array+0x38>)
 80039b0:	4c0d      	ldr	r4, [pc, #52]	@ (80039e8 <__libc_init_array+0x3c>)
 80039b2:	1b64      	subs	r4, r4, r5
 80039b4:	10a4      	asrs	r4, r4, #2
 80039b6:	2600      	movs	r6, #0
 80039b8:	42a6      	cmp	r6, r4
 80039ba:	d109      	bne.n	80039d0 <__libc_init_array+0x24>
 80039bc:	4d0b      	ldr	r5, [pc, #44]	@ (80039ec <__libc_init_array+0x40>)
 80039be:	4c0c      	ldr	r4, [pc, #48]	@ (80039f0 <__libc_init_array+0x44>)
 80039c0:	f000 f818 	bl	80039f4 <_init>
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	2600      	movs	r6, #0
 80039ca:	42a6      	cmp	r6, r4
 80039cc:	d105      	bne.n	80039da <__libc_init_array+0x2e>
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d4:	4798      	blx	r3
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7ee      	b.n	80039b8 <__libc_init_array+0xc>
 80039da:	f855 3b04 	ldr.w	r3, [r5], #4
 80039de:	4798      	blx	r3
 80039e0:	3601      	adds	r6, #1
 80039e2:	e7f2      	b.n	80039ca <__libc_init_array+0x1e>
 80039e4:	08003a54 	.word	0x08003a54
 80039e8:	08003a54 	.word	0x08003a54
 80039ec:	08003a54 	.word	0x08003a54
 80039f0:	08003a58 	.word	0x08003a58

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
