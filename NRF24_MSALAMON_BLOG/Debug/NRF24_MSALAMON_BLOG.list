
NRF24_MSALAMON_BLOG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e4c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800502c  0800502c  0000602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a4  080050a4  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080050a4  080050a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050ac  080050ac  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050ac  080050ac  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050b0  080050b0  000060b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080050b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000064  08005118  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08005118  000072f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5eb  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002523  00000000  00000000  0001667f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00018ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f9  00000000  00000000  000198b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d3e  00000000  00000000  0001a2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4e9  00000000  00000000  0003ffef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec79b  00000000  00000000  0004f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bc73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a8  00000000  00000000  0013bcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005014 	.word	0x08005014

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08005014 	.word	0x08005014

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b40      	ldr	r3, [pc, #256]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a3f      	ldr	r2, [pc, #252]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <MX_GPIO_Init+0x118>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a39      	ldr	r2, [pc, #228]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a33      	ldr	r2, [pc, #204]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <MX_GPIO_Init+0x118>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a2d      	ldr	r2, [pc, #180]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <MX_GPIO_Init+0x118>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066c:	f001 fa24 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2180      	movs	r1, #128	@ 0x80
 8000674:	4824      	ldr	r0, [pc, #144]	@ (8000708 <MX_GPIO_Init+0x11c>)
 8000676:	f001 fa1f 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000680:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	481d      	ldr	r0, [pc, #116]	@ (8000708 <MX_GPIO_Init+0x11c>)
 8000692:	f001 f88f 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|NRF24_CSN_Pin;
 8000696:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b2:	f001 f87f 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80006b6:	2380      	movs	r3, #128	@ 0x80
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	480e      	ldr	r0, [pc, #56]	@ (8000708 <MX_GPIO_Init+0x11c>)
 80006ce:	f001 f871 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IQR_Pin */
  GPIO_InitStruct.Pin = NRF24_IQR_Pin;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IQR_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	4809      	ldr	r0, [pc, #36]	@ (800070c <MX_GPIO_Init+0x120>)
 80006e8:	f001 f864 	bl	80017b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2028      	movs	r0, #40	@ 0x28
 80006f2:	f001 f82a 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006f6:	2028      	movs	r0, #40	@ 0x28
 80006f8:	f001 f841 	bl	800177e <HAL_NVIC_EnableIRQ>

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	@ 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	48000800 	.word	0x48000800
 800070c:	48000400 	.word	0x48000400

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 feaa 	bl	800146e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f83f 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f7ff ff65 	bl	80005ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000722:	f000 f9b3 	bl	8000a8c <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000726:	f000 f88b 	bl	8000840 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi2);
 800072a:	4816      	ldr	r0, [pc, #88]	@ (8000784 <main+0x74>)
 800072c:	f000 fe20 	bl	8001370 <nRF24_Init>
  nRF24_SetRXAddress(0, Nad);
 8000730:	4915      	ldr	r1, [pc, #84]	@ (8000788 <main+0x78>)
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fcfc 	bl	8001130 <nRF24_SetRXAddress>
  nRF24_SetTXAddress(Odb);
 8000738:	4814      	ldr	r0, [pc, #80]	@ (800078c <main+0x7c>)
 800073a:	f000 fd33 	bl	80011a4 <nRF24_SetTXAddress>
  nRF24_TX_Mode();
 800073e:	f000 fb1b 	bl	8000d78 <nRF24_TX_Mode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(i=0; i<10; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	e018      	b.n	800077a <main+0x6a>
	  {
		  MessageLength = sprintf((char *) Message, "%d", i );
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	461a      	mov	r2, r3
 800074c:	4910      	ldr	r1, [pc, #64]	@ (8000790 <main+0x80>)
 800074e:	4811      	ldr	r0, [pc, #68]	@ (8000794 <main+0x84>)
 8000750:	f003 ffc0 	bl	80046d4 <siprintf>
 8000754:	4603      	mov	r3, r0
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <main+0x88>)
 800075a:	701a      	strb	r2, [r3, #0]
		  nRF24_WriteTXPayload(Message);
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <main+0x84>)
 800075e:	f000 fdd1 	bl	8001304 <nRF24_WriteTXPayload>
		  HAL_Delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fef4 	bl	8001550 <HAL_Delay>
		  nRF24_WaitTX();
 8000768:	f000 fdda 	bl	8001320 <nRF24_WaitTX>
		  HAL_Delay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000770:	f000 feee 	bl	8001550 <HAL_Delay>
	  for(i=0; i<10; i++)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3301      	adds	r3, #1
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b09      	cmp	r3, #9
 800077e:	d9e3      	bls.n	8000748 <main+0x38>
 8000780:	e7df      	b.n	8000742 <main+0x32>
 8000782:	bf00      	nop
 8000784:	200000a4 	.word	0x200000a4
 8000788:	20000000 	.word	0x20000000
 800078c:	20000004 	.word	0x20000004
 8000790:	0800502c 	.word	0x0800502c
 8000794:	20000080 	.word	0x20000080
 8000798:	200000a0 	.word	0x200000a0

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	2238      	movs	r2, #56	@ 0x38
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 ffb4 	bl	8004718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007be:	2000      	movs	r0, #0
 80007c0:	f001 f9b6 	bl	8001b30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2340      	movs	r3, #64	@ 0x40
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007da:	2304      	movs	r3, #4
 80007dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007de:	2355      	movs	r3, #85	@ 0x55
 80007e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fa50 	bl	8001c98 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007fe:	f000 f818 	bl	8000832 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fd4e 	bl	80022bc <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000826:	f000 f804 	bl	8000832 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	@ 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000836:	b672      	cpsid	i
}
 8000838:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083a:	bf00      	nop
 800083c:	e7fd      	b.n	800083a <Error_Handler+0x8>
	...

08000840 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_SPI2_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	@ (80008b8 <MX_SPI2_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_SPI2_Init+0x74>)
 800084c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_SPI2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_SPI2_Init+0x74>)
 800085a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800085e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_SPI2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_SPI2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_SPI2_Init+0x74>)
 800086e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000872:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_SPI2_Init+0x74>)
 8000876:	2228      	movs	r2, #40	@ 0x28
 8000878:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_SPI2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_SPI2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_SPI2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_SPI2_Init+0x74>)
 800088e:	2207      	movs	r2, #7
 8000890:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_SPI2_Init+0x74>)
 800089a:	2208      	movs	r2, #8
 800089c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_SPI2_Init+0x74>)
 80008a0:	f002 f976 	bl	8002b90 <HAL_SPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f7ff ffc2 	bl	8000832 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000a4 	.word	0x200000a4
 80008b8:	40003800 	.word	0x40003800

080008bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <HAL_SPI_MspInit+0x7c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d128      	bne.n	8000930 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <HAL_SPI_MspInit+0x80>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e2:	4a16      	ldr	r2, [pc, #88]	@ (800093c <HAL_SPI_MspInit+0x80>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <HAL_SPI_MspInit+0x80>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <HAL_SPI_MspInit+0x80>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a10      	ldr	r2, [pc, #64]	@ (800093c <HAL_SPI_MspInit+0x80>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <HAL_SPI_MspInit+0x80>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800090e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000920:	2305      	movs	r3, #5
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <HAL_SPI_MspInit+0x84>)
 800092c:	f000 ff42 	bl	80017b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40003800 	.word	0x40003800
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094e:	4a0e      	ldr	r2, [pc, #56]	@ (8000988 <HAL_MspInit+0x44>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6613      	str	r3, [r2, #96]	@ 0x60
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <HAL_MspInit+0x44>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000966:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <HAL_MspInit+0x44>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096c:	6593      	str	r3, [r2, #88]	@ 0x58
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_MspInit+0x44>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800097a:	f001 f97d 	bl	8001c78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <MemManage_Handler+0x4>

080009a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e2:	f000 fd97 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}

080009ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009ee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009f2:	f001 f879 	bl	8001ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f003 fe7c 	bl	8004728 <__errno>
 8000a30:	4603      	mov	r3, r0
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20020000 	.word	0x20020000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	20000108 	.word	0x20000108
 8000a64:	200002f8 	.word	0x200002f8

08000a68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a90:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000a92:	4a21      	ldr	r2, [pc, #132]	@ (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000a94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000a98:	4a20      	ldr	r2, [pc, #128]	@ (8000b1c <MX_LPUART1_UART_Init+0x90>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000ab0:	220c      	movs	r2, #12
 8000ab2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000acc:	4811      	ldr	r0, [pc, #68]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000ace:	f002 ff93 	bl	80039f8 <HAL_UART_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000ad8:	f7ff feab 	bl	8000832 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000adc:	2100      	movs	r1, #0
 8000ade:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000ae0:	f003 fd2e 	bl	8004540 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000aea:	f7ff fea2 	bl	8000832 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4808      	ldr	r0, [pc, #32]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000af2:	f003 fd63 	bl	80045bc <HAL_UARTEx_SetRxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000afc:	f7ff fe99 	bl	8000832 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <MX_LPUART1_UART_Init+0x88>)
 8000b02:	f003 fce4 	bl	80044ce <HAL_UARTEx_DisableFifoMode>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000b0c:	f7ff fe91 	bl	8000832 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000010c 	.word	0x2000010c
 8000b18:	40008000 	.word	0x40008000
 8000b1c:	00033324 	.word	0x00033324

08000b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09e      	sub	sp, #120	@ 0x78
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2254      	movs	r2, #84	@ 0x54
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fde9 	bl	8004718 <memset>
  if(uartHandle->Instance==LPUART1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d136      	bne.n	8000bbe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b50:	2320      	movs	r3, #32
 8000b52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fdc9 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff fe63 	bl	8000832 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b70:	4a16      	ldr	r2, [pc, #88]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bac:	230c      	movs	r3, #12
 8000bae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bba:	f000 fdfb 	bl	80017b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3778      	adds	r7, #120	@ 0x78
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40008000 	.word	0x40008000
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 fcb8 	bl	8001550 <HAL_Delay>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <nRF24_SendSpi+0x28>)
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	f002 f870 	bl	8002ce6 <HAL_SPI_Transmit>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001a0 	.word	0x200001a0

08000c14 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <nRF24_ReadSpi+0x28>)
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	f002 f9d0 	bl	8002fd2 <HAL_SPI_Receive>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001a0 	.word	0x200001a0

08000c40 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c58:	f000 ff2e 	bl	8001ab8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ffc1 	bl	8000be8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000c66:	f107 030f 	add.w	r3, r7, #15
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffd1 	bl	8000c14 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7c:	f000 ff1c 	bl	8001ab8 <HAL_GPIO_WritePin>

	return result;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	6039      	str	r1, [r7, #0]
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	4613      	mov	r3, r2
 8000c98:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca8:	f000 ff06 	bl	8001ab8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff99 	bl	8000be8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6838      	ldr	r0, [r7, #0]
 8000cbc:	f7ff ffaa 	bl	8000c14 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cca:	f000 fef5 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	460a      	mov	r2, r1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfe:	f000 fedb 	bl	8001ab8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2102      	movs	r1, #2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff6d 	bl	8000be8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d18:	f000 fece 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	4613      	mov	r3, r2
 8000d32:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d48:	f000 feb6 	bl	8001ab8 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff49 	bl	8000be8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	f7ff ff44 	bl	8000be8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f000 fea5 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay(1);
}

void nRF24_TX_Mode(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <nRF24_TX_Mode+0x4c>)
 8000d84:	f000 fe98 	bl	8001ab8 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8000d88:	f000 f81e 	bl	8000dc8 <nRF24_ReadConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f023 0301 	bic.w	r3, r3, #1
 8000d9e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f818 	bl	8000dd8 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000da8:	2070      	movs	r0, #112	@ 0x70
 8000daa:	f000 f871 	bl	8000e90 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8000dae:	f000 f87d 	bl	8000eac <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000db2:	f000 f897 	bl	8000ee4 <nRF24_FlushTX>

	nRF24_Delay(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff ff0a 	bl	8000bd0 <nRF24_Delay>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	48000800 	.word	0x48000800

08000dc8 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ff37 	bl	8000c40 <nRF24_ReadRegister>
 8000dd2:	4603      	mov	r3, r0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	4619      	mov	r1, r3
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff ff75 	bl	8000cd6 <nRF24_WriteRegister>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f7ff ff1e 	bl	8000c40 <nRF24_ReadRegister>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	f023 0307 	bic.w	r3, r3, #7
 8000e0e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	b25a      	sxtb	r2, r3
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4619      	mov	r1, r3
 8000e26:	2006      	movs	r0, #6
 8000e28:	f7ff ff55 	bl	8000cd6 <nRF24_WriteRegister>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f7ff fefe 	bl	8000c40 <nRF24_ReadRegister>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000e4e:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d104      	bne.n	8000e60 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e006      	b.n	8000e6e <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d103      	bne.n	8000e6e <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	4619      	mov	r1, r3
 8000e72:	2006      	movs	r0, #6
 8000e74:	f7ff ff2f 	bl	8000cd6 <nRF24_WriteRegister>
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000e84:	2007      	movs	r0, #7
 8000e86:	f7ff fedb 	bl	8000c40 <nRF24_ReadRegister>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2007      	movs	r0, #7
 8000ea0:	f7ff ff19 	bl	8000cd6 <nRF24_WriteRegister>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000eb2:	23e2      	movs	r3, #226	@ 0xe2
 8000eb4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec0:	f000 fdfa 	bl	8001ab8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fe8d 	bl	8000be8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f000 fdee 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000eea:	23e1      	movs	r3, #225	@ 0xe1
 8000eec:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef8:	f000 fdde 	bl	8001ab8 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	2101      	movs	r1, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe71 	bl	8000be8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f10:	f000 fdd2 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000f26:	f7ff ff4f 	bl	8000dc8 <nRF24_ReadConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e003      	b.n	8000f46 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f023 0308 	bic.w	r3, r3, #8
 8000f44:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff45 	bl	8000dd8 <nRF24_WriteConfig>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000f60:	f7ff ff32 	bl	8000dc8 <nRF24_ReadConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d104      	bne.n	8000f78 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e003      	b.n	8000f80 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	f023 0304 	bic.w	r3, r3, #4
 8000f7e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff28 	bl	8000dd8 <nRF24_WriteConfig>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	2004      	movs	r0, #4
 8000fbc:	f7ff fe8b 	bl	8000cd6 <nRF24_WriteRegister>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f7ff fe7a 	bl	8000cd6 <nRF24_WriteRegister>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d901      	bls.n	8001004 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8001000:	2305      	movs	r3, #5
 8001002:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	3311      	adds	r3, #17
 8001008:	b2da      	uxtb	r2, r3
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f7ff fe5e 	bl	8000cd6 <nRF24_WriteRegister>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	460a      	mov	r2, r1
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	4613      	mov	r3, r2
 8001030:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b05      	cmp	r3, #5
 8001036:	d901      	bls.n	800103c <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001038:	2305      	movs	r3, #5
 800103a:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800103c:	2002      	movs	r0, #2
 800103e:	f7ff fdff 	bl	8000c40 <nRF24_ReadRegister>
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10a      	bne.n	8001062 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2201      	movs	r2, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	b25a      	sxtb	r2, r3
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4313      	orrs	r3, r2
 800105c:	b25b      	sxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e00b      	b.n	800107a <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2201      	movs	r2, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	b25a      	sxtb	r2, r3
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	4013      	ands	r3, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4619      	mov	r1, r3
 800107e:	2002      	movs	r0, #2
 8001080:	f7ff fe29 	bl	8000cd6 <nRF24_WriteRegister>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	460a      	mov	r2, r1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d901      	bls.n	80010a6 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80010a2:	2305      	movs	r3, #5
 80010a4:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff fdca 	bl	8000c40 <nRF24_ReadRegister>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d10a      	bne.n	80010cc <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2201      	movs	r2, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e00b      	b.n	80010e4 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2201      	movs	r2, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4013      	ands	r3, r2
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	4619      	mov	r1, r3
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff fdf4 	bl	8000cd6 <nRF24_WriteRegister>
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b05      	cmp	r3, #5
 8001104:	d901      	bls.n	800110a <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001106:	2305      	movs	r3, #5
 8001108:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d801      	bhi.n	8001114 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001110:	2303      	movs	r3, #3
 8001112:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	3b02      	subs	r3, #2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	2003      	movs	r0, #3
 8001124:	f7ff fdd7 	bl	8000cd6 <nRF24_WriteRegister>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <nRF24_SetRXAddress+0x18>
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d11d      	bne.n	8001184 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e00d      	b.n	800116a <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	441a      	add	r2, r3
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f1c3 0302 	rsb	r3, r3, #2
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	3310      	adds	r3, #16
 800115e:	443b      	add	r3, r7
 8001160:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	3301      	adds	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d9ee      	bls.n	800114e <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	330a      	adds	r3, #10
 8001174:	b2db      	uxtb	r3, r3
 8001176:	f107 010c 	add.w	r1, r7, #12
 800117a:	2203      	movs	r2, #3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fdd1 	bl	8000d24 <nRF24_WriteRegisters>
	{
 8001182:	e00a      	b.n	800119a <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	330a      	adds	r3, #10
 8001188:	b2da      	uxtb	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3302      	adds	r3, #2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	4610      	mov	r0, r2
 8001194:	f7ff fd9f 	bl	8000cd6 <nRF24_WriteRegister>
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2203      	movs	r2, #3
 80011b2:	4619      	mov	r1, r3
 80011b4:	200a      	movs	r0, #10
 80011b6:	f7ff fd68 	bl	8000c8a <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e00c      	b.n	80011da <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	f1c3 0302 	rsb	r3, r3, #2
 80011c8:	3210      	adds	r2, #16
 80011ca:	443a      	add	r2, r7
 80011cc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80011d0:	4a16      	ldr	r2, [pc, #88]	@ (800122c <nRF24_SetTXAddress+0x88>)
 80011d2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	3301      	adds	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d9ef      	bls.n	80011c0 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e00d      	b.n	8001202 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	441a      	add	r2, r3
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f1c3 0302 	rsb	r3, r3, #2
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	3310      	adds	r3, #16
 80011f6:	443b      	add	r3, r7
 80011f8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d9ee      	bls.n	80011e6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2203      	movs	r2, #3
 800120e:	4619      	mov	r1, r3
 8001210:	200a      	movs	r0, #10
 8001212:	f7ff fd87 	bl	8000d24 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2203      	movs	r2, #3
 800121c:	4619      	mov	r1, r3
 800121e:	2010      	movs	r0, #16
 8001220:	f7ff fd80 	bl	8000d24 <nRF24_WriteRegisters>

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001a4 	.word	0x200001a4

08001230 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001236:	f7ff fe23 	bl	8000e80 <nRF24_ReadStatus>
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001244:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fe21 	bl	8000e90 <nRF24_WriteStatus>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001260:	f7ff fdb2 	bl	8000dc8 <nRF24_ReadConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e003      	b.n	8001280 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800127e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fda8 	bl	8000dd8 <nRF24_WriteConfig>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800129a:	f7ff fd95 	bl	8000dc8 <nRF24_ReadConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d104      	bne.n	80012b2 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	f043 0320 	orr.w	r3, r3, #32
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e003      	b.n	80012ba <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f023 0320 	bic.w	r3, r3, #32
 80012b8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fd8b 	bl	8000dd8 <nRF24_WriteConfig>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80012d4:	f7ff fd78 	bl	8000dc8 <nRF24_ReadConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d104      	bne.n	80012ec <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	e003      	b.n	80012f4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	f023 0310 	bic.w	r3, r3, #16
 80012f2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fd6e 	bl	8000dd8 <nRF24_WriteConfig>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800130c:	2201      	movs	r2, #1
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	20a0      	movs	r0, #160	@ 0xa0
 8001312:	f7ff fd07 	bl	8000d24 <nRF24_WriteRegisters>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8001326:	2201      	movs	r2, #1
 8001328:	2180      	movs	r1, #128	@ 0x80
 800132a:	4810      	ldr	r0, [pc, #64]	@ (800136c <nRF24_WaitTX+0x4c>)
 800132c:	f000 fbc4 	bl	8001ab8 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff fc4d 	bl	8000bd0 <nRF24_Delay>
	NRF24_CE_LOW;
 8001336:	2200      	movs	r2, #0
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	480c      	ldr	r0, [pc, #48]	@ (800136c <nRF24_WaitTX+0x4c>)
 800133c:	f000 fbbc 	bl	8001ab8 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fc45 	bl	8000bd0 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8001346:	f7ff fd9b 	bl	8000e80 <nRF24_ReadStatus>
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	d104      	bne.n	8001362 <nRF24_WaitTX+0x42>
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0ee      	beq.n	8001340 <nRF24_WaitTX+0x20>

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	48000800 	.word	0x48000800

08001370 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001378:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <nRF24_Init+0xa4>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800137e:	2200      	movs	r2, #0
 8001380:	2180      	movs	r1, #128	@ 0x80
 8001382:	4825      	ldr	r0, [pc, #148]	@ (8001418 <nRF24_Init+0xa8>)
 8001384:	f000 fb98 	bl	8001ab8 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800138e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001392:	f000 fb91 	bl	8001ab8 <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8001396:	2005      	movs	r0, #5
 8001398:	f7ff fc1a 	bl	8000bd0 <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800139c:	2003      	movs	r0, #3
 800139e:	f7ff fd29 	bl	8000df4 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80013a2:	2002      	movs	r0, #2
 80013a4:	f7ff fd46 	bl	8000e34 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fdb7 	bl	8000f1c <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fdd1 	bl	8000f56 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80013b4:	2107      	movs	r1, #7
 80013b6:	2004      	movs	r0, #4
 80013b8:	f7ff fdea 	bl	8000f90 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80013bc:	2100      	movs	r1, #0
 80013be:	201c      	movs	r0, #28
 80013c0:	f7ff fc89 	bl	8000cd6 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80013c4:	200a      	movs	r0, #10
 80013c6:	f7ff fdff 	bl	8000fc8 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80013ca:	2101      	movs	r1, #1
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fe0c 	bl	8000fea <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80013d2:	2101      	movs	r1, #1
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fe24 	bl	8001022 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80013da:	2101      	movs	r1, #1
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe55 	bl	800108c <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80013e2:	2003      	movs	r0, #3
 80013e4:	f7ff fe87 	bl	80010f6 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 80013e8:	2014      	movs	r0, #20
 80013ea:	f7ff fbf1 	bl	8000bd0 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff ff31 	bl	8001256 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff ff4b 	bl	8001290 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff ff65 	bl	80012ca <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 8001400:	2014      	movs	r0, #20
 8001402:	f7ff fbe5 	bl	8000bd0 <nRF24_Delay>

	nRF24_ClearInterrupts();
 8001406:	f7ff ff13 	bl	8001230 <nRF24_ClearInterrupts>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200001a0 	.word	0x200001a0
 8001418:	48000800 	.word	0x48000800

0800141c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800141e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001420:	f7ff fb22 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopForever+0x6>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopForever+0xe>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopForever+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144a:	f003 f973 	bl	8004734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144e:	f7ff f95f 	bl	8000710 <main>

08001452 <LoopForever>:

LoopForever:
    b LoopForever
 8001452:	e7fe      	b.n	8001452 <LoopForever>
  ldr   r0, =_estack
 8001454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001460:	080050b4 	.word	0x080050b4
  ldr r2, =_sbss
 8001464:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001468:	200002f4 	.word	0x200002f4

0800146c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC1_2_IRQHandler>

0800146e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f95b 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f80e 	bl	80014a0 <HAL_InitTick>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	71fb      	strb	r3, [r7, #7]
 800148e:	e001      	b.n	8001494 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001490:	f7ff fa58 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001494:	79fb      	ldrb	r3, [r7, #7]

}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <HAL_InitTick+0x68>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d022      	beq.n	80014fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014b4:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_InitTick+0x6c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <HAL_InitTick+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f966 	bl	800179a <HAL_SYSTICK_Config>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10f      	bne.n	80014f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	d809      	bhi.n	80014ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014da:	2200      	movs	r2, #0
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e2:	f000 f932 	bl	800174a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <HAL_InitTick+0x70>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e007      	b.n	80014fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e004      	b.n	80014fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000010 	.word	0x20000010
 800150c:	20000008 	.word	0x20000008
 8001510:	2000000c 	.word	0x2000000c

08001514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_IncTick+0x1c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_IncTick+0x20>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4413      	add	r3, r2
 8001522:	4a03      	ldr	r2, [pc, #12]	@ (8001530 <HAL_IncTick+0x1c>)
 8001524:	6013      	str	r3, [r2, #0]
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	200001a8 	.word	0x200001a8
 8001534:	20000010 	.word	0x20000010

08001538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <HAL_GetTick+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200001a8 	.word	0x200001a8

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff ffee 	bl	8001538 <HAL_GetTick>
 800155c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001568:	d004      	beq.n	8001574 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_Delay+0x40>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001574:	bf00      	nop
 8001576:	f7ff ffdf 	bl	8001538 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	429a      	cmp	r2, r3
 8001584:	d8f7      	bhi.n	8001576 <HAL_Delay+0x26>
  {
  }
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000010 	.word	0x20000010

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	@ (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	@ (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	@ (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff40 	bl	80015dc <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff33 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa4 	bl	80016f0 <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017c2:	e15a      	b.n	8001a7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 814c 	beq.w	8001a74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d005      	beq.n	80017f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d130      	bne.n	8001856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800182a:	2201      	movs	r2, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 0201 	and.w	r2, r3, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b03      	cmp	r3, #3
 8001860:	d017      	beq.n	8001892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d123      	bne.n	80018e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	6939      	ldr	r1, [r7, #16]
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0203 	and.w	r2, r3, #3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80a6 	beq.w	8001a74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	4b5b      	ldr	r3, [pc, #364]	@ (8001a98 <HAL_GPIO_Init+0x2e4>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192c:	4a5a      	ldr	r2, [pc, #360]	@ (8001a98 <HAL_GPIO_Init+0x2e4>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6613      	str	r3, [r2, #96]	@ 0x60
 8001934:	4b58      	ldr	r3, [pc, #352]	@ (8001a98 <HAL_GPIO_Init+0x2e4>)
 8001936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001940:	4a56      	ldr	r2, [pc, #344]	@ (8001a9c <HAL_GPIO_Init+0x2e8>)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800196a:	d01f      	beq.n	80019ac <HAL_GPIO_Init+0x1f8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa0 <HAL_GPIO_Init+0x2ec>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d019      	beq.n	80019a8 <HAL_GPIO_Init+0x1f4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1f0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa8 <HAL_GPIO_Init+0x2f4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1ec>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a49      	ldr	r2, [pc, #292]	@ (8001aac <HAL_GPIO_Init+0x2f8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1e8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a48      	ldr	r2, [pc, #288]	@ (8001ab0 <HAL_GPIO_Init+0x2fc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1e4>
 8001994:	2305      	movs	r3, #5
 8001996:	e00a      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 8001998:	2306      	movs	r3, #6
 800199a:	e008      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 800199c:	2304      	movs	r3, #4
 800199e:	e006      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 80019a0:	2303      	movs	r3, #3
 80019a2:	e004      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e002      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_GPIO_Init+0x1fa>
 80019ac:	2300      	movs	r3, #0
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	f002 0203 	and.w	r2, r2, #3
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	4093      	lsls	r3, r2
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019be:	4937      	ldr	r1, [pc, #220]	@ (8001a9c <HAL_GPIO_Init+0x2e8>)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019cc:	4b39      	ldr	r3, [pc, #228]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019f0:	4a30      	ldr	r2, [pc, #192]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019f6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a1a:	4a26      	ldr	r2, [pc, #152]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a44:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a6e:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f47f ae9d 	bne.w	80017c4 <HAL_GPIO_Init+0x10>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	371c      	adds	r7, #28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	48000800 	.word	0x48000800
 8001aa8:	48000c00 	.word	0x48000c00
 8001aac:	48001000 	.word	0x48001000
 8001ab0:	48001400 	.word	0x48001400
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f806 	bl	8001b18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d141      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4a:	d131      	bne.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b4c:	4b47      	ldr	r3, [pc, #284]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b52:	4a46      	ldr	r2, [pc, #280]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5c:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b64:	4a41      	ldr	r2, [pc, #260]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b6c:	4b40      	ldr	r3, [pc, #256]	@ (8001c70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2232      	movs	r2, #50	@ 0x32
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	4a3f      	ldr	r2, [pc, #252]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	0c9b      	lsrs	r3, r3, #18
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b82:	e002      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8a:	4b38      	ldr	r3, [pc, #224]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b96:	d102      	bne.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f2      	bne.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b9e:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001baa:	d158      	bne.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e057      	b.n	8001c60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bc0:	e04d      	b.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bc8:	d141      	bne.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bca:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd6:	d131      	bne.n	8001c3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd8:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bde:	4a23      	ldr	r2, [pc, #140]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be8:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2232      	movs	r2, #50	@ 0x32
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	0c9b      	lsrs	r3, r3, #18
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c0e:	e002      	b.n	8001c16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c22:	d102      	bne.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f2      	bne.n	8001c10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c36:	d112      	bne.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e011      	b.n	8001c60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c4c:	e007      	b.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	20000008 	.word	0x20000008
 8001c74:	431bde83 	.word	0x431bde83

08001c78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c86:	6093      	str	r3, [r2, #8]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40007000 	.word	0x40007000

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e2fe      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d075      	beq.n	8001da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb6:	4b97      	ldr	r3, [pc, #604]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc0:	4b94      	ldr	r3, [pc, #592]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d102      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3e>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_OscConfig+0x44>
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d10b      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4b8d      	ldr	r3, [pc, #564]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d05b      	beq.n	8001da0 <HAL_RCC_OscConfig+0x108>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d157      	bne.n	8001da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e2d9      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x74>
 8001cfe:	4b85      	ldr	r3, [pc, #532]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a84      	ldr	r2, [pc, #528]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b7f      	ldr	r3, [pc, #508]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b7c      	ldr	r3, [pc, #496]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7b      	ldr	r2, [pc, #492]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d30:	4b78      	ldr	r3, [pc, #480]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a77      	ldr	r2, [pc, #476]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b75      	ldr	r3, [pc, #468]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a74      	ldr	r2, [pc, #464]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fbf2 	bl	8001538 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fbee 	bl	8001538 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	@ 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e29e      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xc0>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fbde 	bl	8001538 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fbda 	bl	8001538 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e28a      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d92:	4b60      	ldr	r3, [pc, #384]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0xe8>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d075      	beq.n	8001e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dae:	4b59      	ldr	r3, [pc, #356]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db8:	4b56      	ldr	r3, [pc, #344]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d102      	bne.n	8001dce <HAL_RCC_OscConfig+0x136>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d002      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x13c>
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d11f      	bne.n	8001e14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x154>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e25d      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b49      	ldr	r3, [pc, #292]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	4946      	ldr	r1, [pc, #280]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e00:	4b45      	ldr	r3, [pc, #276]	@ (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fb4b 	bl	80014a0 <HAL_InitTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d043      	beq.n	8001e98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e249      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d023      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3c      	ldr	r2, [pc, #240]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7ff fb86 	bl	8001538 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7ff fb82 	bl	8001538 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e232      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e42:	4b34      	ldr	r3, [pc, #208]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4b31      	ldr	r3, [pc, #196]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	061b      	lsls	r3, r3, #24
 8001e5c:	492d      	ldr	r1, [pc, #180]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	e01a      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e64:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2a      	ldr	r2, [pc, #168]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff fb62 	bl	8001538 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7ff fb5e 	bl	8001538 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e20e      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8a:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x1e0>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d041      	beq.n	8001f2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb4:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fb3b 	bl	8001538 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fb37 	bl	8001538 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1e7      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ef      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x22e>
 8001ee6:	e020      	b.n	8001f2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eee:	4a09      	ldr	r2, [pc, #36]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fb1e 	bl	8001538 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001efe:	e00d      	b.n	8001f1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f00:	f7ff fb1a 	bl	8001538 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d906      	bls.n	8001f1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1ca      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ea      	bne.n	8001f00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80a6 	beq.w	8002084 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f3c:	4b84      	ldr	r3, [pc, #528]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2b4>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x2b6>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00d      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b7f      	ldr	r3, [pc, #508]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	4a7e      	ldr	r2, [pc, #504]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4b79      	ldr	r3, [pc, #484]	@ (8002154 <HAL_RCC_OscConfig+0x4bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7a:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <HAL_RCC_OscConfig+0x4bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	@ (8002154 <HAL_RCC_OscConfig+0x4bc>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fad7 	bl	8001538 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff fad3 	bl	8001538 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e183      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8002154 <HAL_RCC_OscConfig+0x4bc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x32e>
 8001fb4:	4b66      	ldr	r3, [pc, #408]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fba:	4a65      	ldr	r2, [pc, #404]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fc4:	e024      	b.n	8002010 <HAL_RCC_OscConfig+0x378>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d110      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x358>
 8001fce:	4b60      	ldr	r3, [pc, #384]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd4:	4a5e      	ldr	r2, [pc, #376]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fde:	4b5c      	ldr	r3, [pc, #368]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fee:	e00f      	b.n	8002010 <HAL_RCC_OscConfig+0x378>
 8001ff0:	4b57      	ldr	r3, [pc, #348]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	4a56      	ldr	r2, [pc, #344]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002000:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	4a52      	ldr	r2, [pc, #328]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d016      	beq.n	8002046 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff fa8e 	bl	8001538 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7ff fa8a 	bl	8001538 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e138      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	4b46      	ldr	r3, [pc, #280]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ed      	beq.n	8002020 <HAL_RCC_OscConfig+0x388>
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff fa77 	bl	8001538 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff fa73 	bl	8001538 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e121      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002064:	4b3a      	ldr	r3, [pc, #232]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ed      	bne.n	800204e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002072:	7ffb      	ldrb	r3, [r7, #31]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b35      	ldr	r3, [pc, #212]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	4a34      	ldr	r2, [pc, #208]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002082:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d03c      	beq.n	800210a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800209e:	4a2c      	ldr	r2, [pc, #176]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff fa46 	bl	8001538 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b0:	f7ff fa42 	bl	8001538 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0f2      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ef      	beq.n	80020b0 <HAL_RCC_OscConfig+0x418>
 80020d0:	e01b      	b.n	800210a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7ff fa29 	bl	8001538 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ea:	f7ff fa25 	bl	8001538 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0d5      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020fc:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 80020fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ef      	bne.n	80020ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80c9 	beq.w	80022a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b0c      	cmp	r3, #12
 800211e:	f000 8083 	beq.w	8002228 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d15e      	bne.n	80021e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a08      	ldr	r2, [pc, #32]	@ (8002150 <HAL_RCC_OscConfig+0x4b8>)
 8002130:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7ff f9ff 	bl	8001538 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	e00c      	b.n	8002158 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7ff f9fb 	bl	8001538 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d905      	bls.n	8002158 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0ab      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002158:	4b55      	ldr	r3, [pc, #340]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ec      	bne.n	800213e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002164:	4b52      	ldr	r3, [pc, #328]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	4b52      	ldr	r3, [pc, #328]	@ (80022b4 <HAL_RCC_OscConfig+0x61c>)
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6a11      	ldr	r1, [r2, #32]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002174:	3a01      	subs	r2, #1
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800217e:	0212      	lsls	r2, r2, #8
 8002180:	4311      	orrs	r1, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002186:	0852      	lsrs	r2, r2, #1
 8002188:	3a01      	subs	r2, #1
 800218a:	0552      	lsls	r2, r2, #21
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002192:	0852      	lsrs	r2, r2, #1
 8002194:	3a01      	subs	r2, #1
 8002196:	0652      	lsls	r2, r2, #25
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800219e:	06d2      	lsls	r2, r2, #27
 80021a0:	430a      	orrs	r2, r1
 80021a2:	4943      	ldr	r1, [pc, #268]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a40      	ldr	r2, [pc, #256]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b4:	4b3e      	ldr	r3, [pc, #248]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a3d      	ldr	r2, [pc, #244]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7ff f9ba 	bl	8001538 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f9b6 	bl	8001538 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e066      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x530>
 80021e6:	e05e      	b.n	80022a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e8:	4b31      	ldr	r3, [pc, #196]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a30      	ldr	r2, [pc, #192]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 80021ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff f9a0 	bl	8001538 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff f99c 	bl	8001538 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e04c      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220e:	4b28      	ldr	r3, [pc, #160]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800221a:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	4924      	ldr	r1, [pc, #144]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 8002220:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <HAL_RCC_OscConfig+0x620>)
 8002222:	4013      	ands	r3, r2
 8002224:	60cb      	str	r3, [r1, #12]
 8002226:	e03e      	b.n	80022a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e039      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002234:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <HAL_RCC_OscConfig+0x618>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0203 	and.w	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d12c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	3b01      	subs	r3, #1
 8002254:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d123      	bne.n	80022a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d11b      	bne.n	80022a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d113      	bne.n	80022a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	3b01      	subs	r3, #1
 8002288:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	3b01      	subs	r3, #1
 800229c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	019f800c 	.word	0x019f800c
 80022b8:	feeefffc 	.word	0xfeeefffc

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e11e      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b91      	ldr	r3, [pc, #580]	@ (800251c <HAL_RCC_ClockConfig+0x260>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b8e      	ldr	r3, [pc, #568]	@ (800251c <HAL_RCC_ClockConfig+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 020f 	bic.w	r2, r3, #15
 80022ea:	498c      	ldr	r1, [pc, #560]	@ (800251c <HAL_RCC_ClockConfig+0x260>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b8a      	ldr	r3, [pc, #552]	@ (800251c <HAL_RCC_ClockConfig+0x260>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e106      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d073      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d129      	bne.n	800236c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002318:	4b81      	ldr	r3, [pc, #516]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0f4      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002328:	f000 f99e 	bl	8002668 <RCC_GetSysClockFreqFromPLLSource>
 800232c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4a7c      	ldr	r2, [pc, #496]	@ (8002524 <HAL_RCC_ClockConfig+0x268>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d93f      	bls.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002336:	4b7a      	ldr	r3, [pc, #488]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	d033      	beq.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d12f      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002356:	4b72      	ldr	r3, [pc, #456]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800235e:	4a70      	ldr	r2, [pc, #448]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002364:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e024      	b.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d107      	bne.n	8002384 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002374:	4b6a      	ldr	r3, [pc, #424]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0c6      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	4b66      	ldr	r3, [pc, #408]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0be      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002394:	f000 f8ce 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8002398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4a61      	ldr	r2, [pc, #388]	@ (8002524 <HAL_RCC_ClockConfig+0x268>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d909      	bls.n	80023b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4957      	ldr	r1, [pc, #348]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c8:	f7ff f8b6 	bl	8001538 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7ff f8b2 	bl	8001538 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e095      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b43      	ldr	r3, [pc, #268]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a42      	ldr	r2, [pc, #264]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800241a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002428:	4b3d      	ldr	r3, [pc, #244]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002430:	4a3b      	ldr	r2, [pc, #236]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002432:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b39      	ldr	r3, [pc, #228]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4936      	ldr	r1, [pc, #216]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
 800244a:	e008      	b.n	800245e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b80      	cmp	r3, #128	@ 0x80
 8002450:	d105      	bne.n	800245e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002452:	4b33      	ldr	r3, [pc, #204]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4a32      	ldr	r2, [pc, #200]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 8002458:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800245c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800245e:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <HAL_RCC_ClockConfig+0x260>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d21d      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <HAL_RCC_ClockConfig+0x260>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 020f 	bic.w	r2, r3, #15
 8002474:	4929      	ldr	r1, [pc, #164]	@ (800251c <HAL_RCC_ClockConfig+0x260>)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800247c:	f7ff f85c 	bl	8001538 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7ff f858 	bl	8001538 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e03b      	b.n	8002512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_RCC_ClockConfig+0x260>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1ed      	bne.n	8002484 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4917      	ldr	r1, [pc, #92]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490f      	ldr	r1, [pc, #60]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e6:	f000 f825 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <HAL_RCC_ClockConfig+0x264>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490c      	ldr	r1, [pc, #48]	@ (8002528 <HAL_RCC_ClockConfig+0x26c>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <HAL_RCC_ClockConfig+0x270>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_RCC_ClockConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe ffc8 	bl	80014a0 <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	04c4b400 	.word	0x04c4b400
 8002528:	08005030 	.word	0x08005030
 800252c:	20000008 	.word	0x20000008
 8002530:	2000000c 	.word	0x2000000c

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800253a:	4b2c      	ldr	r3, [pc, #176]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d102      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002546:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e047      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800254c:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d102      	bne.n	800255e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002558:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e03e      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d136      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800256a:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002574:	4b1d      	ldr	r3, [pc, #116]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3301      	adds	r3, #1
 8002580:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002588:	4a1a      	ldr	r2, [pc, #104]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4a16      	ldr	r2, [pc, #88]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002592:	68d2      	ldr	r2, [r2, #12]
 8002594:	0a12      	lsrs	r2, r2, #8
 8002596:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
      break;
 80025a0:	e00c      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a2:	4a13      	ldr	r2, [pc, #76]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	0a12      	lsrs	r2, r2, #8
 80025b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
      break;
 80025ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0e5b      	lsrs	r3, r3, #25
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	3301      	adds	r3, #1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e001      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025dc:	693b      	ldr	r3, [r7, #16]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	00f42400 	.word	0x00f42400
 80025f4:	016e3600 	.word	0x016e3600

080025f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <HAL_RCC_GetHCLKFreq+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000008 	.word	0x20000008

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002614:	f7ff fff0 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4904      	ldr	r1, [pc, #16]	@ (8002638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	08005040 	.word	0x08005040

0800263c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002640:	f7ff ffda 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0adb      	lsrs	r3, r3, #11
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	@ (8002664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08005040 	.word	0x08005040

08002668 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266e:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d10c      	bne.n	80026a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800268c:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002696:	68d2      	ldr	r2, [r2, #12]
 8002698:	0a12      	lsrs	r2, r2, #8
 800269a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
    break;
 80026a4:	e00c      	b.n	80026c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4a0e      	ldr	r2, [pc, #56]	@ (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	0a12      	lsrs	r2, r2, #8
 80026b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    break;
 80026be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c0:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0e5b      	lsrs	r3, r3, #25
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026da:	687b      	ldr	r3, [r7, #4]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	016e3600 	.word	0x016e3600
 80026f0:	00f42400 	.word	0x00f42400

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026fc:	2300      	movs	r3, #0
 80026fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002700:	2300      	movs	r3, #0
 8002702:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8098 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	4a3f      	ldr	r2, [pc, #252]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	@ 0x58
 800272e:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273e:	4b3a      	ldr	r3, [pc, #232]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a39      	ldr	r2, [pc, #228]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274a:	f7fe fef5 	bl	8001538 <HAL_GetTick>
 800274e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002750:	e009      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe fef1 	bl	8001538 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d902      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	74fb      	strb	r3, [r7, #19]
        break;
 8002764:	e005      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002766:	4b30      	ldr	r3, [pc, #192]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d159      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002778:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002782:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01e      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	429a      	cmp	r2, r3
 8002792:	d019      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002794:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c0:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe feb1 	bl	8001538 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d8:	e00b      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fead 	bl	8001538 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d902      	bls.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	74fb      	strb	r3, [r7, #19]
            break;
 80027f0:	e006      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ec      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002806:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002814:	4903      	ldr	r1, [pc, #12]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800281c:	e008      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	74bb      	strb	r3, [r7, #18]
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002830:	7c7b      	ldrb	r3, [r7, #17]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4ba7      	ldr	r3, [pc, #668]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	4aa6      	ldr	r2, [pc, #664]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002840:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284e:	4ba1      	ldr	r3, [pc, #644]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002854:	f023 0203 	bic.w	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	499d      	ldr	r1, [pc, #628]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002870:	4b98      	ldr	r3, [pc, #608]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	f023 020c 	bic.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4995      	ldr	r1, [pc, #596]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002892:	4b90      	ldr	r3, [pc, #576]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	498c      	ldr	r1, [pc, #560]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b4:	4b87      	ldr	r3, [pc, #540]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	4984      	ldr	r1, [pc, #528]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	497b      	ldr	r1, [pc, #492]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f8:	4b76      	ldr	r3, [pc, #472]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4973      	ldr	r1, [pc, #460]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	496a      	ldr	r1, [pc, #424]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800293c:	4b65      	ldr	r3, [pc, #404]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4962      	ldr	r1, [pc, #392]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800295e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	4959      	ldr	r1, [pc, #356]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002980:	4b54      	ldr	r3, [pc, #336]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002986:	f023 0203 	bic.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298e:	4951      	ldr	r1, [pc, #324]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029a2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	4948      	ldr	r1, [pc, #288]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c4:	4b43      	ldr	r3, [pc, #268]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	4940      	ldr	r1, [pc, #256]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ee:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029fc:	4b35      	ldr	r3, [pc, #212]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0a:	4932      	ldr	r1, [pc, #200]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a26:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d015      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a34:	4b27      	ldr	r3, [pc, #156]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a42:	4924      	ldr	r1, [pc, #144]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a52:	d105      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7a:	4916      	ldr	r1, [pc, #88]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a10      	ldr	r2, [pc, #64]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d019      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aaa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	4908      	ldr	r1, [pc, #32]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac4:	4b03      	ldr	r3, [pc, #12]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a02      	ldr	r2, [pc, #8]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ace:	60d3      	str	r3, [r2, #12]
 8002ad0:	e002      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ae4:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	4926      	ldr	r1, [pc, #152]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b02:	d105      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b04:	4b21      	ldr	r3, [pc, #132]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a20      	ldr	r2, [pc, #128]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b22:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b2a:	4918      	ldr	r1, [pc, #96]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	490a      	ldr	r1, [pc, #40]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b72:	d105      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b80:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e09d      	b.n	8002cde <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bb2:	d009      	beq.n	8002bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
 8002bba:	e005      	b.n	8002bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fe6a 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c08:	d902      	bls.n	8002c10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e002      	b.n	8002c16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c1e:	d007      	beq.n	8002c30 <HAL_SPI_Init+0xa0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c72:	ea42 0103 	orr.w	r1, r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	f003 0204 	and.w	r2, r3, #4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002cac:	ea42 0103 	orr.w	r1, r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b088      	sub	sp, #32
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf6:	f7fe fc1f 	bl	8001538 <HAL_GetTick>
 8002cfa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d001      	beq.n	8002d10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e15c      	b.n	8002fca <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_Transmit+0x36>
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e154      	b.n	8002fca <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_SPI_Transmit+0x48>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e14d      	b.n	8002fca <HAL_SPI_Transmit+0x2e4>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d80:	d10f      	bne.n	8002da2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002da0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dac:	2b40      	cmp	r3, #64	@ 0x40
 8002dae:	d007      	beq.n	8002dc0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dc8:	d952      	bls.n	8002e70 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SPI_Transmit+0xf2>
 8002dd2:	8b7b      	ldrh	r3, [r7, #26]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d145      	bne.n	8002e64 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	881a      	ldrh	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dfc:	e032      	b.n	8002e64 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d112      	bne.n	8002e32 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e30:	e018      	b.n	8002e64 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e32:	f7fe fb81 	bl	8001538 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d803      	bhi.n	8002e4a <HAL_SPI_Transmit+0x164>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e48:	d102      	bne.n	8002e50 <HAL_SPI_Transmit+0x16a>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0b2      	b.n	8002fca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1c7      	bne.n	8002dfe <HAL_SPI_Transmit+0x118>
 8002e6e:	e083      	b.n	8002f78 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_SPI_Transmit+0x198>
 8002e78:	8b7b      	ldrh	r3, [r7, #26]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d177      	bne.n	8002f6e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d912      	bls.n	8002eae <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e98:	1c9a      	adds	r2, r3, #2
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b02      	subs	r3, #2
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002eac:	e05f      	b.n	8002f6e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ed4:	e04b      	b.n	8002f6e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d12b      	bne.n	8002f3c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d912      	bls.n	8002f14 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	1c9a      	adds	r2, r3, #2
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b02      	subs	r3, #2
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f12:	e02c      	b.n	8002f6e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f3a:	e018      	b.n	8002f6e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f3c:	f7fe fafc 	bl	8001538 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d803      	bhi.n	8002f54 <HAL_SPI_Transmit+0x26e>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f52:	d102      	bne.n	8002f5a <HAL_SPI_Transmit+0x274>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e02d      	b.n	8002fca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ae      	bne.n	8002ed6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	6839      	ldr	r1, [r7, #0]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fcf5 	bl	800396c <SPI_EndRxTxTransaction>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b088      	sub	sp, #32
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d001      	beq.n	8002ff2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e123      	b.n	800323a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_SPI_Receive+0x2c>
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e11b      	b.n	800323a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800300a:	d112      	bne.n	8003032 <HAL_SPI_Receive+0x60>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10e      	bne.n	8003032 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2204      	movs	r2, #4
 8003018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f90a 	bl	8003242 <HAL_SPI_TransmitReceive>
 800302e:	4603      	mov	r3, r0
 8003030:	e103      	b.n	800323a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003032:	f7fe fa81 	bl	8001538 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_SPI_Receive+0x74>
 8003042:	2302      	movs	r3, #2
 8003044:	e0f9      	b.n	800323a <HAL_SPI_Receive+0x268>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2204      	movs	r2, #4
 8003052:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	88fa      	ldrh	r2, [r7, #6]
 8003066:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003098:	d908      	bls.n	80030ac <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e007      	b.n	80030bc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030ba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c4:	d10f      	bne.n	80030e6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f0:	2b40      	cmp	r3, #64	@ 0x40
 80030f2:	d007      	beq.n	8003104 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800310c:	d875      	bhi.n	80031fa <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800310e:	e037      	b.n	8003180 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d117      	bne.n	800314e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f103 020c 	add.w	r2, r3, #12
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800314c:	e018      	b.n	8003180 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800314e:	f7fe f9f3 	bl	8001538 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d803      	bhi.n	8003166 <HAL_SPI_Receive+0x194>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003164:	d102      	bne.n	800316c <HAL_SPI_Receive+0x19a>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e05c      	b.n	800323a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1c1      	bne.n	8003110 <HAL_SPI_Receive+0x13e>
 800318c:	e03b      	b.n	8003206 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d115      	bne.n	80031c8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	b292      	uxth	r2, r2
 80031a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	1c9a      	adds	r2, r3, #2
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80031c6:	e018      	b.n	80031fa <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c8:	f7fe f9b6 	bl	8001538 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d803      	bhi.n	80031e0 <HAL_SPI_Receive+0x20e>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031de:	d102      	bne.n	80031e6 <HAL_SPI_Receive+0x214>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e01f      	b.n	800323a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1c3      	bne.n	800318e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	6839      	ldr	r1, [r7, #0]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fb56 	bl	80038bc <SPI_EndRxTransaction>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003238:	2300      	movs	r3, #0
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08a      	sub	sp, #40	@ 0x28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003250:	2301      	movs	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003254:	f7fe f970 	bl	8001538 <HAL_GetTick>
 8003258:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003260:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003270:	7ffb      	ldrb	r3, [r7, #31]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d00c      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x4e>
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800327c:	d106      	bne.n	800328c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <HAL_SPI_TransmitReceive+0x4a>
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d001      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
 800328e:	e1f3      	b.n	8003678 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0x60>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0x60>
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e1e8      	b.n	8003678 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x72>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e1e1      	b.n	8003678 <HAL_SPI_TransmitReceive+0x436>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d003      	beq.n	80032d0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2205      	movs	r2, #5
 80032cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	887a      	ldrh	r2, [r7, #2]
 80032f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003312:	d802      	bhi.n	800331a <HAL_SPI_TransmitReceive+0xd8>
 8003314:	8abb      	ldrh	r3, [r7, #20]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d908      	bls.n	800332c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	e007      	b.n	800333c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003346:	2b40      	cmp	r3, #64	@ 0x40
 8003348:	d007      	beq.n	800335a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003362:	f240 8083 	bls.w	800346c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_SPI_TransmitReceive+0x132>
 800336e:	8afb      	ldrh	r3, [r7, #22]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d16f      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	881a      	ldrh	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	1c9a      	adds	r2, r3, #2
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003398:	e05c      	b.n	8003454 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d11b      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x19e>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x19e>
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d113      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d11c      	bne.n	8003428 <HAL_SPI_TransmitReceive+0x1e6>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	b292      	uxth	r2, r2
 8003406:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	1c9a      	adds	r2, r3, #2
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003424:	2301      	movs	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003428:	f7fe f886 	bl	8001538 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003434:	429a      	cmp	r2, r3
 8003436:	d80d      	bhi.n	8003454 <HAL_SPI_TransmitReceive+0x212>
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800343e:	d009      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e111      	b.n	8003678 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d19d      	bne.n	800339a <HAL_SPI_TransmitReceive+0x158>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d197      	bne.n	800339a <HAL_SPI_TransmitReceive+0x158>
 800346a:	e0e5      	b.n	8003638 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_SPI_TransmitReceive+0x23a>
 8003474:	8afb      	ldrh	r3, [r7, #22]
 8003476:	2b01      	cmp	r3, #1
 8003478:	f040 80d1 	bne.w	800361e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d912      	bls.n	80034ac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	1c9a      	adds	r2, r3, #2
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b02      	subs	r3, #2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034aa:	e0b8      	b.n	800361e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	7812      	ldrb	r2, [r2, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d2:	e0a4      	b.n	800361e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d134      	bne.n	800354c <HAL_SPI_TransmitReceive+0x30a>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d02f      	beq.n	800354c <HAL_SPI_TransmitReceive+0x30a>
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d12c      	bne.n	800354c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d912      	bls.n	8003522 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b02      	subs	r3, #2
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003520:	e012      	b.n	8003548 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d148      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x3aa>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d042      	beq.n	80035ec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d923      	bls.n	80035ba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	b292      	uxth	r2, r2
 800357e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	1c9a      	adds	r2, r3, #2
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b02      	subs	r3, #2
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d81f      	bhi.n	80035e8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	e016      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f103 020c 	add.w	r2, r3, #12
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	7812      	ldrb	r2, [r2, #0]
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035e8:	2301      	movs	r3, #1
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035ec:	f7fd ffa4 	bl	8001538 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d803      	bhi.n	8003604 <HAL_SPI_TransmitReceive+0x3c2>
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003602:	d102      	bne.n	800360a <HAL_SPI_TransmitReceive+0x3c8>
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e02c      	b.n	8003678 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f af55 	bne.w	80034d4 <HAL_SPI_TransmitReceive+0x292>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	f47f af4e 	bne.w	80034d4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f995 	bl	800396c <SPI_EndRxTxTransaction>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e00e      	b.n	8003678 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003676:	2300      	movs	r3, #0
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	@ 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003690:	f7fd ff52 	bl	8001538 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4413      	add	r3, r2
 800369e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036a0:	f7fd ff4a 	bl	8001538 <HAL_GetTick>
 80036a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036a6:	4b39      	ldr	r3, [pc, #228]	@ (800378c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	015b      	lsls	r3, r3, #5
 80036ac:	0d1b      	lsrs	r3, r3, #20
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036b6:	e054      	b.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036be:	d050      	beq.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c0:	f7fd ff3a 	bl	8001538 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d902      	bls.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d13d      	bne.n	8003752 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ee:	d111      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f8:	d004      	beq.n	8003704 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003702:	d107      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003712:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371c:	d10f      	bne.n	800373e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800373c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e017      	b.n	8003782 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3b01      	subs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	429a      	cmp	r2, r3
 800377e:	d19b      	bne.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000008 	.word	0x20000008

08003790 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037a2:	f7fd fec9 	bl	8001538 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	4413      	add	r3, r2
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80037b2:	f7fd fec1 	bl	8001538 <HAL_GetTick>
 80037b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037c0:	4b3d      	ldr	r3, [pc, #244]	@ (80038b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00da      	lsls	r2, r3, #3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	0d1b      	lsrs	r3, r3, #20
 80037d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037d8:	e060      	b.n	800389c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037e0:	d107      	bne.n	80037f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037f8:	d050      	beq.n	800389c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037fa:	f7fd fe9d 	bl	8001538 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003806:	429a      	cmp	r2, r3
 8003808:	d902      	bls.n	8003810 <SPI_WaitFifoStateUntilTimeout+0x80>
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	2b00      	cmp	r3, #0
 800380e:	d13d      	bne.n	800388c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800381e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003828:	d111      	bne.n	800384e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003832:	d004      	beq.n	800383e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383c:	d107      	bne.n	800384e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800384c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003856:	d10f      	bne.n	8003878 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003876:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e010      	b.n	80038ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	3b01      	subs	r3, #1
 800389a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d196      	bne.n	80037da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3728      	adds	r7, #40	@ 0x28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000008 	.word	0x20000008

080038bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038d0:	d111      	bne.n	80038f6 <SPI_EndRxTransaction+0x3a>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038da:	d004      	beq.n	80038e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e4:	d107      	bne.n	80038f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2200      	movs	r2, #0
 80038fe:	2180      	movs	r1, #128	@ 0x80
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff febd 	bl	8003680 <SPI_WaitFlagStateUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e023      	b.n	8003964 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003924:	d11d      	bne.n	8003962 <SPI_EndRxTransaction+0xa6>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392e:	d004      	beq.n	800393a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003938:	d113      	bne.n	8003962 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff ff22 	bl	8003790 <SPI_WaitFifoStateUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e000      	b.n	8003964 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2200      	movs	r2, #0
 8003980:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff ff03 	bl	8003790 <SPI_WaitFifoStateUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e027      	b.n	80039f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2200      	movs	r2, #0
 80039a8:	2180      	movs	r1, #128	@ 0x80
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff fe68 	bl	8003680 <SPI_WaitFlagStateUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	f043 0220 	orr.w	r2, r3, #32
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e014      	b.n	80039f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fedc 	bl	8003790 <SPI_WaitFifoStateUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e000      	b.n	80039f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e042      	b.n	8003a90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fd f87f 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2224      	movs	r2, #36	@ 0x24
 8003a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fb24 	bl	8004090 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f825 	bl	8003a98 <UART_SetConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e01b      	b.n	8003a90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fba3 	bl	80041d4 <UART_CheckIdleState>
 8003a8e:	4603      	mov	r3, r0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a9c:	b08c      	sub	sp, #48	@ 0x30
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4baa      	ldr	r3, [pc, #680]	@ (8003d70 <UART_SetConfig+0x2d8>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a9f      	ldr	r2, [pc, #636]	@ (8003d74 <UART_SetConfig+0x2dc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b00:	4313      	orrs	r3, r2
 8003b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003b0e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b22:	f023 010f 	bic.w	r1, r3, #15
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a90      	ldr	r2, [pc, #576]	@ (8003d78 <UART_SetConfig+0x2e0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d125      	bne.n	8003b88 <UART_SetConfig+0xf0>
 8003b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8003d7c <UART_SetConfig+0x2e4>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d81a      	bhi.n	8003b80 <UART_SetConfig+0xe8>
 8003b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <UART_SetConfig+0xb8>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b71 	.word	0x08003b71
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b79 	.word	0x08003b79
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b66:	e116      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6e:	e112      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003b70:	2304      	movs	r3, #4
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b76:	e10e      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003b78:	2308      	movs	r3, #8
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	e10a      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003b80:	2310      	movs	r3, #16
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b86:	e106      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a7c      	ldr	r2, [pc, #496]	@ (8003d80 <UART_SetConfig+0x2e8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d138      	bne.n	8003c04 <UART_SetConfig+0x16c>
 8003b92:	4b7a      	ldr	r3, [pc, #488]	@ (8003d7c <UART_SetConfig+0x2e4>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d82d      	bhi.n	8003bfc <UART_SetConfig+0x164>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <UART_SetConfig+0x110>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003bfd 	.word	0x08003bfd
 8003bb0:	08003bfd 	.word	0x08003bfd
 8003bb4:	08003bfd 	.word	0x08003bfd
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003bfd 	.word	0x08003bfd
 8003bc0:	08003bfd 	.word	0x08003bfd
 8003bc4:	08003bfd 	.word	0x08003bfd
 8003bc8:	08003be5 	.word	0x08003be5
 8003bcc:	08003bfd 	.word	0x08003bfd
 8003bd0:	08003bfd 	.word	0x08003bfd
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003bf5 	.word	0x08003bf5
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be2:	e0d8      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003be4:	2302      	movs	r3, #2
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bea:	e0d4      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003bec:	2304      	movs	r3, #4
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf2:	e0d0      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfa:	e0cc      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c02:	e0c8      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5e      	ldr	r2, [pc, #376]	@ (8003d84 <UART_SetConfig+0x2ec>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d125      	bne.n	8003c5a <UART_SetConfig+0x1c2>
 8003c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003d7c <UART_SetConfig+0x2e4>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c18:	2b30      	cmp	r3, #48	@ 0x30
 8003c1a:	d016      	beq.n	8003c4a <UART_SetConfig+0x1b2>
 8003c1c:	2b30      	cmp	r3, #48	@ 0x30
 8003c1e:	d818      	bhi.n	8003c52 <UART_SetConfig+0x1ba>
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d00a      	beq.n	8003c3a <UART_SetConfig+0x1a2>
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d814      	bhi.n	8003c52 <UART_SetConfig+0x1ba>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <UART_SetConfig+0x19a>
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d008      	beq.n	8003c42 <UART_SetConfig+0x1aa>
 8003c30:	e00f      	b.n	8003c52 <UART_SetConfig+0x1ba>
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c38:	e0ad      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c40:	e0a9      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003c42:	2304      	movs	r3, #4
 8003c44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c48:	e0a5      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c50:	e0a1      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003c52:	2310      	movs	r3, #16
 8003c54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c58:	e09d      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d88 <UART_SetConfig+0x2f0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d125      	bne.n	8003cb0 <UART_SetConfig+0x218>
 8003c64:	4b45      	ldr	r3, [pc, #276]	@ (8003d7c <UART_SetConfig+0x2e4>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c70:	d016      	beq.n	8003ca0 <UART_SetConfig+0x208>
 8003c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c74:	d818      	bhi.n	8003ca8 <UART_SetConfig+0x210>
 8003c76:	2b80      	cmp	r3, #128	@ 0x80
 8003c78:	d00a      	beq.n	8003c90 <UART_SetConfig+0x1f8>
 8003c7a:	2b80      	cmp	r3, #128	@ 0x80
 8003c7c:	d814      	bhi.n	8003ca8 <UART_SetConfig+0x210>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <UART_SetConfig+0x1f0>
 8003c82:	2b40      	cmp	r3, #64	@ 0x40
 8003c84:	d008      	beq.n	8003c98 <UART_SetConfig+0x200>
 8003c86:	e00f      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c8e:	e082      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003c90:	2302      	movs	r3, #2
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c96:	e07e      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c9e:	e07a      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca6:	e076      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cae:	e072      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a35      	ldr	r2, [pc, #212]	@ (8003d8c <UART_SetConfig+0x2f4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d12a      	bne.n	8003d10 <UART_SetConfig+0x278>
 8003cba:	4b30      	ldr	r3, [pc, #192]	@ (8003d7c <UART_SetConfig+0x2e4>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cc8:	d01a      	beq.n	8003d00 <UART_SetConfig+0x268>
 8003cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cce:	d81b      	bhi.n	8003d08 <UART_SetConfig+0x270>
 8003cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd4:	d00c      	beq.n	8003cf0 <UART_SetConfig+0x258>
 8003cd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cda:	d815      	bhi.n	8003d08 <UART_SetConfig+0x270>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <UART_SetConfig+0x250>
 8003ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce4:	d008      	beq.n	8003cf8 <UART_SetConfig+0x260>
 8003ce6:	e00f      	b.n	8003d08 <UART_SetConfig+0x270>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cee:	e052      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf6:	e04e      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfe:	e04a      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003d00:	2308      	movs	r3, #8
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d06:	e046      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d0e:	e042      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <UART_SetConfig+0x2dc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d13a      	bne.n	8003d90 <UART_SetConfig+0x2f8>
 8003d1a:	4b18      	ldr	r3, [pc, #96]	@ (8003d7c <UART_SetConfig+0x2e4>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d28:	d01a      	beq.n	8003d60 <UART_SetConfig+0x2c8>
 8003d2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d2e:	d81b      	bhi.n	8003d68 <UART_SetConfig+0x2d0>
 8003d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d34:	d00c      	beq.n	8003d50 <UART_SetConfig+0x2b8>
 8003d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d3a:	d815      	bhi.n	8003d68 <UART_SetConfig+0x2d0>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <UART_SetConfig+0x2b0>
 8003d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d44:	d008      	beq.n	8003d58 <UART_SetConfig+0x2c0>
 8003d46:	e00f      	b.n	8003d68 <UART_SetConfig+0x2d0>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4e:	e022      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003d50:	2302      	movs	r3, #2
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d56:	e01e      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5e:	e01a      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003d60:	2308      	movs	r3, #8
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d66:	e016      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6e:	e012      	b.n	8003d96 <UART_SetConfig+0x2fe>
 8003d70:	cfff69f3 	.word	0xcfff69f3
 8003d74:	40008000 	.word	0x40008000
 8003d78:	40013800 	.word	0x40013800
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40004400 	.word	0x40004400
 8003d84:	40004800 	.word	0x40004800
 8003d88:	40004c00 	.word	0x40004c00
 8003d8c:	40005000 	.word	0x40005000
 8003d90:	2310      	movs	r3, #16
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4aae      	ldr	r2, [pc, #696]	@ (8004054 <UART_SetConfig+0x5bc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	f040 8097 	bne.w	8003ed0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003da2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d823      	bhi.n	8003df2 <UART_SetConfig+0x35a>
 8003daa:	a201      	add	r2, pc, #4	@ (adr r2, 8003db0 <UART_SetConfig+0x318>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003df3 	.word	0x08003df3
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003df3 	.word	0x08003df3
 8003dc0:	08003de3 	.word	0x08003de3
 8003dc4:	08003df3 	.word	0x08003df3
 8003dc8:	08003df3 	.word	0x08003df3
 8003dcc:	08003df3 	.word	0x08003df3
 8003dd0:	08003deb 	.word	0x08003deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7fe fc1c 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dda:	e010      	b.n	8003dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ddc:	4b9e      	ldr	r3, [pc, #632]	@ (8004058 <UART_SetConfig+0x5c0>)
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003de0:	e00d      	b.n	8003dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de2:	f7fe fba7 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8003de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003de8:	e009      	b.n	8003dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003df0:	e005      	b.n	8003dfe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8130 	beq.w	8004066 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	4a94      	ldr	r2, [pc, #592]	@ (800405c <UART_SetConfig+0x5c4>)
 8003e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e10:	461a      	mov	r2, r3
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d305      	bcc.n	8003e36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d903      	bls.n	8003e3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e3c:	e113      	b.n	8004066 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	2200      	movs	r2, #0
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	60fa      	str	r2, [r7, #12]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	4a84      	ldr	r2, [pc, #528]	@ (800405c <UART_SetConfig+0x5c4>)
 8003e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2200      	movs	r2, #0
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e60:	f7fc fa2e 	bl	80002c0 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	020b      	lsls	r3, r1, #8
 8003e76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e7a:	0202      	lsls	r2, r0, #8
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	6849      	ldr	r1, [r1, #4]
 8003e80:	0849      	lsrs	r1, r1, #1
 8003e82:	2000      	movs	r0, #0
 8003e84:	460c      	mov	r4, r1
 8003e86:	4605      	mov	r5, r0
 8003e88:	eb12 0804 	adds.w	r8, r2, r4
 8003e8c:	eb43 0905 	adc.w	r9, r3, r5
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	469a      	mov	sl, r3
 8003e98:	4693      	mov	fp, r2
 8003e9a:	4652      	mov	r2, sl
 8003e9c:	465b      	mov	r3, fp
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	f7fc fa0d 	bl	80002c0 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4613      	mov	r3, r2
 8003eac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb4:	d308      	bcc.n	8003ec8 <UART_SetConfig+0x430>
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ebc:	d204      	bcs.n	8003ec8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6a3a      	ldr	r2, [r7, #32]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	e0ce      	b.n	8004066 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ece:	e0ca      	b.n	8004066 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ed8:	d166      	bne.n	8003fa8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003eda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d827      	bhi.n	8003f32 <UART_SetConfig+0x49a>
 8003ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <UART_SetConfig+0x450>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f33 	.word	0x08003f33
 8003ef8:	08003f23 	.word	0x08003f23
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f33 	.word	0x08003f33
 8003f04:	08003f33 	.word	0x08003f33
 8003f08:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7fe fb80 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8003f10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f12:	e014      	b.n	8003f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7fe fb92 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 8003f18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f1a:	e010      	b.n	8003f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8004058 <UART_SetConfig+0x5c0>)
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f20:	e00d      	b.n	8003f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fe fb07 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8003f26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f28:	e009      	b.n	8003f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f30:	e005      	b.n	8003f3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8090 	beq.w	8004066 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	4a44      	ldr	r2, [pc, #272]	@ (800405c <UART_SetConfig+0x5c4>)
 8003f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f58:	005a      	lsls	r2, r3, #1
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	441a      	add	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	d916      	bls.n	8003fa0 <UART_SetConfig+0x508>
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f78:	d212      	bcs.n	8003fa0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f023 030f 	bic.w	r3, r3, #15
 8003f82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	8bfb      	ldrh	r3, [r7, #30]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	8bfa      	ldrh	r2, [r7, #30]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	e062      	b.n	8004066 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fa6:	e05e      	b.n	8004066 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d828      	bhi.n	8004002 <UART_SetConfig+0x56a>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <UART_SetConfig+0x520>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fe5 	.word	0x08003fe5
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08004003 	.word	0x08004003
 8003fc8:	08003ff3 	.word	0x08003ff3
 8003fcc:	08004003 	.word	0x08004003
 8003fd0:	08004003 	.word	0x08004003
 8003fd4:	08004003 	.word	0x08004003
 8003fd8:	08003ffb 	.word	0x08003ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7fe fb18 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fe2:	e014      	b.n	800400e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7fe fb2a 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 8003fe8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fea:	e010      	b.n	800400e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fec:	4b1a      	ldr	r3, [pc, #104]	@ (8004058 <UART_SetConfig+0x5c0>)
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ff0:	e00d      	b.n	800400e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff2:	f7fe fa9f 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8003ff6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ff8:	e009      	b.n	800400e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004000:	e005      	b.n	800400e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800400c:	bf00      	nop
    }

    if (pclk != 0U)
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	2b00      	cmp	r3, #0
 8004012:	d028      	beq.n	8004066 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	4a10      	ldr	r2, [pc, #64]	@ (800405c <UART_SetConfig+0x5c4>)
 800401a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800401e:	461a      	mov	r2, r3
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	fbb3 f2f2 	udiv	r2, r3, r2
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	441a      	add	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	fbb2 f3f3 	udiv	r3, r2, r3
 8004036:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b0f      	cmp	r3, #15
 800403c:	d910      	bls.n	8004060 <UART_SetConfig+0x5c8>
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004044:	d20c      	bcs.n	8004060 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	b29a      	uxth	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	e009      	b.n	8004066 <UART_SetConfig+0x5ce>
 8004052:	bf00      	nop
 8004054:	40008000 	.word	0x40008000
 8004058:	00f42400 	.word	0x00f42400
 800405c:	08005048 	.word	0x08005048
      }
      else
      {
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2201      	movs	r2, #1
 800406a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2201      	movs	r2, #1
 8004072:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004082:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004086:	4618      	mov	r0, r3
 8004088:	3730      	adds	r7, #48	@ 0x30
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800418e:	d10a      	bne.n	80041a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b098      	sub	sp, #96	@ 0x60
 80041d8:	af02      	add	r7, sp, #8
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e4:	f7fd f9a8 	bl	8001538 <HAL_GetTick>
 80041e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d12f      	bne.n	8004258 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f88e 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d022      	beq.n	8004258 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004226:	653b      	str	r3, [r7, #80]	@ 0x50
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004230:	647b      	str	r3, [r7, #68]	@ 0x44
 8004232:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800423e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e063      	b.n	8004320 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b04      	cmp	r3, #4
 8004264:	d149      	bne.n	80042fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004266:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f857 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d03c      	beq.n	80042fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	623b      	str	r3, [r7, #32]
   return(result);
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800429e:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e6      	bne.n	8004280 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d2:	61fa      	str	r2, [r7, #28]
 80042d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	69b9      	ldr	r1, [r7, #24]
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	617b      	str	r3, [r7, #20]
   return(result);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e5      	bne.n	80042b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e012      	b.n	8004320 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3758      	adds	r7, #88	@ 0x58
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004338:	e04f      	b.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004340:	d04b      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fd f8f9 	bl	8001538 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <UART_WaitOnFlagUntilTimeout+0x30>
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e04e      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d037      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b80      	cmp	r3, #128	@ 0x80
 800436e:	d034      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b40      	cmp	r3, #64	@ 0x40
 8004374:	d031      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d110      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2208      	movs	r2, #8
 800438a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f838 	bl	8004402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2208      	movs	r2, #8
 8004396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e029      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b4:	d111      	bne.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f81e 	bl	8004402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e00f      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d0a0      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b095      	sub	sp, #84	@ 0x54
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800441e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004428:	643b      	str	r3, [r7, #64]	@ 0x40
 800442a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800442e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e6      	bne.n	800440a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	61fb      	str	r3, [r7, #28]
   return(result);
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004460:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004462:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e3      	bne.n	800443c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d118      	bne.n	80044ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	60bb      	str	r3, [r7, #8]
   return(result);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f023 0310 	bic.w	r3, r3, #16
 8004490:	647b      	str	r3, [r7, #68]	@ 0x44
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6979      	ldr	r1, [r7, #20]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	613b      	str	r3, [r7, #16]
   return(result);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e6      	bne.n	800447c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044c2:	bf00      	nop
 80044c4:	3754      	adds	r7, #84	@ 0x54
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e027      	b.n	8004534 <HAL_UARTEx_DisableFifoMode+0x66>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	@ 0x24
 80044f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004512:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004554:	2302      	movs	r3, #2
 8004556:	e02d      	b.n	80045b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	@ 0x24
 8004564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f84f 	bl	8004638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e02d      	b.n	8004630 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	@ 0x24
 80045e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f811 	bl	8004638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004644:	2b00      	cmp	r3, #0
 8004646:	d108      	bne.n	800465a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004658:	e031      	b.n	80046be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800465a:	2308      	movs	r3, #8
 800465c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800465e:	2308      	movs	r3, #8
 8004660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	0e5b      	lsrs	r3, r3, #25
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	0f5b      	lsrs	r3, r3, #29
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004682:	7bbb      	ldrb	r3, [r7, #14]
 8004684:	7b3a      	ldrb	r2, [r7, #12]
 8004686:	4911      	ldr	r1, [pc, #68]	@ (80046cc <UARTEx_SetNbDataToProcess+0x94>)
 8004688:	5c8a      	ldrb	r2, [r1, r2]
 800468a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800468e:	7b3a      	ldrb	r2, [r7, #12]
 8004690:	490f      	ldr	r1, [pc, #60]	@ (80046d0 <UARTEx_SetNbDataToProcess+0x98>)
 8004692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004694:	fb93 f3f2 	sdiv	r3, r3, r2
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	7b7a      	ldrb	r2, [r7, #13]
 80046a4:	4909      	ldr	r1, [pc, #36]	@ (80046cc <UARTEx_SetNbDataToProcess+0x94>)
 80046a6:	5c8a      	ldrb	r2, [r1, r2]
 80046a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046ac:	7b7a      	ldrb	r2, [r7, #13]
 80046ae:	4908      	ldr	r1, [pc, #32]	@ (80046d0 <UARTEx_SetNbDataToProcess+0x98>)
 80046b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	08005060 	.word	0x08005060
 80046d0:	08005068 	.word	0x08005068

080046d4 <siprintf>:
 80046d4:	b40e      	push	{r1, r2, r3}
 80046d6:	b510      	push	{r4, lr}
 80046d8:	b09d      	sub	sp, #116	@ 0x74
 80046da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80046dc:	9002      	str	r0, [sp, #8]
 80046de:	9006      	str	r0, [sp, #24]
 80046e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046e4:	480a      	ldr	r0, [pc, #40]	@ (8004710 <siprintf+0x3c>)
 80046e6:	9107      	str	r1, [sp, #28]
 80046e8:	9104      	str	r1, [sp, #16]
 80046ea:	490a      	ldr	r1, [pc, #40]	@ (8004714 <siprintf+0x40>)
 80046ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80046f0:	9105      	str	r1, [sp, #20]
 80046f2:	2400      	movs	r4, #0
 80046f4:	a902      	add	r1, sp, #8
 80046f6:	6800      	ldr	r0, [r0, #0]
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80046fc:	f000 f994 	bl	8004a28 <_svfiprintf_r>
 8004700:	9b02      	ldr	r3, [sp, #8]
 8004702:	701c      	strb	r4, [r3, #0]
 8004704:	b01d      	add	sp, #116	@ 0x74
 8004706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800470a:	b003      	add	sp, #12
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000014 	.word	0x20000014
 8004714:	ffff0208 	.word	0xffff0208

08004718 <memset>:
 8004718:	4402      	add	r2, r0
 800471a:	4603      	mov	r3, r0
 800471c:	4293      	cmp	r3, r2
 800471e:	d100      	bne.n	8004722 <memset+0xa>
 8004720:	4770      	bx	lr
 8004722:	f803 1b01 	strb.w	r1, [r3], #1
 8004726:	e7f9      	b.n	800471c <memset+0x4>

08004728 <__errno>:
 8004728:	4b01      	ldr	r3, [pc, #4]	@ (8004730 <__errno+0x8>)
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20000014 	.word	0x20000014

08004734 <__libc_init_array>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	4d0d      	ldr	r5, [pc, #52]	@ (800476c <__libc_init_array+0x38>)
 8004738:	4c0d      	ldr	r4, [pc, #52]	@ (8004770 <__libc_init_array+0x3c>)
 800473a:	1b64      	subs	r4, r4, r5
 800473c:	10a4      	asrs	r4, r4, #2
 800473e:	2600      	movs	r6, #0
 8004740:	42a6      	cmp	r6, r4
 8004742:	d109      	bne.n	8004758 <__libc_init_array+0x24>
 8004744:	4d0b      	ldr	r5, [pc, #44]	@ (8004774 <__libc_init_array+0x40>)
 8004746:	4c0c      	ldr	r4, [pc, #48]	@ (8004778 <__libc_init_array+0x44>)
 8004748:	f000 fc64 	bl	8005014 <_init>
 800474c:	1b64      	subs	r4, r4, r5
 800474e:	10a4      	asrs	r4, r4, #2
 8004750:	2600      	movs	r6, #0
 8004752:	42a6      	cmp	r6, r4
 8004754:	d105      	bne.n	8004762 <__libc_init_array+0x2e>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f855 3b04 	ldr.w	r3, [r5], #4
 800475c:	4798      	blx	r3
 800475e:	3601      	adds	r6, #1
 8004760:	e7ee      	b.n	8004740 <__libc_init_array+0xc>
 8004762:	f855 3b04 	ldr.w	r3, [r5], #4
 8004766:	4798      	blx	r3
 8004768:	3601      	adds	r6, #1
 800476a:	e7f2      	b.n	8004752 <__libc_init_array+0x1e>
 800476c:	080050ac 	.word	0x080050ac
 8004770:	080050ac 	.word	0x080050ac
 8004774:	080050ac 	.word	0x080050ac
 8004778:	080050b0 	.word	0x080050b0

0800477c <__retarget_lock_acquire_recursive>:
 800477c:	4770      	bx	lr

0800477e <__retarget_lock_release_recursive>:
 800477e:	4770      	bx	lr

08004780 <_free_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4605      	mov	r5, r0
 8004784:	2900      	cmp	r1, #0
 8004786:	d041      	beq.n	800480c <_free_r+0x8c>
 8004788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800478c:	1f0c      	subs	r4, r1, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	bfb8      	it	lt
 8004792:	18e4      	addlt	r4, r4, r3
 8004794:	f000 f8e0 	bl	8004958 <__malloc_lock>
 8004798:	4a1d      	ldr	r2, [pc, #116]	@ (8004810 <_free_r+0x90>)
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	b933      	cbnz	r3, 80047ac <_free_r+0x2c>
 800479e:	6063      	str	r3, [r4, #4]
 80047a0:	6014      	str	r4, [r2, #0]
 80047a2:	4628      	mov	r0, r5
 80047a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a8:	f000 b8dc 	b.w	8004964 <__malloc_unlock>
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d908      	bls.n	80047c2 <_free_r+0x42>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	1821      	adds	r1, r4, r0
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf01      	itttt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	1809      	addeq	r1, r1, r0
 80047be:	6021      	streq	r1, [r4, #0]
 80047c0:	e7ed      	b.n	800479e <_free_r+0x1e>
 80047c2:	461a      	mov	r2, r3
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	b10b      	cbz	r3, 80047cc <_free_r+0x4c>
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	d9fa      	bls.n	80047c2 <_free_r+0x42>
 80047cc:	6811      	ldr	r1, [r2, #0]
 80047ce:	1850      	adds	r0, r2, r1
 80047d0:	42a0      	cmp	r0, r4
 80047d2:	d10b      	bne.n	80047ec <_free_r+0x6c>
 80047d4:	6820      	ldr	r0, [r4, #0]
 80047d6:	4401      	add	r1, r0
 80047d8:	1850      	adds	r0, r2, r1
 80047da:	4283      	cmp	r3, r0
 80047dc:	6011      	str	r1, [r2, #0]
 80047de:	d1e0      	bne.n	80047a2 <_free_r+0x22>
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	6053      	str	r3, [r2, #4]
 80047e6:	4408      	add	r0, r1
 80047e8:	6010      	str	r0, [r2, #0]
 80047ea:	e7da      	b.n	80047a2 <_free_r+0x22>
 80047ec:	d902      	bls.n	80047f4 <_free_r+0x74>
 80047ee:	230c      	movs	r3, #12
 80047f0:	602b      	str	r3, [r5, #0]
 80047f2:	e7d6      	b.n	80047a2 <_free_r+0x22>
 80047f4:	6820      	ldr	r0, [r4, #0]
 80047f6:	1821      	adds	r1, r4, r0
 80047f8:	428b      	cmp	r3, r1
 80047fa:	bf04      	itt	eq
 80047fc:	6819      	ldreq	r1, [r3, #0]
 80047fe:	685b      	ldreq	r3, [r3, #4]
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	bf04      	itt	eq
 8004804:	1809      	addeq	r1, r1, r0
 8004806:	6021      	streq	r1, [r4, #0]
 8004808:	6054      	str	r4, [r2, #4]
 800480a:	e7ca      	b.n	80047a2 <_free_r+0x22>
 800480c:	bd38      	pop	{r3, r4, r5, pc}
 800480e:	bf00      	nop
 8004810:	200002f0 	.word	0x200002f0

08004814 <sbrk_aligned>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4e0f      	ldr	r6, [pc, #60]	@ (8004854 <sbrk_aligned+0x40>)
 8004818:	460c      	mov	r4, r1
 800481a:	6831      	ldr	r1, [r6, #0]
 800481c:	4605      	mov	r5, r0
 800481e:	b911      	cbnz	r1, 8004826 <sbrk_aligned+0x12>
 8004820:	f000 fba4 	bl	8004f6c <_sbrk_r>
 8004824:	6030      	str	r0, [r6, #0]
 8004826:	4621      	mov	r1, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 fb9f 	bl	8004f6c <_sbrk_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d103      	bne.n	800483a <sbrk_aligned+0x26>
 8004832:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004836:	4620      	mov	r0, r4
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	1cc4      	adds	r4, r0, #3
 800483c:	f024 0403 	bic.w	r4, r4, #3
 8004840:	42a0      	cmp	r0, r4
 8004842:	d0f8      	beq.n	8004836 <sbrk_aligned+0x22>
 8004844:	1a21      	subs	r1, r4, r0
 8004846:	4628      	mov	r0, r5
 8004848:	f000 fb90 	bl	8004f6c <_sbrk_r>
 800484c:	3001      	adds	r0, #1
 800484e:	d1f2      	bne.n	8004836 <sbrk_aligned+0x22>
 8004850:	e7ef      	b.n	8004832 <sbrk_aligned+0x1e>
 8004852:	bf00      	nop
 8004854:	200002ec 	.word	0x200002ec

08004858 <_malloc_r>:
 8004858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800485c:	1ccd      	adds	r5, r1, #3
 800485e:	f025 0503 	bic.w	r5, r5, #3
 8004862:	3508      	adds	r5, #8
 8004864:	2d0c      	cmp	r5, #12
 8004866:	bf38      	it	cc
 8004868:	250c      	movcc	r5, #12
 800486a:	2d00      	cmp	r5, #0
 800486c:	4606      	mov	r6, r0
 800486e:	db01      	blt.n	8004874 <_malloc_r+0x1c>
 8004870:	42a9      	cmp	r1, r5
 8004872:	d904      	bls.n	800487e <_malloc_r+0x26>
 8004874:	230c      	movs	r3, #12
 8004876:	6033      	str	r3, [r6, #0]
 8004878:	2000      	movs	r0, #0
 800487a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800487e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004954 <_malloc_r+0xfc>
 8004882:	f000 f869 	bl	8004958 <__malloc_lock>
 8004886:	f8d8 3000 	ldr.w	r3, [r8]
 800488a:	461c      	mov	r4, r3
 800488c:	bb44      	cbnz	r4, 80048e0 <_malloc_r+0x88>
 800488e:	4629      	mov	r1, r5
 8004890:	4630      	mov	r0, r6
 8004892:	f7ff ffbf 	bl	8004814 <sbrk_aligned>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	4604      	mov	r4, r0
 800489a:	d158      	bne.n	800494e <_malloc_r+0xf6>
 800489c:	f8d8 4000 	ldr.w	r4, [r8]
 80048a0:	4627      	mov	r7, r4
 80048a2:	2f00      	cmp	r7, #0
 80048a4:	d143      	bne.n	800492e <_malloc_r+0xd6>
 80048a6:	2c00      	cmp	r4, #0
 80048a8:	d04b      	beq.n	8004942 <_malloc_r+0xea>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	4639      	mov	r1, r7
 80048ae:	4630      	mov	r0, r6
 80048b0:	eb04 0903 	add.w	r9, r4, r3
 80048b4:	f000 fb5a 	bl	8004f6c <_sbrk_r>
 80048b8:	4581      	cmp	r9, r0
 80048ba:	d142      	bne.n	8004942 <_malloc_r+0xea>
 80048bc:	6821      	ldr	r1, [r4, #0]
 80048be:	1a6d      	subs	r5, r5, r1
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff ffa6 	bl	8004814 <sbrk_aligned>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d03a      	beq.n	8004942 <_malloc_r+0xea>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	442b      	add	r3, r5
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	f8d8 3000 	ldr.w	r3, [r8]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	bb62      	cbnz	r2, 8004934 <_malloc_r+0xdc>
 80048da:	f8c8 7000 	str.w	r7, [r8]
 80048de:	e00f      	b.n	8004900 <_malloc_r+0xa8>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	1b52      	subs	r2, r2, r5
 80048e4:	d420      	bmi.n	8004928 <_malloc_r+0xd0>
 80048e6:	2a0b      	cmp	r2, #11
 80048e8:	d917      	bls.n	800491a <_malloc_r+0xc2>
 80048ea:	1961      	adds	r1, r4, r5
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	6025      	str	r5, [r4, #0]
 80048f0:	bf18      	it	ne
 80048f2:	6059      	strne	r1, [r3, #4]
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	bf08      	it	eq
 80048f8:	f8c8 1000 	streq.w	r1, [r8]
 80048fc:	5162      	str	r2, [r4, r5]
 80048fe:	604b      	str	r3, [r1, #4]
 8004900:	4630      	mov	r0, r6
 8004902:	f000 f82f 	bl	8004964 <__malloc_unlock>
 8004906:	f104 000b 	add.w	r0, r4, #11
 800490a:	1d23      	adds	r3, r4, #4
 800490c:	f020 0007 	bic.w	r0, r0, #7
 8004910:	1ac2      	subs	r2, r0, r3
 8004912:	bf1c      	itt	ne
 8004914:	1a1b      	subne	r3, r3, r0
 8004916:	50a3      	strne	r3, [r4, r2]
 8004918:	e7af      	b.n	800487a <_malloc_r+0x22>
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	42a3      	cmp	r3, r4
 800491e:	bf0c      	ite	eq
 8004920:	f8c8 2000 	streq.w	r2, [r8]
 8004924:	605a      	strne	r2, [r3, #4]
 8004926:	e7eb      	b.n	8004900 <_malloc_r+0xa8>
 8004928:	4623      	mov	r3, r4
 800492a:	6864      	ldr	r4, [r4, #4]
 800492c:	e7ae      	b.n	800488c <_malloc_r+0x34>
 800492e:	463c      	mov	r4, r7
 8004930:	687f      	ldr	r7, [r7, #4]
 8004932:	e7b6      	b.n	80048a2 <_malloc_r+0x4a>
 8004934:	461a      	mov	r2, r3
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	42a3      	cmp	r3, r4
 800493a:	d1fb      	bne.n	8004934 <_malloc_r+0xdc>
 800493c:	2300      	movs	r3, #0
 800493e:	6053      	str	r3, [r2, #4]
 8004940:	e7de      	b.n	8004900 <_malloc_r+0xa8>
 8004942:	230c      	movs	r3, #12
 8004944:	6033      	str	r3, [r6, #0]
 8004946:	4630      	mov	r0, r6
 8004948:	f000 f80c 	bl	8004964 <__malloc_unlock>
 800494c:	e794      	b.n	8004878 <_malloc_r+0x20>
 800494e:	6005      	str	r5, [r0, #0]
 8004950:	e7d6      	b.n	8004900 <_malloc_r+0xa8>
 8004952:	bf00      	nop
 8004954:	200002f0 	.word	0x200002f0

08004958 <__malloc_lock>:
 8004958:	4801      	ldr	r0, [pc, #4]	@ (8004960 <__malloc_lock+0x8>)
 800495a:	f7ff bf0f 	b.w	800477c <__retarget_lock_acquire_recursive>
 800495e:	bf00      	nop
 8004960:	200002e8 	.word	0x200002e8

08004964 <__malloc_unlock>:
 8004964:	4801      	ldr	r0, [pc, #4]	@ (800496c <__malloc_unlock+0x8>)
 8004966:	f7ff bf0a 	b.w	800477e <__retarget_lock_release_recursive>
 800496a:	bf00      	nop
 800496c:	200002e8 	.word	0x200002e8

08004970 <__ssputs_r>:
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	688e      	ldr	r6, [r1, #8]
 8004976:	461f      	mov	r7, r3
 8004978:	42be      	cmp	r6, r7
 800497a:	680b      	ldr	r3, [r1, #0]
 800497c:	4682      	mov	sl, r0
 800497e:	460c      	mov	r4, r1
 8004980:	4690      	mov	r8, r2
 8004982:	d82d      	bhi.n	80049e0 <__ssputs_r+0x70>
 8004984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004988:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800498c:	d026      	beq.n	80049dc <__ssputs_r+0x6c>
 800498e:	6965      	ldr	r5, [r4, #20]
 8004990:	6909      	ldr	r1, [r1, #16]
 8004992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004996:	eba3 0901 	sub.w	r9, r3, r1
 800499a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800499e:	1c7b      	adds	r3, r7, #1
 80049a0:	444b      	add	r3, r9
 80049a2:	106d      	asrs	r5, r5, #1
 80049a4:	429d      	cmp	r5, r3
 80049a6:	bf38      	it	cc
 80049a8:	461d      	movcc	r5, r3
 80049aa:	0553      	lsls	r3, r2, #21
 80049ac:	d527      	bpl.n	80049fe <__ssputs_r+0x8e>
 80049ae:	4629      	mov	r1, r5
 80049b0:	f7ff ff52 	bl	8004858 <_malloc_r>
 80049b4:	4606      	mov	r6, r0
 80049b6:	b360      	cbz	r0, 8004a12 <__ssputs_r+0xa2>
 80049b8:	6921      	ldr	r1, [r4, #16]
 80049ba:	464a      	mov	r2, r9
 80049bc:	f000 fae6 	bl	8004f8c <memcpy>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	6126      	str	r6, [r4, #16]
 80049ce:	6165      	str	r5, [r4, #20]
 80049d0:	444e      	add	r6, r9
 80049d2:	eba5 0509 	sub.w	r5, r5, r9
 80049d6:	6026      	str	r6, [r4, #0]
 80049d8:	60a5      	str	r5, [r4, #8]
 80049da:	463e      	mov	r6, r7
 80049dc:	42be      	cmp	r6, r7
 80049de:	d900      	bls.n	80049e2 <__ssputs_r+0x72>
 80049e0:	463e      	mov	r6, r7
 80049e2:	6820      	ldr	r0, [r4, #0]
 80049e4:	4632      	mov	r2, r6
 80049e6:	4641      	mov	r1, r8
 80049e8:	f000 faa6 	bl	8004f38 <memmove>
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	1b9b      	subs	r3, r3, r6
 80049f0:	60a3      	str	r3, [r4, #8]
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	4433      	add	r3, r6
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	2000      	movs	r0, #0
 80049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fe:	462a      	mov	r2, r5
 8004a00:	f000 fad2 	bl	8004fa8 <_realloc_r>
 8004a04:	4606      	mov	r6, r0
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d1e0      	bne.n	80049cc <__ssputs_r+0x5c>
 8004a0a:	6921      	ldr	r1, [r4, #16]
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	f7ff feb7 	bl	8004780 <_free_r>
 8004a12:	230c      	movs	r3, #12
 8004a14:	f8ca 3000 	str.w	r3, [sl]
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a24:	e7e9      	b.n	80049fa <__ssputs_r+0x8a>
	...

08004a28 <_svfiprintf_r>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	4698      	mov	r8, r3
 8004a2e:	898b      	ldrh	r3, [r1, #12]
 8004a30:	061b      	lsls	r3, r3, #24
 8004a32:	b09d      	sub	sp, #116	@ 0x74
 8004a34:	4607      	mov	r7, r0
 8004a36:	460d      	mov	r5, r1
 8004a38:	4614      	mov	r4, r2
 8004a3a:	d510      	bpl.n	8004a5e <_svfiprintf_r+0x36>
 8004a3c:	690b      	ldr	r3, [r1, #16]
 8004a3e:	b973      	cbnz	r3, 8004a5e <_svfiprintf_r+0x36>
 8004a40:	2140      	movs	r1, #64	@ 0x40
 8004a42:	f7ff ff09 	bl	8004858 <_malloc_r>
 8004a46:	6028      	str	r0, [r5, #0]
 8004a48:	6128      	str	r0, [r5, #16]
 8004a4a:	b930      	cbnz	r0, 8004a5a <_svfiprintf_r+0x32>
 8004a4c:	230c      	movs	r3, #12
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a54:	b01d      	add	sp, #116	@ 0x74
 8004a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5a:	2340      	movs	r3, #64	@ 0x40
 8004a5c:	616b      	str	r3, [r5, #20]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a62:	2320      	movs	r3, #32
 8004a64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a6c:	2330      	movs	r3, #48	@ 0x30
 8004a6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c0c <_svfiprintf_r+0x1e4>
 8004a72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a76:	f04f 0901 	mov.w	r9, #1
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	469a      	mov	sl, r3
 8004a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a82:	b10a      	cbz	r2, 8004a88 <_svfiprintf_r+0x60>
 8004a84:	2a25      	cmp	r2, #37	@ 0x25
 8004a86:	d1f9      	bne.n	8004a7c <_svfiprintf_r+0x54>
 8004a88:	ebba 0b04 	subs.w	fp, sl, r4
 8004a8c:	d00b      	beq.n	8004aa6 <_svfiprintf_r+0x7e>
 8004a8e:	465b      	mov	r3, fp
 8004a90:	4622      	mov	r2, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	4638      	mov	r0, r7
 8004a96:	f7ff ff6b 	bl	8004970 <__ssputs_r>
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f000 80a7 	beq.w	8004bee <_svfiprintf_r+0x1c6>
 8004aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aa2:	445a      	add	r2, fp
 8004aa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 809f 	beq.w	8004bee <_svfiprintf_r+0x1c6>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aba:	f10a 0a01 	add.w	sl, sl, #1
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	9307      	str	r3, [sp, #28]
 8004ac2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ac6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ac8:	4654      	mov	r4, sl
 8004aca:	2205      	movs	r2, #5
 8004acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad0:	484e      	ldr	r0, [pc, #312]	@ (8004c0c <_svfiprintf_r+0x1e4>)
 8004ad2:	f7fb fba5 	bl	8000220 <memchr>
 8004ad6:	9a04      	ldr	r2, [sp, #16]
 8004ad8:	b9d8      	cbnz	r0, 8004b12 <_svfiprintf_r+0xea>
 8004ada:	06d0      	lsls	r0, r2, #27
 8004adc:	bf44      	itt	mi
 8004ade:	2320      	movmi	r3, #32
 8004ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ae4:	0711      	lsls	r1, r2, #28
 8004ae6:	bf44      	itt	mi
 8004ae8:	232b      	movmi	r3, #43	@ 0x2b
 8004aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004aee:	f89a 3000 	ldrb.w	r3, [sl]
 8004af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004af4:	d015      	beq.n	8004b22 <_svfiprintf_r+0xfa>
 8004af6:	9a07      	ldr	r2, [sp, #28]
 8004af8:	4654      	mov	r4, sl
 8004afa:	2000      	movs	r0, #0
 8004afc:	f04f 0c0a 	mov.w	ip, #10
 8004b00:	4621      	mov	r1, r4
 8004b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b06:	3b30      	subs	r3, #48	@ 0x30
 8004b08:	2b09      	cmp	r3, #9
 8004b0a:	d94b      	bls.n	8004ba4 <_svfiprintf_r+0x17c>
 8004b0c:	b1b0      	cbz	r0, 8004b3c <_svfiprintf_r+0x114>
 8004b0e:	9207      	str	r2, [sp, #28]
 8004b10:	e014      	b.n	8004b3c <_svfiprintf_r+0x114>
 8004b12:	eba0 0308 	sub.w	r3, r0, r8
 8004b16:	fa09 f303 	lsl.w	r3, r9, r3
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	9304      	str	r3, [sp, #16]
 8004b1e:	46a2      	mov	sl, r4
 8004b20:	e7d2      	b.n	8004ac8 <_svfiprintf_r+0xa0>
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	1d19      	adds	r1, r3, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	9103      	str	r1, [sp, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bfbb      	ittet	lt
 8004b2e:	425b      	neglt	r3, r3
 8004b30:	f042 0202 	orrlt.w	r2, r2, #2
 8004b34:	9307      	strge	r3, [sp, #28]
 8004b36:	9307      	strlt	r3, [sp, #28]
 8004b38:	bfb8      	it	lt
 8004b3a:	9204      	strlt	r2, [sp, #16]
 8004b3c:	7823      	ldrb	r3, [r4, #0]
 8004b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b40:	d10a      	bne.n	8004b58 <_svfiprintf_r+0x130>
 8004b42:	7863      	ldrb	r3, [r4, #1]
 8004b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b46:	d132      	bne.n	8004bae <_svfiprintf_r+0x186>
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	9203      	str	r2, [sp, #12]
 8004b50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b54:	3402      	adds	r4, #2
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c1c <_svfiprintf_r+0x1f4>
 8004b5c:	7821      	ldrb	r1, [r4, #0]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	4650      	mov	r0, sl
 8004b62:	f7fb fb5d 	bl	8000220 <memchr>
 8004b66:	b138      	cbz	r0, 8004b78 <_svfiprintf_r+0x150>
 8004b68:	9b04      	ldr	r3, [sp, #16]
 8004b6a:	eba0 000a 	sub.w	r0, r0, sl
 8004b6e:	2240      	movs	r2, #64	@ 0x40
 8004b70:	4082      	lsls	r2, r0
 8004b72:	4313      	orrs	r3, r2
 8004b74:	3401      	adds	r4, #1
 8004b76:	9304      	str	r3, [sp, #16]
 8004b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b7c:	4824      	ldr	r0, [pc, #144]	@ (8004c10 <_svfiprintf_r+0x1e8>)
 8004b7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b82:	2206      	movs	r2, #6
 8004b84:	f7fb fb4c 	bl	8000220 <memchr>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d036      	beq.n	8004bfa <_svfiprintf_r+0x1d2>
 8004b8c:	4b21      	ldr	r3, [pc, #132]	@ (8004c14 <_svfiprintf_r+0x1ec>)
 8004b8e:	bb1b      	cbnz	r3, 8004bd8 <_svfiprintf_r+0x1b0>
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	3307      	adds	r3, #7
 8004b94:	f023 0307 	bic.w	r3, r3, #7
 8004b98:	3308      	adds	r3, #8
 8004b9a:	9303      	str	r3, [sp, #12]
 8004b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b9e:	4433      	add	r3, r6
 8004ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ba2:	e76a      	b.n	8004a7a <_svfiprintf_r+0x52>
 8004ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ba8:	460c      	mov	r4, r1
 8004baa:	2001      	movs	r0, #1
 8004bac:	e7a8      	b.n	8004b00 <_svfiprintf_r+0xd8>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	3401      	adds	r4, #1
 8004bb2:	9305      	str	r3, [sp, #20]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f04f 0c0a 	mov.w	ip, #10
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bc0:	3a30      	subs	r2, #48	@ 0x30
 8004bc2:	2a09      	cmp	r2, #9
 8004bc4:	d903      	bls.n	8004bce <_svfiprintf_r+0x1a6>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0c6      	beq.n	8004b58 <_svfiprintf_r+0x130>
 8004bca:	9105      	str	r1, [sp, #20]
 8004bcc:	e7c4      	b.n	8004b58 <_svfiprintf_r+0x130>
 8004bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e7f0      	b.n	8004bba <_svfiprintf_r+0x192>
 8004bd8:	ab03      	add	r3, sp, #12
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	462a      	mov	r2, r5
 8004bde:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <_svfiprintf_r+0x1f0>)
 8004be0:	a904      	add	r1, sp, #16
 8004be2:	4638      	mov	r0, r7
 8004be4:	f3af 8000 	nop.w
 8004be8:	1c42      	adds	r2, r0, #1
 8004bea:	4606      	mov	r6, r0
 8004bec:	d1d6      	bne.n	8004b9c <_svfiprintf_r+0x174>
 8004bee:	89ab      	ldrh	r3, [r5, #12]
 8004bf0:	065b      	lsls	r3, r3, #25
 8004bf2:	f53f af2d 	bmi.w	8004a50 <_svfiprintf_r+0x28>
 8004bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bf8:	e72c      	b.n	8004a54 <_svfiprintf_r+0x2c>
 8004bfa:	ab03      	add	r3, sp, #12
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	462a      	mov	r2, r5
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <_svfiprintf_r+0x1f0>)
 8004c02:	a904      	add	r1, sp, #16
 8004c04:	4638      	mov	r0, r7
 8004c06:	f000 f879 	bl	8004cfc <_printf_i>
 8004c0a:	e7ed      	b.n	8004be8 <_svfiprintf_r+0x1c0>
 8004c0c:	08005070 	.word	0x08005070
 8004c10:	0800507a 	.word	0x0800507a
 8004c14:	00000000 	.word	0x00000000
 8004c18:	08004971 	.word	0x08004971
 8004c1c:	08005076 	.word	0x08005076

08004c20 <_printf_common>:
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	4616      	mov	r6, r2
 8004c26:	4698      	mov	r8, r3
 8004c28:	688a      	ldr	r2, [r1, #8]
 8004c2a:	690b      	ldr	r3, [r1, #16]
 8004c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	bfb8      	it	lt
 8004c34:	4613      	movlt	r3, r2
 8004c36:	6033      	str	r3, [r6, #0]
 8004c38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	b10a      	cbz	r2, 8004c46 <_printf_common+0x26>
 8004c42:	3301      	adds	r3, #1
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	0699      	lsls	r1, r3, #26
 8004c4a:	bf42      	ittt	mi
 8004c4c:	6833      	ldrmi	r3, [r6, #0]
 8004c4e:	3302      	addmi	r3, #2
 8004c50:	6033      	strmi	r3, [r6, #0]
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	f015 0506 	ands.w	r5, r5, #6
 8004c58:	d106      	bne.n	8004c68 <_printf_common+0x48>
 8004c5a:	f104 0a19 	add.w	sl, r4, #25
 8004c5e:	68e3      	ldr	r3, [r4, #12]
 8004c60:	6832      	ldr	r2, [r6, #0]
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	42ab      	cmp	r3, r5
 8004c66:	dc26      	bgt.n	8004cb6 <_printf_common+0x96>
 8004c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c6c:	6822      	ldr	r2, [r4, #0]
 8004c6e:	3b00      	subs	r3, #0
 8004c70:	bf18      	it	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	0692      	lsls	r2, r2, #26
 8004c76:	d42b      	bmi.n	8004cd0 <_printf_common+0xb0>
 8004c78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c8      	blx	r9
 8004c82:	3001      	adds	r0, #1
 8004c84:	d01e      	beq.n	8004cc4 <_printf_common+0xa4>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	6922      	ldr	r2, [r4, #16]
 8004c8a:	f003 0306 	and.w	r3, r3, #6
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	bf02      	ittt	eq
 8004c92:	68e5      	ldreq	r5, [r4, #12]
 8004c94:	6833      	ldreq	r3, [r6, #0]
 8004c96:	1aed      	subeq	r5, r5, r3
 8004c98:	68a3      	ldr	r3, [r4, #8]
 8004c9a:	bf0c      	ite	eq
 8004c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca0:	2500      	movne	r5, #0
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bfc4      	itt	gt
 8004ca6:	1a9b      	subgt	r3, r3, r2
 8004ca8:	18ed      	addgt	r5, r5, r3
 8004caa:	2600      	movs	r6, #0
 8004cac:	341a      	adds	r4, #26
 8004cae:	42b5      	cmp	r5, r6
 8004cb0:	d11a      	bne.n	8004ce8 <_printf_common+0xc8>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e008      	b.n	8004cc8 <_printf_common+0xa8>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4641      	mov	r1, r8
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	47c8      	blx	r9
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d103      	bne.n	8004ccc <_printf_common+0xac>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	3501      	adds	r5, #1
 8004cce:	e7c6      	b.n	8004c5e <_printf_common+0x3e>
 8004cd0:	18e1      	adds	r1, r4, r3
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	2030      	movs	r0, #48	@ 0x30
 8004cd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cda:	4422      	add	r2, r4
 8004cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ce0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	e7c7      	b.n	8004c78 <_printf_common+0x58>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4622      	mov	r2, r4
 8004cec:	4641      	mov	r1, r8
 8004cee:	4638      	mov	r0, r7
 8004cf0:	47c8      	blx	r9
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d0e6      	beq.n	8004cc4 <_printf_common+0xa4>
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7d9      	b.n	8004cae <_printf_common+0x8e>
	...

08004cfc <_printf_i>:
 8004cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	7e0f      	ldrb	r7, [r1, #24]
 8004d02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d04:	2f78      	cmp	r7, #120	@ 0x78
 8004d06:	4691      	mov	r9, r2
 8004d08:	4680      	mov	r8, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	469a      	mov	sl, r3
 8004d0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d12:	d807      	bhi.n	8004d24 <_printf_i+0x28>
 8004d14:	2f62      	cmp	r7, #98	@ 0x62
 8004d16:	d80a      	bhi.n	8004d2e <_printf_i+0x32>
 8004d18:	2f00      	cmp	r7, #0
 8004d1a:	f000 80d1 	beq.w	8004ec0 <_printf_i+0x1c4>
 8004d1e:	2f58      	cmp	r7, #88	@ 0x58
 8004d20:	f000 80b8 	beq.w	8004e94 <_printf_i+0x198>
 8004d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d2c:	e03a      	b.n	8004da4 <_printf_i+0xa8>
 8004d2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d32:	2b15      	cmp	r3, #21
 8004d34:	d8f6      	bhi.n	8004d24 <_printf_i+0x28>
 8004d36:	a101      	add	r1, pc, #4	@ (adr r1, 8004d3c <_printf_i+0x40>)
 8004d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004da9 	.word	0x08004da9
 8004d44:	08004d25 	.word	0x08004d25
 8004d48:	08004d25 	.word	0x08004d25
 8004d4c:	08004d25 	.word	0x08004d25
 8004d50:	08004d25 	.word	0x08004d25
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004d25 	.word	0x08004d25
 8004d5c:	08004d25 	.word	0x08004d25
 8004d60:	08004d25 	.word	0x08004d25
 8004d64:	08004d25 	.word	0x08004d25
 8004d68:	08004ea7 	.word	0x08004ea7
 8004d6c:	08004dd3 	.word	0x08004dd3
 8004d70:	08004e61 	.word	0x08004e61
 8004d74:	08004d25 	.word	0x08004d25
 8004d78:	08004d25 	.word	0x08004d25
 8004d7c:	08004ec9 	.word	0x08004ec9
 8004d80:	08004d25 	.word	0x08004d25
 8004d84:	08004dd3 	.word	0x08004dd3
 8004d88:	08004d25 	.word	0x08004d25
 8004d8c:	08004d25 	.word	0x08004d25
 8004d90:	08004e69 	.word	0x08004e69
 8004d94:	6833      	ldr	r3, [r6, #0]
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6032      	str	r2, [r6, #0]
 8004d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004da0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004da4:	2301      	movs	r3, #1
 8004da6:	e09c      	b.n	8004ee2 <_printf_i+0x1e6>
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	6031      	str	r1, [r6, #0]
 8004db0:	0606      	lsls	r6, r0, #24
 8004db2:	d501      	bpl.n	8004db8 <_printf_i+0xbc>
 8004db4:	681d      	ldr	r5, [r3, #0]
 8004db6:	e003      	b.n	8004dc0 <_printf_i+0xc4>
 8004db8:	0645      	lsls	r5, r0, #25
 8004dba:	d5fb      	bpl.n	8004db4 <_printf_i+0xb8>
 8004dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	da03      	bge.n	8004dcc <_printf_i+0xd0>
 8004dc4:	232d      	movs	r3, #45	@ 0x2d
 8004dc6:	426d      	negs	r5, r5
 8004dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dcc:	4858      	ldr	r0, [pc, #352]	@ (8004f30 <_printf_i+0x234>)
 8004dce:	230a      	movs	r3, #10
 8004dd0:	e011      	b.n	8004df6 <_printf_i+0xfa>
 8004dd2:	6821      	ldr	r1, [r4, #0]
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	0608      	lsls	r0, r1, #24
 8004dd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ddc:	d402      	bmi.n	8004de4 <_printf_i+0xe8>
 8004dde:	0649      	lsls	r1, r1, #25
 8004de0:	bf48      	it	mi
 8004de2:	b2ad      	uxthmi	r5, r5
 8004de4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004de6:	4852      	ldr	r0, [pc, #328]	@ (8004f30 <_printf_i+0x234>)
 8004de8:	6033      	str	r3, [r6, #0]
 8004dea:	bf14      	ite	ne
 8004dec:	230a      	movne	r3, #10
 8004dee:	2308      	moveq	r3, #8
 8004df0:	2100      	movs	r1, #0
 8004df2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004df6:	6866      	ldr	r6, [r4, #4]
 8004df8:	60a6      	str	r6, [r4, #8]
 8004dfa:	2e00      	cmp	r6, #0
 8004dfc:	db05      	blt.n	8004e0a <_printf_i+0x10e>
 8004dfe:	6821      	ldr	r1, [r4, #0]
 8004e00:	432e      	orrs	r6, r5
 8004e02:	f021 0104 	bic.w	r1, r1, #4
 8004e06:	6021      	str	r1, [r4, #0]
 8004e08:	d04b      	beq.n	8004ea2 <_printf_i+0x1a6>
 8004e0a:	4616      	mov	r6, r2
 8004e0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e10:	fb03 5711 	mls	r7, r3, r1, r5
 8004e14:	5dc7      	ldrb	r7, [r0, r7]
 8004e16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e1a:	462f      	mov	r7, r5
 8004e1c:	42bb      	cmp	r3, r7
 8004e1e:	460d      	mov	r5, r1
 8004e20:	d9f4      	bls.n	8004e0c <_printf_i+0x110>
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d10b      	bne.n	8004e3e <_printf_i+0x142>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	07df      	lsls	r7, r3, #31
 8004e2a:	d508      	bpl.n	8004e3e <_printf_i+0x142>
 8004e2c:	6923      	ldr	r3, [r4, #16]
 8004e2e:	6861      	ldr	r1, [r4, #4]
 8004e30:	4299      	cmp	r1, r3
 8004e32:	bfde      	ittt	le
 8004e34:	2330      	movle	r3, #48	@ 0x30
 8004e36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e3e:	1b92      	subs	r2, r2, r6
 8004e40:	6122      	str	r2, [r4, #16]
 8004e42:	f8cd a000 	str.w	sl, [sp]
 8004e46:	464b      	mov	r3, r9
 8004e48:	aa03      	add	r2, sp, #12
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	f7ff fee7 	bl	8004c20 <_printf_common>
 8004e52:	3001      	adds	r0, #1
 8004e54:	d14a      	bne.n	8004eec <_printf_i+0x1f0>
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e5a:	b004      	add	sp, #16
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	f043 0320 	orr.w	r3, r3, #32
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	4832      	ldr	r0, [pc, #200]	@ (8004f34 <_printf_i+0x238>)
 8004e6a:	2778      	movs	r7, #120	@ 0x78
 8004e6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	6831      	ldr	r1, [r6, #0]
 8004e74:	061f      	lsls	r7, r3, #24
 8004e76:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e7a:	d402      	bmi.n	8004e82 <_printf_i+0x186>
 8004e7c:	065f      	lsls	r7, r3, #25
 8004e7e:	bf48      	it	mi
 8004e80:	b2ad      	uxthmi	r5, r5
 8004e82:	6031      	str	r1, [r6, #0]
 8004e84:	07d9      	lsls	r1, r3, #31
 8004e86:	bf44      	itt	mi
 8004e88:	f043 0320 	orrmi.w	r3, r3, #32
 8004e8c:	6023      	strmi	r3, [r4, #0]
 8004e8e:	b11d      	cbz	r5, 8004e98 <_printf_i+0x19c>
 8004e90:	2310      	movs	r3, #16
 8004e92:	e7ad      	b.n	8004df0 <_printf_i+0xf4>
 8004e94:	4826      	ldr	r0, [pc, #152]	@ (8004f30 <_printf_i+0x234>)
 8004e96:	e7e9      	b.n	8004e6c <_printf_i+0x170>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	f023 0320 	bic.w	r3, r3, #32
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	e7f6      	b.n	8004e90 <_printf_i+0x194>
 8004ea2:	4616      	mov	r6, r2
 8004ea4:	e7bd      	b.n	8004e22 <_printf_i+0x126>
 8004ea6:	6833      	ldr	r3, [r6, #0]
 8004ea8:	6825      	ldr	r5, [r4, #0]
 8004eaa:	6961      	ldr	r1, [r4, #20]
 8004eac:	1d18      	adds	r0, r3, #4
 8004eae:	6030      	str	r0, [r6, #0]
 8004eb0:	062e      	lsls	r6, r5, #24
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	d501      	bpl.n	8004eba <_printf_i+0x1be>
 8004eb6:	6019      	str	r1, [r3, #0]
 8004eb8:	e002      	b.n	8004ec0 <_printf_i+0x1c4>
 8004eba:	0668      	lsls	r0, r5, #25
 8004ebc:	d5fb      	bpl.n	8004eb6 <_printf_i+0x1ba>
 8004ebe:	8019      	strh	r1, [r3, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	e7bc      	b.n	8004e42 <_printf_i+0x146>
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	1d1a      	adds	r2, r3, #4
 8004ecc:	6032      	str	r2, [r6, #0]
 8004ece:	681e      	ldr	r6, [r3, #0]
 8004ed0:	6862      	ldr	r2, [r4, #4]
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f7fb f9a3 	bl	8000220 <memchr>
 8004eda:	b108      	cbz	r0, 8004ee0 <_printf_i+0x1e4>
 8004edc:	1b80      	subs	r0, r0, r6
 8004ede:	6060      	str	r0, [r4, #4]
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eea:	e7aa      	b.n	8004e42 <_printf_i+0x146>
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	4632      	mov	r2, r6
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	47d0      	blx	sl
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d0ad      	beq.n	8004e56 <_printf_i+0x15a>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	079b      	lsls	r3, r3, #30
 8004efe:	d413      	bmi.n	8004f28 <_printf_i+0x22c>
 8004f00:	68e0      	ldr	r0, [r4, #12]
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	4298      	cmp	r0, r3
 8004f06:	bfb8      	it	lt
 8004f08:	4618      	movlt	r0, r3
 8004f0a:	e7a6      	b.n	8004e5a <_printf_i+0x15e>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4632      	mov	r2, r6
 8004f10:	4649      	mov	r1, r9
 8004f12:	4640      	mov	r0, r8
 8004f14:	47d0      	blx	sl
 8004f16:	3001      	adds	r0, #1
 8004f18:	d09d      	beq.n	8004e56 <_printf_i+0x15a>
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	68e3      	ldr	r3, [r4, #12]
 8004f1e:	9903      	ldr	r1, [sp, #12]
 8004f20:	1a5b      	subs	r3, r3, r1
 8004f22:	42ab      	cmp	r3, r5
 8004f24:	dcf2      	bgt.n	8004f0c <_printf_i+0x210>
 8004f26:	e7eb      	b.n	8004f00 <_printf_i+0x204>
 8004f28:	2500      	movs	r5, #0
 8004f2a:	f104 0619 	add.w	r6, r4, #25
 8004f2e:	e7f5      	b.n	8004f1c <_printf_i+0x220>
 8004f30:	08005081 	.word	0x08005081
 8004f34:	08005092 	.word	0x08005092

08004f38 <memmove>:
 8004f38:	4288      	cmp	r0, r1
 8004f3a:	b510      	push	{r4, lr}
 8004f3c:	eb01 0402 	add.w	r4, r1, r2
 8004f40:	d902      	bls.n	8004f48 <memmove+0x10>
 8004f42:	4284      	cmp	r4, r0
 8004f44:	4623      	mov	r3, r4
 8004f46:	d807      	bhi.n	8004f58 <memmove+0x20>
 8004f48:	1e43      	subs	r3, r0, #1
 8004f4a:	42a1      	cmp	r1, r4
 8004f4c:	d008      	beq.n	8004f60 <memmove+0x28>
 8004f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f56:	e7f8      	b.n	8004f4a <memmove+0x12>
 8004f58:	4402      	add	r2, r0
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	428a      	cmp	r2, r1
 8004f5e:	d100      	bne.n	8004f62 <memmove+0x2a>
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f6a:	e7f7      	b.n	8004f5c <memmove+0x24>

08004f6c <_sbrk_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d06      	ldr	r5, [pc, #24]	@ (8004f88 <_sbrk_r+0x1c>)
 8004f70:	2300      	movs	r3, #0
 8004f72:	4604      	mov	r4, r0
 8004f74:	4608      	mov	r0, r1
 8004f76:	602b      	str	r3, [r5, #0]
 8004f78:	f7fb fd40 	bl	80009fc <_sbrk>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_sbrk_r+0x1a>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_sbrk_r+0x1a>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	200002e4 	.word	0x200002e4

08004f8c <memcpy>:
 8004f8c:	440a      	add	r2, r1
 8004f8e:	4291      	cmp	r1, r2
 8004f90:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004f94:	d100      	bne.n	8004f98 <memcpy+0xc>
 8004f96:	4770      	bx	lr
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fa2:	4291      	cmp	r1, r2
 8004fa4:	d1f9      	bne.n	8004f9a <memcpy+0xe>
 8004fa6:	bd10      	pop	{r4, pc}

08004fa8 <_realloc_r>:
 8004fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fac:	4607      	mov	r7, r0
 8004fae:	4614      	mov	r4, r2
 8004fb0:	460d      	mov	r5, r1
 8004fb2:	b921      	cbnz	r1, 8004fbe <_realloc_r+0x16>
 8004fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb8:	4611      	mov	r1, r2
 8004fba:	f7ff bc4d 	b.w	8004858 <_malloc_r>
 8004fbe:	b92a      	cbnz	r2, 8004fcc <_realloc_r+0x24>
 8004fc0:	f7ff fbde 	bl	8004780 <_free_r>
 8004fc4:	4625      	mov	r5, r4
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fcc:	f000 f81a 	bl	8005004 <_malloc_usable_size_r>
 8004fd0:	4284      	cmp	r4, r0
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	d802      	bhi.n	8004fdc <_realloc_r+0x34>
 8004fd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fda:	d8f4      	bhi.n	8004fc6 <_realloc_r+0x1e>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f7ff fc3a 	bl	8004858 <_malloc_r>
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	b908      	cbnz	r0, 8004fec <_realloc_r+0x44>
 8004fe8:	4645      	mov	r5, r8
 8004fea:	e7ec      	b.n	8004fc6 <_realloc_r+0x1e>
 8004fec:	42b4      	cmp	r4, r6
 8004fee:	4622      	mov	r2, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	bf28      	it	cs
 8004ff4:	4632      	movcs	r2, r6
 8004ff6:	f7ff ffc9 	bl	8004f8c <memcpy>
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f7ff fbbf 	bl	8004780 <_free_r>
 8005002:	e7f1      	b.n	8004fe8 <_realloc_r+0x40>

08005004 <_malloc_usable_size_r>:
 8005004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005008:	1f18      	subs	r0, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	bfbc      	itt	lt
 800500e:	580b      	ldrlt	r3, [r1, r0]
 8005010:	18c0      	addlt	r0, r0, r3
 8005012:	4770      	bx	lr

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
