
I2C_Scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800494c  0800494c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800494c  0800494c  0000594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004954  08004954  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004954  08004954  00005954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004958  08004958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800495c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000068  080049c4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080049c4  000062c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001084a  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002585  00000000  00000000  000168e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00018e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a64  00000000  00000000  00019be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026897  00000000  00000000  0001a64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f78  00000000  00000000  00040ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee414  00000000  00000000  00051e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014026f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec4  00000000  00000000  001402b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00144178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004888 	.word	0x08004888

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08004888 	.word	0x08004888

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a2e      	ldr	r2, [pc, #184]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a28      	ldr	r2, [pc, #160]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a22      	ldr	r2, [pc, #136]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066a:	f000 fe61 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000674:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	480f      	ldr	r0, [pc, #60]	@ (80006c4 <MX_GPIO_Init+0xd8>)
 8000686:	f000 fcd1 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800068a:	2320      	movs	r3, #32
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f000 fcc2 	bl	800102c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2028      	movs	r0, #40	@ 0x28
 80006ae:	f000 fc88 	bl	8000fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b2:	2028      	movs	r0, #40	@ 0x28
 80006b4:	f000 fc9f 	bl	8000ff6 <HAL_NVIC_EnableIRQ>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	@ 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000800 	.word	0x48000800

080006c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_I2C1_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000740 <MX_I2C1_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_I2C1_Init+0x74>)
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <MX_I2C1_Init+0x7c>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_I2C1_Init+0x74>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000702:	480e      	ldr	r0, [pc, #56]	@ (800073c <MX_I2C1_Init+0x74>)
 8000704:	f000 fe4f 	bl	80013a6 <HAL_I2C_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070e:	f000 f92b 	bl	8000968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000712:	2100      	movs	r1, #0
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <MX_I2C1_Init+0x74>)
 8000716:	f001 f92b 	bl	8001970 <HAL_I2CEx_ConfigAnalogFilter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000720:	f000 f922 	bl	8000968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_I2C1_Init+0x74>)
 8000728:	f001 f96d 	bl	8001a06 <HAL_I2CEx_ConfigDigitalFilter>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 f919 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000084 	.word	0x20000084
 8000740:	40005400 	.word	0x40005400
 8000744:	40b285c2 	.word	0x40b285c2

08000748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09e      	sub	sp, #120	@ 0x78
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2254      	movs	r2, #84	@ 0x54
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fad7 	bl	8003d1c <memset>
  if(i2cHandle->Instance==I2C1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1f      	ldr	r2, [pc, #124]	@ (80007f0 <HAL_I2C_MspInit+0xa8>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d136      	bne.n	80007e6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000778:	2340      	movs	r3, #64	@ 0x40
 800077a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f001 ff6d 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000790:	f000 f8ea 	bl	8000968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <HAL_I2C_MspInit+0xac>)
 8000796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000798:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <HAL_I2C_MspInit+0xac>)
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <HAL_I2C_MspInit+0xac>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b2:	2312      	movs	r3, #18
 80007b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007be:	2304      	movs	r3, #4
 80007c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007c6:	4619      	mov	r1, r3
 80007c8:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <HAL_I2C_MspInit+0xb0>)
 80007ca:	f000 fc2f 	bl	800102c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_I2C_MspInit+0xac>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d2:	4a08      	ldr	r2, [pc, #32]	@ (80007f4 <HAL_I2C_MspInit+0xac>)
 80007d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_I2C_MspInit+0xac>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e6:	bf00      	nop
 80007e8:	3778      	adds	r7, #120	@ 0x78
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000400 	.word	0x48000400

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fa92 	bl	8000d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f851 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f7ff feef 	bl	80005ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800080e:	f000 f9c1 	bl	8000b94 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000812:	f7ff ff59 	bl	80006c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  char lpuart1Data[24] = "Connected to UART Two\r\n";
 8000816:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <main+0x98>)
 8000818:	1d3c      	adds	r4, r7, #4
 800081a:	461d      	mov	r5, r3
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000824:	e884 0003 	stmia.w	r4, {r0, r1}
     /*
      * Output to lpuart1
      * use screen or putty or whatever terminal software
      * 8N1 115200
      */
     HAL_UART_Transmit(&hlpuart1, (uint8_t *)&lpuart1Data, sizeof(lpuart1Data), 0xFFFF);
 8000828:	1d39      	adds	r1, r7, #4
 800082a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082e:	2218      	movs	r2, #24
 8000830:	4819      	ldr	r0, [pc, #100]	@ (8000898 <main+0x9c>)
 8000832:	f002 f9b5 	bl	8002ba0 <HAL_UART_Transmit>

   	printf("\r\n");
 8000836:	4819      	ldr	r0, [pc, #100]	@ (800089c <main+0xa0>)
 8000838:	f003 f990 	bl	8003b5c <puts>

   	printf("Scanning I2C bus:\r\n");
 800083c:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <main+0xa4>)
 800083e:	f003 f98d 	bl	8003b5c <puts>
  	HAL_StatusTypeDef result;
   	uint8_t i;
   	for (i=1; i<128; i++)
 8000842:	2301      	movs	r3, #1
 8000844:	77fb      	strb	r3, [r7, #31]
 8000846:	e01b      	b.n	8000880 <main+0x84>
   	   * &hi2c1 is the handle
   	   * (uint16_t)(i<<1) is the i2c address left aligned
   	   * retries 2
   	   * timeout 2
   	   */
   	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 8000848:	7ffb      	ldrb	r3, [r7, #31]
 800084a:	b29b      	uxth	r3, r3
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	b299      	uxth	r1, r3
 8000850:	2302      	movs	r3, #2
 8000852:	2202      	movs	r2, #2
 8000854:	4813      	ldr	r0, [pc, #76]	@ (80008a4 <main+0xa8>)
 8000856:	f000 fe41 	bl	80014dc <HAL_I2C_IsDeviceReady>
 800085a:	4603      	mov	r3, r0
 800085c:	77bb      	strb	r3, [r7, #30]
   	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 800085e:	7fbb      	ldrb	r3, [r7, #30]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <main+0x6e>
   	  {
   		  printf("."); // No ACK received at that address
 8000864:	202e      	movs	r0, #46	@ 0x2e
 8000866:	f003 f91b 	bl	8003aa0 <putchar>
   	  }
   	  if (result == HAL_OK)
 800086a:	7fbb      	ldrb	r3, [r7, #30]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d104      	bne.n	800087a <main+0x7e>
   	  {
   		  printf("0x%X", i); // Received an ACK at that address
 8000870:	7ffb      	ldrb	r3, [r7, #31]
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <main+0xac>)
 8000876:	f003 f901 	bl	8003a7c <iprintf>
   	for (i=1; i<128; i++)
 800087a:	7ffb      	ldrb	r3, [r7, #31]
 800087c:	3301      	adds	r3, #1
 800087e:	77fb      	strb	r3, [r7, #31]
 8000880:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dadf      	bge.n	8000848 <main+0x4c>
   	  }
   	}
   	printf("\r\n");
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <main+0xa0>)
 800088a:	f003 f967 	bl	8003b5c <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088e:	bf00      	nop
 8000890:	e7fd      	b.n	800088e <main+0x92>
 8000892:	bf00      	nop
 8000894:	080048c0 	.word	0x080048c0
 8000898:	200000dc 	.word	0x200000dc
 800089c:	080048a0 	.word	0x080048a0
 80008a0:	080048a4 	.word	0x080048a4
 80008a4:	20000084 	.word	0x20000084
 80008a8:	080048b8 	.word	0x080048b8

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	@ 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	2238      	movs	r2, #56	@ 0x38
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fa2e 	bl	8003d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f001 f8e6 	bl	8001aa0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008de:	2340      	movs	r3, #64	@ 0x40
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008ea:	2304      	movs	r3, #4
 80008ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008ee:	2355      	movs	r3, #85	@ 0x55
 80008f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f980 	bl	8001c08 <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800090e:	f000 f82b 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	230f      	movs	r3, #15
 8000914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2303      	movs	r3, #3
 8000918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2104      	movs	r1, #4
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fc7e 	bl	800222c <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000936:	f000 f817 	bl	8000968 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	@ 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800094c:	1d39      	adds	r1, r7, #4
 800094e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000952:	2201      	movs	r2, #1
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <__io_putchar+0x20>)
 8000956:	f002 f923 	bl	8002ba0 <HAL_UART_Transmit>

  return ch;
 800095a:	687b      	ldr	r3, [r7, #4]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000dc 	.word	0x200000dc

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	@ 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	@ 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009aa:	f001 f91d 	bl	8001be8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <NMI_Handler+0x4>

080009c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <MemManage_Handler+0x4>

080009d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a12:	f000 f9dd 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a1e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a22:	f000 fc9d 	bl	8001360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e00a      	b.n	8000a52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3c:	f3af 8000 	nop.w
 8000a40:	4601      	mov	r1, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1c5a      	adds	r2, r3, #1
 8000a46:	60ba      	str	r2, [r7, #8]
 8000a48:	b2ca      	uxtb	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dbf0      	blt.n	8000a3c <_read+0x12>
  }

  return len;
 8000a5a:	687b      	ldr	r3, [r7, #4]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e009      	b.n	8000a8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	60ba      	str	r2, [r7, #8]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff60 	bl	8000944 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3301      	adds	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	dbf1      	blt.n	8000a76 <_write+0x12>
  }
  return len;
 8000a92:	687b      	ldr	r3, [r7, #4]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_close>:

int _close(int file)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_isatty>:

int _isatty(int file)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	@ (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f003 f940 	bl	8003db8 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20020000 	.word	0x20020000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	200000d8 	.word	0x200000d8
 8000b6c:	200002c0 	.word	0x200002c0

08000b70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000b9a:	4a21      	ldr	r2, [pc, #132]	@ (8000c20 <MX_LPUART1_UART_Init+0x8c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000ba0:	4a20      	ldr	r2, [pc, #128]	@ (8000c24 <MX_LPUART1_UART_Init+0x90>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bb8:	220c      	movs	r2, #12
 8000bba:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bd6:	f001 ff93 	bl	8002b00 <HAL_UART_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000be0:	f7ff fec2 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000be8:	f002 fdbc 	bl	8003764 <HAL_UARTEx_SetTxFifoThreshold>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000bf2:	f7ff feb9 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000bfa:	f002 fdf1 	bl	80037e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000c04:	f7ff feb0 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_LPUART1_UART_Init+0x88>)
 8000c0a:	f002 fd72 	bl	80036f2 <HAL_UARTEx_DisableFifoMode>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000c14:	f7ff fea8 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000dc 	.word	0x200000dc
 8000c20:	40008000 	.word	0x40008000
 8000c24:	00033324 	.word	0x00033324

08000c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09e      	sub	sp, #120	@ 0x78
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2254      	movs	r2, #84	@ 0x54
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 f867 	bl	8003d1c <memset>
  if(uartHandle->Instance==LPUART1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <HAL_UART_MspInit+0xa8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d136      	bne.n	8000cc6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fcfd 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c70:	f7ff fe7a 	bl	8000968 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c74:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <HAL_UART_MspInit+0xac>)
 8000c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c78:	4a16      	ldr	r2, [pc, #88]	@ (8000cd4 <HAL_UART_MspInit+0xac>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <HAL_UART_MspInit+0xac>)
 8000c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_UART_MspInit+0xac>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c90:	4a10      	ldr	r2, [pc, #64]	@ (8000cd4 <HAL_UART_MspInit+0xac>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_UART_MspInit+0xac>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc2:	f000 f9b3 	bl	800102c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3778      	adds	r7, #120	@ 0x78
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff ff48 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	@ (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f003 f85d 	bl	8003dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fd77 	bl	80007fc <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d1c:	0800495c 	.word	0x0800495c
  ldr r2, =_sbss
 8000d20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d24:	200002c0 	.word	0x200002c0

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>

08000d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f939 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f80e 	bl	8000d5c <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e001      	b.n	8000d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4c:	f7ff fe12 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d50:	79fb      	ldrb	r3, [r7, #7]

}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d68:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <HAL_InitTick+0x68>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d022      	beq.n	8000db6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_InitTick+0x6c>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <HAL_InitTick+0x68>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f944 	bl	8001012 <HAL_SYSTICK_Config>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10f      	bne.n	8000db0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b0f      	cmp	r3, #15
 8000d94:	d809      	bhi.n	8000daa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d96:	2200      	movs	r2, #0
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d9e:	f000 f910 	bl	8000fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_InitTick+0x70>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e007      	b.n	8000dba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e004      	b.n	8000dba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e001      	b.n	8000dba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_IncTick+0x20>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a03      	ldr	r2, [pc, #12]	@ (8000dec <HAL_IncTick+0x1c>)
 8000de0:	6013      	str	r3, [r2, #0]
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20000170 	.word	0x20000170
 8000df0:	20000008 	.word	0x20000008

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000170 	.word	0x20000170

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff40 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff90 	bl	8000f00 <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5f 	bl	8000eac <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff33 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffa4 	bl	8000f68 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800103a:	e15a      	b.n	80012f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 814c 	beq.w	80012ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d005      	beq.n	800106c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001068:	2b02      	cmp	r3, #2
 800106a:	d130      	bne.n	80010ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a2:	2201      	movs	r2, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	f003 0201 	and.w	r2, r3, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d017      	beq.n	800110a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d123      	bne.n	800115e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	6939      	ldr	r1, [r7, #16]
 800115a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0203 	and.w	r2, r3, #3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80a6 	beq.w	80012ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001310 <HAL_GPIO_Init+0x2e4>)
 80011a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001310 <HAL_GPIO_Init+0x2e4>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ac:	4b58      	ldr	r3, [pc, #352]	@ (8001310 <HAL_GPIO_Init+0x2e4>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b8:	4a56      	ldr	r2, [pc, #344]	@ (8001314 <HAL_GPIO_Init+0x2e8>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011e2:	d01f      	beq.n	8001224 <HAL_GPIO_Init+0x1f8>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001318 <HAL_GPIO_Init+0x2ec>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d019      	beq.n	8001220 <HAL_GPIO_Init+0x1f4>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4b      	ldr	r2, [pc, #300]	@ (800131c <HAL_GPIO_Init+0x2f0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d013      	beq.n	800121c <HAL_GPIO_Init+0x1f0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001320 <HAL_GPIO_Init+0x2f4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d00d      	beq.n	8001218 <HAL_GPIO_Init+0x1ec>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a49      	ldr	r2, [pc, #292]	@ (8001324 <HAL_GPIO_Init+0x2f8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d007      	beq.n	8001214 <HAL_GPIO_Init+0x1e8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a48      	ldr	r2, [pc, #288]	@ (8001328 <HAL_GPIO_Init+0x2fc>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d101      	bne.n	8001210 <HAL_GPIO_Init+0x1e4>
 800120c:	2305      	movs	r3, #5
 800120e:	e00a      	b.n	8001226 <HAL_GPIO_Init+0x1fa>
 8001210:	2306      	movs	r3, #6
 8001212:	e008      	b.n	8001226 <HAL_GPIO_Init+0x1fa>
 8001214:	2304      	movs	r3, #4
 8001216:	e006      	b.n	8001226 <HAL_GPIO_Init+0x1fa>
 8001218:	2303      	movs	r3, #3
 800121a:	e004      	b.n	8001226 <HAL_GPIO_Init+0x1fa>
 800121c:	2302      	movs	r3, #2
 800121e:	e002      	b.n	8001226 <HAL_GPIO_Init+0x1fa>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <HAL_GPIO_Init+0x1fa>
 8001224:	2300      	movs	r3, #0
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	f002 0203 	and.w	r2, r2, #3
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	4093      	lsls	r3, r2
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001236:	4937      	ldr	r1, [pc, #220]	@ (8001314 <HAL_GPIO_Init+0x2e8>)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001244:	4b39      	ldr	r3, [pc, #228]	@ (800132c <HAL_GPIO_Init+0x300>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001268:	4a30      	ldr	r2, [pc, #192]	@ (800132c <HAL_GPIO_Init+0x300>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800126e:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_GPIO_Init+0x300>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001292:	4a26      	ldr	r2, [pc, #152]	@ (800132c <HAL_GPIO_Init+0x300>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001298:	4b24      	ldr	r3, [pc, #144]	@ (800132c <HAL_GPIO_Init+0x300>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012bc:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <HAL_GPIO_Init+0x300>)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <HAL_GPIO_Init+0x300>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012e6:	4a11      	ldr	r2, [pc, #68]	@ (800132c <HAL_GPIO_Init+0x300>)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f47f ae9d 	bne.w	800103c <HAL_GPIO_Init+0x10>
  }
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	48000400 	.word	0x48000400
 800131c:	48000800 	.word	0x48000800
 8001320:	48000c00 	.word	0x48000c00
 8001324:	48001000 	.word	0x48001000
 8001328:	48001400 	.word	0x48001400
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800134c:	e002      	b.n	8001354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f806 	bl	8001390 <HAL_GPIO_EXTI_Callback>
  }
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e08d      	b.n	80014d4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d106      	bne.n	80013d2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff f9bb 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2224      	movs	r2, #36	@ 0x24
 80013d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001406:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	e006      	b.n	800142e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800142c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d108      	bne.n	8001448 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	e007      	b.n	8001458 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001456:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800146a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800147a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69d9      	ldr	r1, [r3, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0201 	orr.w	r2, r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	460b      	mov	r3, r1
 80014ea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	f040 80d6 	bne.w	80016aa <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800150c:	d101      	bne.n	8001512 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800150e:	2302      	movs	r3, #2
 8001510:	e0cc      	b.n	80016ac <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_I2C_IsDeviceReady+0x44>
 800151c:	2302      	movs	r3, #2
 800151e:	e0c5      	b.n	80016ac <HAL_I2C_IsDeviceReady+0x1d0>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2224      	movs	r2, #36	@ 0x24
 800152c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_I2C_IsDeviceReady+0x72>
 800153e:	897b      	ldrh	r3, [r7, #10]
 8001540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001544:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001548:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800154c:	e006      	b.n	800155c <HAL_I2C_IsDeviceReady+0x80>
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001554:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001558:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001562:	f7ff fc47 	bl	8000df4 <HAL_GetTick>
 8001566:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b20      	cmp	r3, #32
 8001574:	bf0c      	ite	eq
 8001576:	2301      	moveq	r3, #1
 8001578:	2300      	movne	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b10      	cmp	r3, #16
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001594:	e034      	b.n	8001600 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800159c:	d01a      	beq.n	80015d4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800159e:	f7ff fc29 	bl	8000df4 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d302      	bcc.n	80015b4 <HAL_I2C_IsDeviceReady+0xd8>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10f      	bne.n	80015d4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c0:	f043 0220 	orr.w	r2, r3, #32
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e06b      	b.n	80016ac <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	2b20      	cmp	r3, #32
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b10      	cmp	r3, #16
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001600:	7ffb      	ldrb	r3, [r7, #31]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_I2C_IsDeviceReady+0x130>
 8001606:	7fbb      	ldrb	r3, [r7, #30]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0c4      	beq.n	8001596 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b10      	cmp	r3, #16
 8001618:	d01a      	beq.n	8001650 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	2120      	movs	r1, #32
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f869 	bl	80016fc <I2C_WaitOnFlagUntilTimeout>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e03b      	b.n	80016ac <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2220      	movs	r2, #32
 800163a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2220      	movs	r2, #32
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	e02d      	b.n	80016ac <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	2120      	movs	r1, #32
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f84e 	bl	80016fc <I2C_WaitOnFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e020      	b.n	80016ac <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2210      	movs	r2, #16
 8001670:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2220      	movs	r2, #32
 8001678:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	f63f af56 	bhi.w	8001536 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f043 0220 	orr.w	r2, r3, #32
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80016aa:	2302      	movs	r3, #2
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d103      	bne.n	80016d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d007      	beq.n	80016f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	619a      	str	r2, [r3, #24]
  }
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800170c:	e03b      	b.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f84c 	bl	80017b0 <I2C_IsErrorOccurred>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e041      	b.n	80017a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001728:	d02d      	beq.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800172a:	f7ff fb63 	bl	8000df4 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d302      	bcc.n	8001740 <I2C_WaitOnFlagUntilTimeout+0x44>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d122      	bne.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	4013      	ands	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	429a      	cmp	r2, r3
 800175c:	d113      	bne.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f043 0220 	orr.w	r2, r3, #32
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4013      	ands	r3, r2
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	429a      	cmp	r2, r3
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d0b4      	beq.n	800170e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d068      	beq.n	80018ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2210      	movs	r2, #16
 80017e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017e4:	e049      	b.n	800187a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ec:	d045      	beq.n	800187a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017ee:	f7ff fb01 	bl	8000df4 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d302      	bcc.n	8001804 <I2C_IsErrorOccurred+0x54>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d13a      	bne.n	800187a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001816:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001826:	d121      	bne.n	800186c <I2C_IsErrorOccurred+0xbc>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800182e:	d01d      	beq.n	800186c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001830:	7cfb      	ldrb	r3, [r7, #19]
 8001832:	2b20      	cmp	r3, #32
 8001834:	d01a      	beq.n	800186c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001844:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001846:	f7ff fad5 	bl	8000df4 <HAL_GetTick>
 800184a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800184c:	e00e      	b.n	800186c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800184e:	f7ff fad1 	bl	8000df4 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b19      	cmp	r3, #25
 800185a:	d907      	bls.n	800186c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f043 0320 	orr.w	r3, r3, #32
 8001862:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800186a:	e006      	b.n	800187a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	2b20      	cmp	r3, #32
 8001878:	d1e9      	bne.n	800184e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b20      	cmp	r3, #32
 8001886:	d003      	beq.n	8001890 <I2C_IsErrorOccurred+0xe0>
 8001888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0aa      	beq.n	80017e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2220      	movs	r2, #32
 800189e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00b      	beq.n	80018d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00b      	beq.n	800191c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001914:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800191c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01c      	beq.n	800195e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff fec5 	bl	80016b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <I2C_IsErrorOccurred+0x1bc>)
 8001936:	400b      	ands	r3, r1
 8001938:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800195e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001962:	4618      	mov	r0, r3
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	fe00e800 	.word	0xfe00e800

08001970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b20      	cmp	r3, #32
 8001984:	d138      	bne.n	80019f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001990:	2302      	movs	r3, #2
 8001992:	e032      	b.n	80019fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d139      	bne.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e033      	b.n	8001a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2224      	movs	r2, #36	@ 0x24
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d141      	bne.n	8001b32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aae:	4b4b      	ldr	r3, [pc, #300]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aba:	d131      	bne.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001abc:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac2:	4a46      	ldr	r2, [pc, #280]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ac8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001acc:	4b43      	ldr	r3, [pc, #268]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ad4:	4a41      	ldr	r2, [pc, #260]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001adc:	4b40      	ldr	r3, [pc, #256]	@ (8001be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2232      	movs	r2, #50	@ 0x32
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	0c9b      	lsrs	r3, r3, #18
 8001aee:	3301      	adds	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af2:	e002      	b.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afa:	4b38      	ldr	r3, [pc, #224]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b06:	d102      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f2      	bne.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b0e:	4b33      	ldr	r3, [pc, #204]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1a:	d158      	bne.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e057      	b.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b20:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b26:	4a2d      	ldr	r2, [pc, #180]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b30:	e04d      	b.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b38:	d141      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b46:	d131      	bne.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b48:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b58:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b60:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2232      	movs	r2, #50	@ 0x32
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	0c9b      	lsrs	r3, r3, #18
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b7e:	e002      	b.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b92:	d102      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f2      	bne.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba6:	d112      	bne.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e011      	b.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bbc:	e007      	b.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bc6:	4a05      	ldr	r2, [pc, #20]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	20000000 	.word	0x20000000
 8001be4:	431bde83 	.word	0x431bde83

08001be8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf6:	6093      	str	r3, [r2, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40007000 	.word	0x40007000

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e2fe      	b.n	8002218 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d075      	beq.n	8001d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c26:	4b97      	ldr	r3, [pc, #604]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c30:	4b94      	ldr	r3, [pc, #592]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3e>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_OscConfig+0x44>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d10b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d05b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d157      	bne.n	8001d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e2d9      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x74>
 8001c6e:	4b85      	ldr	r3, [pc, #532]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a84      	ldr	r2, [pc, #528]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7f      	ldr	r3, [pc, #508]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b7c      	ldr	r3, [pc, #496]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7b      	ldr	r2, [pc, #492]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001ca0:	4b78      	ldr	r3, [pc, #480]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a77      	ldr	r2, [pc, #476]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b75      	ldr	r3, [pc, #468]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a74      	ldr	r2, [pc, #464]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f898 	bl	8000df4 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f894 	bl	8000df4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e29e      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	4b6a      	ldr	r3, [pc, #424]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xc0>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f884 	bl	8000df4 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f880 	bl	8000df4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e28a      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	4b60      	ldr	r3, [pc, #384]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe8>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d075      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1e:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d28:	4b56      	ldr	r3, [pc, #344]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d102      	bne.n	8001d3e <HAL_RCC_OscConfig+0x136>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_OscConfig+0x13c>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d11f      	bne.n	8001d84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d44:	4b4f      	ldr	r3, [pc, #316]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_OscConfig+0x154>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e25d      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b49      	ldr	r3, [pc, #292]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4946      	ldr	r1, [pc, #280]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d70:	4b45      	ldr	r3, [pc, #276]	@ (8001e88 <HAL_RCC_OscConfig+0x280>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fff1 	bl	8000d5c <HAL_InitTick>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d043      	beq.n	8001e08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e249      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a3c      	ldr	r2, [pc, #240]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f82c 	bl	8000df4 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff f828 	bl	8000df4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e232      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db2:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	061b      	lsls	r3, r3, #24
 8001dcc:	492d      	ldr	r1, [pc, #180]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
 8001dd2:	e01a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f808 	bl	8000df4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7ff f804 	bl	8000df4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e20e      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e0>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d041      	beq.n	8001e9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e24:	4a17      	ldr	r2, [pc, #92]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7fe ffe1 	bl	8000df4 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7fe ffdd 	bl	8000df4 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e1e7      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0ef      	beq.n	8001e36 <HAL_RCC_OscConfig+0x22e>
 8001e56:	e020      	b.n	8001e9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <HAL_RCC_OscConfig+0x27c>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7fe ffc4 	bl	8000df4 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6e:	e00d      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7fe ffc0 	bl	8000df4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d906      	bls.n	8001e8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1ca      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ea      	bne.n	8001e70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80a6 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eac:	4b84      	ldr	r3, [pc, #528]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2b4>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x2b6>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ece:	4b7c      	ldr	r3, [pc, #496]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	4b79      	ldr	r3, [pc, #484]	@ (80020c4 <HAL_RCC_OscConfig+0x4bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eea:	4b76      	ldr	r3, [pc, #472]	@ (80020c4 <HAL_RCC_OscConfig+0x4bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a75      	ldr	r2, [pc, #468]	@ (80020c4 <HAL_RCC_OscConfig+0x4bc>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe ff7d 	bl	8000df4 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7fe ff79 	bl	8000df4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e183      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f10:	4b6c      	ldr	r3, [pc, #432]	@ (80020c4 <HAL_RCC_OscConfig+0x4bc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d108      	bne.n	8001f36 <HAL_RCC_OscConfig+0x32e>
 8001f24:	4b66      	ldr	r3, [pc, #408]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2a:	4a65      	ldr	r2, [pc, #404]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f34:	e024      	b.n	8001f80 <HAL_RCC_OscConfig+0x378>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d110      	bne.n	8001f60 <HAL_RCC_OscConfig+0x358>
 8001f3e:	4b60      	ldr	r3, [pc, #384]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	4a5e      	ldr	r2, [pc, #376]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f4e:	4b5c      	ldr	r3, [pc, #368]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f54:	4a5a      	ldr	r2, [pc, #360]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f5e:	e00f      	b.n	8001f80 <HAL_RCC_OscConfig+0x378>
 8001f60:	4b57      	ldr	r3, [pc, #348]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	4a56      	ldr	r2, [pc, #344]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f70:	4b53      	ldr	r3, [pc, #332]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	4a52      	ldr	r2, [pc, #328]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d016      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe ff34 	bl	8000df4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7fe ff30 	bl	8000df4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e138      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b46      	ldr	r3, [pc, #280]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ed      	beq.n	8001f90 <HAL_RCC_OscConfig+0x388>
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ff1d 	bl	8000df4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7fe ff19 	bl	8000df4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e121      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ed      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b35      	ldr	r3, [pc, #212]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	4a34      	ldr	r2, [pc, #208]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8001fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d03c      	beq.n	800207a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01c      	beq.n	8002042 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002008:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800200e:	4a2c      	ldr	r2, [pc, #176]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe feec 	bl	8000df4 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002020:	f7fe fee8 	bl	8000df4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0f2      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002032:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8002034:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ef      	beq.n	8002020 <HAL_RCC_OscConfig+0x418>
 8002040:	e01b      	b.n	800207a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002042:	4b1f      	ldr	r3, [pc, #124]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8002044:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002048:	4a1d      	ldr	r2, [pc, #116]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe fecf 	bl	8000df4 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800205a:	f7fe fecb 	bl	8000df4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0d5      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800206c:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ef      	bne.n	800205a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80c9 	beq.w	8002216 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002084:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b0c      	cmp	r3, #12
 800208e:	f000 8083 	beq.w	8002198 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d15e      	bne.n	8002158 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fea5 	bl	8000df4 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ac:	e00c      	b.n	80020c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ae:	f7fe fea1 	bl	8000df4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d905      	bls.n	80020c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0ab      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c8:	4b55      	ldr	r3, [pc, #340]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ec      	bne.n	80020ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d4:	4b52      	ldr	r3, [pc, #328]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4b52      	ldr	r3, [pc, #328]	@ (8002224 <HAL_RCC_OscConfig+0x61c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6a11      	ldr	r1, [r2, #32]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020e4:	3a01      	subs	r2, #1
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	4311      	orrs	r1, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80020ee:	0212      	lsls	r2, r2, #8
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020f6:	0852      	lsrs	r2, r2, #1
 80020f8:	3a01      	subs	r2, #1
 80020fa:	0552      	lsls	r2, r2, #21
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002102:	0852      	lsrs	r2, r2, #1
 8002104:	3a01      	subs	r2, #1
 8002106:	0652      	lsls	r2, r2, #25
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800210e:	06d2      	lsls	r2, r2, #27
 8002110:	430a      	orrs	r2, r1
 8002112:	4943      	ldr	r1, [pc, #268]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 8002114:	4313      	orrs	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b41      	ldr	r3, [pc, #260]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a40      	ldr	r2, [pc, #256]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002124:	4b3e      	ldr	r3, [pc, #248]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a3d      	ldr	r2, [pc, #244]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800212e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fe60 	bl	8000df4 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe fe5c 	bl	8000df4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e066      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	4b35      	ldr	r3, [pc, #212]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x530>
 8002156:	e05e      	b.n	8002216 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 800215e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe fe46 	bl	8000df4 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fe42 	bl	8000df4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e04c      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800218a:	4b25      	ldr	r3, [pc, #148]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	4924      	ldr	r1, [pc, #144]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 8002190:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_RCC_OscConfig+0x620>)
 8002192:	4013      	ands	r3, r2
 8002194:	60cb      	str	r3, [r1, #12]
 8002196:	e03e      	b.n	8002216 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e039      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <HAL_RCC_OscConfig+0x618>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d12c      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	3b01      	subs	r3, #1
 80021c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d123      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d11b      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d113      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	3b01      	subs	r3, #1
 80021f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	019f800c 	.word	0x019f800c
 8002228:	feeefffc 	.word	0xfeeefffc

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e11e      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b91      	ldr	r3, [pc, #580]	@ (800248c <HAL_RCC_ClockConfig+0x260>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b8e      	ldr	r3, [pc, #568]	@ (800248c <HAL_RCC_ClockConfig+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	498c      	ldr	r1, [pc, #560]	@ (800248c <HAL_RCC_ClockConfig+0x260>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b8a      	ldr	r3, [pc, #552]	@ (800248c <HAL_RCC_ClockConfig+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e106      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d073      	beq.n	8002368 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d129      	bne.n	80022dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002288:	4b81      	ldr	r3, [pc, #516]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0f4      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002298:	f000 f99e 	bl	80025d8 <RCC_GetSysClockFreqFromPLLSource>
 800229c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4a7c      	ldr	r2, [pc, #496]	@ (8002494 <HAL_RCC_ClockConfig+0x268>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d93f      	bls.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d033      	beq.n	8002326 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d12f      	bne.n	8002326 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022c6:	4b72      	ldr	r3, [pc, #456]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022ce:	4a70      	ldr	r2, [pc, #448]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e024      	b.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0c6      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	4b66      	ldr	r3, [pc, #408]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0be      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002304:	f000 f8ce 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002308:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4a61      	ldr	r2, [pc, #388]	@ (8002494 <HAL_RCC_ClockConfig+0x268>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d909      	bls.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002312:	4b5f      	ldr	r3, [pc, #380]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800231a:	4a5d      	ldr	r2, [pc, #372]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 800231c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002320:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b5a      	ldr	r3, [pc, #360]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4957      	ldr	r1, [pc, #348]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002338:	f7fe fd5c 	bl	8000df4 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7fe fd58 	bl	8000df4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e095      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b4e      	ldr	r3, [pc, #312]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b43      	ldr	r3, [pc, #268]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a42      	ldr	r2, [pc, #264]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002386:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800238a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002398:	4b3d      	ldr	r3, [pc, #244]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b39      	ldr	r3, [pc, #228]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4936      	ldr	r1, [pc, #216]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
 80023ba:	e008      	b.n	80023ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b80      	cmp	r3, #128	@ 0x80
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023c2:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a32      	ldr	r2, [pc, #200]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ce:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <HAL_RCC_ClockConfig+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d21d      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023dc:	4b2b      	ldr	r3, [pc, #172]	@ (800248c <HAL_RCC_ClockConfig+0x260>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 020f 	bic.w	r2, r3, #15
 80023e4:	4929      	ldr	r1, [pc, #164]	@ (800248c <HAL_RCC_ClockConfig+0x260>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fd02 	bl	8000df4 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe fcfe 	bl	8000df4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e03b      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_ClockConfig+0x260>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d1ed      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4917      	ldr	r1, [pc, #92]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	490f      	ldr	r1, [pc, #60]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002456:	f000 f825 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <HAL_RCC_ClockConfig+0x264>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	490c      	ldr	r1, [pc, #48]	@ (8002498 <HAL_RCC_ClockConfig+0x26c>)
 8002468:	5ccb      	ldrb	r3, [r1, r3]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <HAL_RCC_ClockConfig+0x270>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_RCC_ClockConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fc6e 	bl	8000d5c <HAL_InitTick>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	04c4b400 	.word	0x04c4b400
 8002498:	080048d8 	.word	0x080048d8
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024aa:	4b2c      	ldr	r3, [pc, #176]	@ (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d102      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e047      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024bc:	4b27      	ldr	r3, [pc, #156]	@ (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b26      	ldr	r3, [pc, #152]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e03e      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024ce:	4b23      	ldr	r3, [pc, #140]	@ (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d136      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024da:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3301      	adds	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	4a16      	ldr	r2, [pc, #88]	@ (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002502:	68d2      	ldr	r2, [r2, #12]
 8002504:	0a12      	lsrs	r2, r2, #8
 8002506:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
      break;
 8002510:	e00c      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002512:	4a13      	ldr	r2, [pc, #76]	@ (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4a10      	ldr	r2, [pc, #64]	@ (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	0a12      	lsrs	r2, r2, #8
 8002520:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	617b      	str	r3, [r7, #20]
      break;
 800252a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0e5b      	lsrs	r3, r3, #25
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	e001      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800254c:	693b      	ldr	r3, [r7, #16]
}
 800254e:	4618      	mov	r0, r3
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	00f42400 	.word	0x00f42400
 8002564:	016e3600 	.word	0x016e3600

08002568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_RCC_GetHCLKFreq+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000000 	.word	0x20000000

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002584:	f7ff fff0 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4904      	ldr	r1, [pc, #16]	@ (80025a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	080048e8 	.word	0x080048e8

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025b0:	f7ff ffda 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0adb      	lsrs	r3, r3, #11
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	080048e8 	.word	0x080048e8

080025d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3301      	adds	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d10c      	bne.n	8002616 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fc:	4a17      	ldr	r2, [pc, #92]	@ (800265c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	4a14      	ldr	r2, [pc, #80]	@ (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002606:	68d2      	ldr	r2, [r2, #12]
 8002608:	0a12      	lsrs	r2, r2, #8
 800260a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
    break;
 8002614:	e00c      	b.n	8002630 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002616:	4a12      	ldr	r2, [pc, #72]	@ (8002660 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	0a12      	lsrs	r2, r2, #8
 8002624:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    break;
 800262e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002630:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0e5b      	lsrs	r3, r3, #25
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800264a:	687b      	ldr	r3, [r7, #4]
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40021000 	.word	0x40021000
 800265c:	016e3600 	.word	0x016e3600
 8002660:	00f42400 	.word	0x00f42400

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800266c:	2300      	movs	r3, #0
 800266e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002670:	2300      	movs	r3, #0
 8002672:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8098 	beq.w	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b40      	ldr	r3, [pc, #256]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	4a3f      	ldr	r2, [pc, #252]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269c:	6593      	str	r3, [r2, #88]	@ 0x58
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a39      	ldr	r2, [pc, #228]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ba:	f7fe fb9b 	bl	8000df4 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c0:	e009      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe fb97 	bl	8000df4 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d902      	bls.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	74fb      	strb	r3, [r7, #19]
        break;
 80026d4:	e005      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026d6:	4b30      	ldr	r3, [pc, #192]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ef      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d159      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01e      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	d019      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002704:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800270e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002720:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002726:	4a1b      	ldr	r2, [pc, #108]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002730:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d016      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fb57 	bl	8000df4 <HAL_GetTick>
 8002746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002748:	e00b      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe fb53 	bl	8000df4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d902      	bls.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	74fb      	strb	r3, [r7, #19]
            break;
 8002760:	e006      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ec      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002776:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002784:	4903      	ldr	r1, [pc, #12]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800278c:	e008      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	74bb      	strb	r3, [r7, #18]
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a0:	7c7b      	ldrb	r3, [r7, #17]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4ba7      	ldr	r3, [pc, #668]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	4aa6      	ldr	r2, [pc, #664]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027be:	4ba1      	ldr	r3, [pc, #644]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f023 0203 	bic.w	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	499d      	ldr	r1, [pc, #628]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e0:	4b98      	ldr	r3, [pc, #608]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	f023 020c 	bic.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4995      	ldr	r1, [pc, #596]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002802:	4b90      	ldr	r3, [pc, #576]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002808:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	498c      	ldr	r1, [pc, #560]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002824:	4b87      	ldr	r3, [pc, #540]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	4984      	ldr	r1, [pc, #528]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002846:	4b7f      	ldr	r3, [pc, #508]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	497b      	ldr	r1, [pc, #492]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002868:	4b76      	ldr	r3, [pc, #472]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	4973      	ldr	r1, [pc, #460]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800288a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002890:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	496a      	ldr	r1, [pc, #424]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ac:	4b65      	ldr	r3, [pc, #404]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4962      	ldr	r1, [pc, #392]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	4959      	ldr	r1, [pc, #356]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028f0:	4b54      	ldr	r3, [pc, #336]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	4951      	ldr	r1, [pc, #324]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002912:	4b4c      	ldr	r3, [pc, #304]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002918:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	4948      	ldr	r1, [pc, #288]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002934:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	4940      	ldr	r1, [pc, #256]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002954:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a3a      	ldr	r2, [pc, #232]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800295e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800296c:	4b35      	ldr	r3, [pc, #212]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297a:	4932      	ldr	r1, [pc, #200]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a2c      	ldr	r2, [pc, #176]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002996:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029a4:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b2:	4924      	ldr	r1, [pc, #144]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029dc:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ea:	4916      	ldr	r1, [pc, #88]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029fa:	d105      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a10      	ldr	r2, [pc, #64]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d019      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	4908      	ldr	r1, [pc, #32]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a02      	ldr	r2, [pc, #8]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	e002      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a54:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	4926      	ldr	r1, [pc, #152]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a74:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a20      	ldr	r2, [pc, #128]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a9a:	4918      	ldr	r1, [pc, #96]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002aac:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	490a      	ldr	r1, [pc, #40]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002af0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e042      	b.n	8002b98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7fe f87f 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2224      	movs	r2, #36	@ 0x24
 8002b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fbb2 	bl	80032b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8b3 	bl	8002cbc <UART_SetConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e01b      	b.n	8002b98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fc31 	bl	80033f8 <UART_CheckIdleState>
 8002b96:	4603      	mov	r3, r0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d17b      	bne.n	8002cb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_UART_Transmit+0x26>
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e074      	b.n	8002cb4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2221      	movs	r2, #33	@ 0x21
 8002bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bda:	f7fe f90b 	bl	8000df4 <HAL_GetTick>
 8002bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf8:	d108      	bne.n	8002c0c <HAL_UART_Transmit+0x6c>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e003      	b.n	8002c14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c14:	e030      	b.n	8002c78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2180      	movs	r1, #128	@ 0x80
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fc93 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e03d      	b.n	8002cb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10b      	bne.n	8002c56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3302      	adds	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e007      	b.n	8002c66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3301      	adds	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1c8      	bne.n	8002c16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2140      	movs	r1, #64	@ 0x40
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fc5c 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e006      	b.n	8002cb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc0:	b08c      	sub	sp, #48	@ 0x30
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4baa      	ldr	r3, [pc, #680]	@ (8002f94 <UART_SetConfig+0x2d8>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a9f      	ldr	r2, [pc, #636]	@ (8002f98 <UART_SetConfig+0x2dc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d24:	4313      	orrs	r3, r2
 8002d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002d32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	f023 010f 	bic.w	r1, r3, #15
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a90      	ldr	r2, [pc, #576]	@ (8002f9c <UART_SetConfig+0x2e0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d125      	bne.n	8002dac <UART_SetConfig+0xf0>
 8002d60:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa0 <UART_SetConfig+0x2e4>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d81a      	bhi.n	8002da4 <UART_SetConfig+0xe8>
 8002d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <UART_SetConfig+0xb8>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d95 	.word	0x08002d95
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002d9d 	.word	0x08002d9d
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d8a:	e116      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d92:	e112      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002d94:	2304      	movs	r3, #4
 8002d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9a:	e10e      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002da2:	e10a      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002da4:	2310      	movs	r3, #16
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002daa:	e106      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7c      	ldr	r2, [pc, #496]	@ (8002fa4 <UART_SetConfig+0x2e8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d138      	bne.n	8002e28 <UART_SetConfig+0x16c>
 8002db6:	4b7a      	ldr	r3, [pc, #488]	@ (8002fa0 <UART_SetConfig+0x2e4>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d82d      	bhi.n	8002e20 <UART_SetConfig+0x164>
 8002dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <UART_SetConfig+0x110>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002e01 	.word	0x08002e01
 8002dd0:	08002e21 	.word	0x08002e21
 8002dd4:	08002e21 	.word	0x08002e21
 8002dd8:	08002e21 	.word	0x08002e21
 8002ddc:	08002e11 	.word	0x08002e11
 8002de0:	08002e21 	.word	0x08002e21
 8002de4:	08002e21 	.word	0x08002e21
 8002de8:	08002e21 	.word	0x08002e21
 8002dec:	08002e09 	.word	0x08002e09
 8002df0:	08002e21 	.word	0x08002e21
 8002df4:	08002e21 	.word	0x08002e21
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e19 	.word	0x08002e19
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e06:	e0d8      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0e:	e0d4      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e10:	2304      	movs	r3, #4
 8002e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e16:	e0d0      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e18:	2308      	movs	r3, #8
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1e:	e0cc      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e20:	2310      	movs	r3, #16
 8002e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e26:	e0c8      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5e      	ldr	r2, [pc, #376]	@ (8002fa8 <UART_SetConfig+0x2ec>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d125      	bne.n	8002e7e <UART_SetConfig+0x1c2>
 8002e32:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa0 <UART_SetConfig+0x2e4>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e3c:	2b30      	cmp	r3, #48	@ 0x30
 8002e3e:	d016      	beq.n	8002e6e <UART_SetConfig+0x1b2>
 8002e40:	2b30      	cmp	r3, #48	@ 0x30
 8002e42:	d818      	bhi.n	8002e76 <UART_SetConfig+0x1ba>
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d00a      	beq.n	8002e5e <UART_SetConfig+0x1a2>
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d814      	bhi.n	8002e76 <UART_SetConfig+0x1ba>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <UART_SetConfig+0x19a>
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d008      	beq.n	8002e66 <UART_SetConfig+0x1aa>
 8002e54:	e00f      	b.n	8002e76 <UART_SetConfig+0x1ba>
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e5c:	e0ad      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e64:	e0a9      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e66:	2304      	movs	r3, #4
 8002e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e6c:	e0a5      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e74:	e0a1      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e76:	2310      	movs	r3, #16
 8002e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7c:	e09d      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a4a      	ldr	r2, [pc, #296]	@ (8002fac <UART_SetConfig+0x2f0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d125      	bne.n	8002ed4 <UART_SetConfig+0x218>
 8002e88:	4b45      	ldr	r3, [pc, #276]	@ (8002fa0 <UART_SetConfig+0x2e4>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e94:	d016      	beq.n	8002ec4 <UART_SetConfig+0x208>
 8002e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e98:	d818      	bhi.n	8002ecc <UART_SetConfig+0x210>
 8002e9a:	2b80      	cmp	r3, #128	@ 0x80
 8002e9c:	d00a      	beq.n	8002eb4 <UART_SetConfig+0x1f8>
 8002e9e:	2b80      	cmp	r3, #128	@ 0x80
 8002ea0:	d814      	bhi.n	8002ecc <UART_SetConfig+0x210>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <UART_SetConfig+0x1f0>
 8002ea6:	2b40      	cmp	r3, #64	@ 0x40
 8002ea8:	d008      	beq.n	8002ebc <UART_SetConfig+0x200>
 8002eaa:	e00f      	b.n	8002ecc <UART_SetConfig+0x210>
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb2:	e082      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eba:	e07e      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec2:	e07a      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eca:	e076      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed2:	e072      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a35      	ldr	r2, [pc, #212]	@ (8002fb0 <UART_SetConfig+0x2f4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d12a      	bne.n	8002f34 <UART_SetConfig+0x278>
 8002ede:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <UART_SetConfig+0x2e4>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eec:	d01a      	beq.n	8002f24 <UART_SetConfig+0x268>
 8002eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ef2:	d81b      	bhi.n	8002f2c <UART_SetConfig+0x270>
 8002ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef8:	d00c      	beq.n	8002f14 <UART_SetConfig+0x258>
 8002efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efe:	d815      	bhi.n	8002f2c <UART_SetConfig+0x270>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <UART_SetConfig+0x250>
 8002f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f08:	d008      	beq.n	8002f1c <UART_SetConfig+0x260>
 8002f0a:	e00f      	b.n	8002f2c <UART_SetConfig+0x270>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f12:	e052      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f14:	2302      	movs	r3, #2
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1a:	e04e      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f22:	e04a      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f24:	2308      	movs	r3, #8
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2a:	e046      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f32:	e042      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <UART_SetConfig+0x2dc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d13a      	bne.n	8002fb4 <UART_SetConfig+0x2f8>
 8002f3e:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <UART_SetConfig+0x2e4>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f4c:	d01a      	beq.n	8002f84 <UART_SetConfig+0x2c8>
 8002f4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f52:	d81b      	bhi.n	8002f8c <UART_SetConfig+0x2d0>
 8002f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f58:	d00c      	beq.n	8002f74 <UART_SetConfig+0x2b8>
 8002f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f5e:	d815      	bhi.n	8002f8c <UART_SetConfig+0x2d0>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <UART_SetConfig+0x2b0>
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f68:	d008      	beq.n	8002f7c <UART_SetConfig+0x2c0>
 8002f6a:	e00f      	b.n	8002f8c <UART_SetConfig+0x2d0>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f72:	e022      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f74:	2302      	movs	r3, #2
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7a:	e01e      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f82:	e01a      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f84:	2308      	movs	r3, #8
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8a:	e016      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f92:	e012      	b.n	8002fba <UART_SetConfig+0x2fe>
 8002f94:	cfff69f3 	.word	0xcfff69f3
 8002f98:	40008000 	.word	0x40008000
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40004400 	.word	0x40004400
 8002fa8:	40004800 	.word	0x40004800
 8002fac:	40004c00 	.word	0x40004c00
 8002fb0:	40005000 	.word	0x40005000
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4aae      	ldr	r2, [pc, #696]	@ (8003278 <UART_SetConfig+0x5bc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f040 8097 	bne.w	80030f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d823      	bhi.n	8003016 <UART_SetConfig+0x35a>
 8002fce:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <UART_SetConfig+0x318>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08002ff9 	.word	0x08002ff9
 8002fd8:	08003017 	.word	0x08003017
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003017 	.word	0x08003017
 8002fe4:	08003007 	.word	0x08003007
 8002fe8:	08003017 	.word	0x08003017
 8002fec:	08003017 	.word	0x08003017
 8002ff0:	08003017 	.word	0x08003017
 8002ff4:	0800300f 	.word	0x0800300f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f7ff fac2 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ffe:	e010      	b.n	8003022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b9e      	ldr	r3, [pc, #632]	@ (800327c <UART_SetConfig+0x5c0>)
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003004:	e00d      	b.n	8003022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7ff fa4d 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800300a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800300c:	e009      	b.n	8003022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003014:	e005      	b.n	8003022 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8130 	beq.w	800328a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	4a94      	ldr	r2, [pc, #592]	@ (8003280 <UART_SetConfig+0x5c4>)
 8003030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003034:	461a      	mov	r2, r3
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	fbb3 f3f2 	udiv	r3, r3, r2
 800303c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	429a      	cmp	r2, r3
 800304c:	d305      	bcc.n	800305a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	429a      	cmp	r2, r3
 8003058:	d903      	bls.n	8003062 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003060:	e113      	b.n	800328a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	2200      	movs	r2, #0
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	60fa      	str	r2, [r7, #12]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	4a84      	ldr	r2, [pc, #528]	@ (8003280 <UART_SetConfig+0x5c4>)
 8003070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003074:	b29b      	uxth	r3, r3
 8003076:	2200      	movs	r2, #0
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003080:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003084:	f7fd f91c 	bl	80002c0 <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	020b      	lsls	r3, r1, #8
 800309a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800309e:	0202      	lsls	r2, r0, #8
 80030a0:	6979      	ldr	r1, [r7, #20]
 80030a2:	6849      	ldr	r1, [r1, #4]
 80030a4:	0849      	lsrs	r1, r1, #1
 80030a6:	2000      	movs	r0, #0
 80030a8:	460c      	mov	r4, r1
 80030aa:	4605      	mov	r5, r0
 80030ac:	eb12 0804 	adds.w	r8, r2, r4
 80030b0:	eb43 0905 	adc.w	r9, r3, r5
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	469a      	mov	sl, r3
 80030bc:	4693      	mov	fp, r2
 80030be:	4652      	mov	r2, sl
 80030c0:	465b      	mov	r3, fp
 80030c2:	4640      	mov	r0, r8
 80030c4:	4649      	mov	r1, r9
 80030c6:	f7fd f8fb 	bl	80002c0 <__aeabi_uldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4613      	mov	r3, r2
 80030d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d8:	d308      	bcc.n	80030ec <UART_SetConfig+0x430>
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030e0:	d204      	bcs.n	80030ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	e0ce      	b.n	800328a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030f2:	e0ca      	b.n	800328a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030fc:	d166      	bne.n	80031cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80030fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003102:	2b08      	cmp	r3, #8
 8003104:	d827      	bhi.n	8003156 <UART_SetConfig+0x49a>
 8003106:	a201      	add	r2, pc, #4	@ (adr r2, 800310c <UART_SetConfig+0x450>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	08003131 	.word	0x08003131
 8003110:	08003139 	.word	0x08003139
 8003114:	08003141 	.word	0x08003141
 8003118:	08003157 	.word	0x08003157
 800311c:	08003147 	.word	0x08003147
 8003120:	08003157 	.word	0x08003157
 8003124:	08003157 	.word	0x08003157
 8003128:	08003157 	.word	0x08003157
 800312c:	0800314f 	.word	0x0800314f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7ff fa26 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8003134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003136:	e014      	b.n	8003162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7ff fa38 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 800313c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800313e:	e010      	b.n	8003162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003140:	4b4e      	ldr	r3, [pc, #312]	@ (800327c <UART_SetConfig+0x5c0>)
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003144:	e00d      	b.n	8003162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7ff f9ad 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800314a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800314c:	e009      	b.n	8003162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003154:	e005      	b.n	8003162 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8090 	beq.w	800328a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	4a44      	ldr	r2, [pc, #272]	@ (8003280 <UART_SetConfig+0x5c4>)
 8003170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003174:	461a      	mov	r2, r3
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	fbb3 f3f2 	udiv	r3, r3, r2
 800317c:	005a      	lsls	r2, r3, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	441a      	add	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d916      	bls.n	80031c4 <UART_SetConfig+0x508>
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800319c:	d212      	bcs.n	80031c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f023 030f 	bic.w	r3, r3, #15
 80031a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	8bfb      	ldrh	r3, [r7, #30]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	8bfa      	ldrh	r2, [r7, #30]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	e062      	b.n	800328a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031ca:	e05e      	b.n	800328a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d828      	bhi.n	8003226 <UART_SetConfig+0x56a>
 80031d4:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <UART_SetConfig+0x520>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003201 	.word	0x08003201
 80031e0:	08003209 	.word	0x08003209
 80031e4:	08003211 	.word	0x08003211
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003217 	.word	0x08003217
 80031f0:	08003227 	.word	0x08003227
 80031f4:	08003227 	.word	0x08003227
 80031f8:	08003227 	.word	0x08003227
 80031fc:	0800321f 	.word	0x0800321f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003200:	f7ff f9be 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8003204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003206:	e014      	b.n	8003232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff f9d0 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 800320c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800320e:	e010      	b.n	8003232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003210:	4b1a      	ldr	r3, [pc, #104]	@ (800327c <UART_SetConfig+0x5c0>)
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003214:	e00d      	b.n	8003232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003216:	f7ff f945 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800321a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800321c:	e009      	b.n	8003232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003224:	e005      	b.n	8003232 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003230:	bf00      	nop
    }

    if (pclk != 0U)
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d028      	beq.n	800328a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	4a10      	ldr	r2, [pc, #64]	@ (8003280 <UART_SetConfig+0x5c4>)
 800323e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003242:	461a      	mov	r2, r3
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	fbb3 f2f2 	udiv	r2, r3, r2
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	441a      	add	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d910      	bls.n	8003284 <UART_SetConfig+0x5c8>
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d20c      	bcs.n	8003284 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	b29a      	uxth	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	e009      	b.n	800328a <UART_SetConfig+0x5ce>
 8003276:	bf00      	nop
 8003278:	40008000 	.word	0x40008000
 800327c:	00f42400 	.word	0x00f42400
 8003280:	080048f0 	.word	0x080048f0
      }
      else
      {
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2201      	movs	r2, #1
 800328e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2201      	movs	r2, #1
 8003296:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3730      	adds	r7, #48	@ 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01a      	beq.n	80033ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033b2:	d10a      	bne.n	80033ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b098      	sub	sp, #96	@ 0x60
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003408:	f7fd fcf4 	bl	8000df4 <HAL_GetTick>
 800340c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d12f      	bne.n	800347c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f88e 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d022      	beq.n	800347c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800344a:	653b      	str	r3, [r7, #80]	@ 0x50
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003454:	647b      	str	r3, [r7, #68]	@ 0x44
 8003456:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800345a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e6      	bne.n	8003436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e063      	b.n	8003544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d149      	bne.n	800351e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003492:	2200      	movs	r2, #0
 8003494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f857 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d03c      	beq.n	800351e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	623b      	str	r3, [r7, #32]
   return(result);
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80034c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e6      	bne.n	80034a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3308      	adds	r3, #8
 80034f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f6:	61fa      	str	r2, [r7, #28]
 80034f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	617b      	str	r3, [r7, #20]
   return(result);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e5      	bne.n	80034d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e012      	b.n	8003544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3758      	adds	r7, #88	@ 0x58
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355c:	e04f      	b.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003564:	d04b      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fd fc45 	bl	8000df4 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <UART_WaitOnFlagUntilTimeout+0x30>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e04e      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d037      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b80      	cmp	r3, #128	@ 0x80
 8003592:	d034      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b40      	cmp	r3, #64	@ 0x40
 8003598:	d031      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d110      	bne.n	80035ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2208      	movs	r2, #8
 80035ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f838 	bl	8003626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2208      	movs	r2, #8
 80035ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e029      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d8:	d111      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f81e 	bl	8003626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e00f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	429a      	cmp	r2, r3
 800361a:	d0a0      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003626:	b480      	push	{r7}
 8003628:	b095      	sub	sp, #84	@ 0x54
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800364c:	643b      	str	r3, [r7, #64]	@ 0x40
 800364e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e6      	bne.n	800362e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3308      	adds	r3, #8
 8003666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800368a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e3      	bne.n	8003660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d118      	bne.n	80036d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0310 	bic.w	r3, r3, #16
 80036b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6979      	ldr	r1, [r7, #20]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	613b      	str	r3, [r7, #16]
   return(result);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e6      	bne.n	80036a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80036e6:	bf00      	nop
 80036e8:	3754      	adds	r7, #84	@ 0x54
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_UARTEx_DisableFifoMode+0x16>
 8003704:	2302      	movs	r3, #2
 8003706:	e027      	b.n	8003758 <HAL_UARTEx_DisableFifoMode+0x66>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	@ 0x24
 8003714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003736:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e02d      	b.n	80037d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	@ 0x24
 8003788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f84f 	bl	800385c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e02d      	b.n	8003854 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	@ 0x24
 8003804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f811 	bl	800385c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003868:	2b00      	cmp	r3, #0
 800386a:	d108      	bne.n	800387e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800387c:	e031      	b.n	80038e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800387e:	2308      	movs	r3, #8
 8003880:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003882:	2308      	movs	r3, #8
 8003884:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	0e5b      	lsrs	r3, r3, #25
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0f5b      	lsrs	r3, r3, #29
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038a6:	7bbb      	ldrb	r3, [r7, #14]
 80038a8:	7b3a      	ldrb	r2, [r7, #12]
 80038aa:	4911      	ldr	r1, [pc, #68]	@ (80038f0 <UARTEx_SetNbDataToProcess+0x94>)
 80038ac:	5c8a      	ldrb	r2, [r1, r2]
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038b2:	7b3a      	ldrb	r2, [r7, #12]
 80038b4:	490f      	ldr	r1, [pc, #60]	@ (80038f4 <UARTEx_SetNbDataToProcess+0x98>)
 80038b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	7b7a      	ldrb	r2, [r7, #13]
 80038c8:	4909      	ldr	r1, [pc, #36]	@ (80038f0 <UARTEx_SetNbDataToProcess+0x94>)
 80038ca:	5c8a      	ldrb	r2, [r1, r2]
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038d0:	7b7a      	ldrb	r2, [r7, #13]
 80038d2:	4908      	ldr	r1, [pc, #32]	@ (80038f4 <UARTEx_SetNbDataToProcess+0x98>)
 80038d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	08004908 	.word	0x08004908
 80038f4:	08004910 	.word	0x08004910

080038f8 <std>:
 80038f8:	2300      	movs	r3, #0
 80038fa:	b510      	push	{r4, lr}
 80038fc:	4604      	mov	r4, r0
 80038fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003906:	6083      	str	r3, [r0, #8]
 8003908:	8181      	strh	r1, [r0, #12]
 800390a:	6643      	str	r3, [r0, #100]	@ 0x64
 800390c:	81c2      	strh	r2, [r0, #14]
 800390e:	6183      	str	r3, [r0, #24]
 8003910:	4619      	mov	r1, r3
 8003912:	2208      	movs	r2, #8
 8003914:	305c      	adds	r0, #92	@ 0x5c
 8003916:	f000 fa01 	bl	8003d1c <memset>
 800391a:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <std+0x58>)
 800391c:	6263      	str	r3, [r4, #36]	@ 0x24
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <std+0x5c>)
 8003920:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003922:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <std+0x60>)
 8003924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003926:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <std+0x64>)
 8003928:	6323      	str	r3, [r4, #48]	@ 0x30
 800392a:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <std+0x68>)
 800392c:	6224      	str	r4, [r4, #32]
 800392e:	429c      	cmp	r4, r3
 8003930:	d006      	beq.n	8003940 <std+0x48>
 8003932:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003936:	4294      	cmp	r4, r2
 8003938:	d002      	beq.n	8003940 <std+0x48>
 800393a:	33d0      	adds	r3, #208	@ 0xd0
 800393c:	429c      	cmp	r4, r3
 800393e:	d105      	bne.n	800394c <std+0x54>
 8003940:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003948:	f000 ba60 	b.w	8003e0c <__retarget_lock_init_recursive>
 800394c:	bd10      	pop	{r4, pc}
 800394e:	bf00      	nop
 8003950:	08003b6d 	.word	0x08003b6d
 8003954:	08003b8f 	.word	0x08003b8f
 8003958:	08003bc7 	.word	0x08003bc7
 800395c:	08003beb 	.word	0x08003beb
 8003960:	20000174 	.word	0x20000174

08003964 <stdio_exit_handler>:
 8003964:	4a02      	ldr	r2, [pc, #8]	@ (8003970 <stdio_exit_handler+0xc>)
 8003966:	4903      	ldr	r1, [pc, #12]	@ (8003974 <stdio_exit_handler+0x10>)
 8003968:	4803      	ldr	r0, [pc, #12]	@ (8003978 <stdio_exit_handler+0x14>)
 800396a:	f000 b869 	b.w	8003a40 <_fwalk_sglue>
 800396e:	bf00      	nop
 8003970:	2000000c 	.word	0x2000000c
 8003974:	080046a9 	.word	0x080046a9
 8003978:	2000001c 	.word	0x2000001c

0800397c <cleanup_stdio>:
 800397c:	6841      	ldr	r1, [r0, #4]
 800397e:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <cleanup_stdio+0x34>)
 8003980:	4299      	cmp	r1, r3
 8003982:	b510      	push	{r4, lr}
 8003984:	4604      	mov	r4, r0
 8003986:	d001      	beq.n	800398c <cleanup_stdio+0x10>
 8003988:	f000 fe8e 	bl	80046a8 <_fflush_r>
 800398c:	68a1      	ldr	r1, [r4, #8]
 800398e:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <cleanup_stdio+0x38>)
 8003990:	4299      	cmp	r1, r3
 8003992:	d002      	beq.n	800399a <cleanup_stdio+0x1e>
 8003994:	4620      	mov	r0, r4
 8003996:	f000 fe87 	bl	80046a8 <_fflush_r>
 800399a:	68e1      	ldr	r1, [r4, #12]
 800399c:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <cleanup_stdio+0x3c>)
 800399e:	4299      	cmp	r1, r3
 80039a0:	d004      	beq.n	80039ac <cleanup_stdio+0x30>
 80039a2:	4620      	mov	r0, r4
 80039a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a8:	f000 be7e 	b.w	80046a8 <_fflush_r>
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	20000174 	.word	0x20000174
 80039b4:	200001dc 	.word	0x200001dc
 80039b8:	20000244 	.word	0x20000244

080039bc <global_stdio_init.part.0>:
 80039bc:	b510      	push	{r4, lr}
 80039be:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <global_stdio_init.part.0+0x30>)
 80039c0:	4c0b      	ldr	r4, [pc, #44]	@ (80039f0 <global_stdio_init.part.0+0x34>)
 80039c2:	4a0c      	ldr	r2, [pc, #48]	@ (80039f4 <global_stdio_init.part.0+0x38>)
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	4620      	mov	r0, r4
 80039c8:	2200      	movs	r2, #0
 80039ca:	2104      	movs	r1, #4
 80039cc:	f7ff ff94 	bl	80038f8 <std>
 80039d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039d4:	2201      	movs	r2, #1
 80039d6:	2109      	movs	r1, #9
 80039d8:	f7ff ff8e 	bl	80038f8 <std>
 80039dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039e0:	2202      	movs	r2, #2
 80039e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e6:	2112      	movs	r1, #18
 80039e8:	f7ff bf86 	b.w	80038f8 <std>
 80039ec:	200002ac 	.word	0x200002ac
 80039f0:	20000174 	.word	0x20000174
 80039f4:	08003965 	.word	0x08003965

080039f8 <__sfp_lock_acquire>:
 80039f8:	4801      	ldr	r0, [pc, #4]	@ (8003a00 <__sfp_lock_acquire+0x8>)
 80039fa:	f000 ba08 	b.w	8003e0e <__retarget_lock_acquire_recursive>
 80039fe:	bf00      	nop
 8003a00:	200002b5 	.word	0x200002b5

08003a04 <__sfp_lock_release>:
 8003a04:	4801      	ldr	r0, [pc, #4]	@ (8003a0c <__sfp_lock_release+0x8>)
 8003a06:	f000 ba03 	b.w	8003e10 <__retarget_lock_release_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	200002b5 	.word	0x200002b5

08003a10 <__sinit>:
 8003a10:	b510      	push	{r4, lr}
 8003a12:	4604      	mov	r4, r0
 8003a14:	f7ff fff0 	bl	80039f8 <__sfp_lock_acquire>
 8003a18:	6a23      	ldr	r3, [r4, #32]
 8003a1a:	b11b      	cbz	r3, 8003a24 <__sinit+0x14>
 8003a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a20:	f7ff bff0 	b.w	8003a04 <__sfp_lock_release>
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <__sinit+0x28>)
 8003a26:	6223      	str	r3, [r4, #32]
 8003a28:	4b04      	ldr	r3, [pc, #16]	@ (8003a3c <__sinit+0x2c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f5      	bne.n	8003a1c <__sinit+0xc>
 8003a30:	f7ff ffc4 	bl	80039bc <global_stdio_init.part.0>
 8003a34:	e7f2      	b.n	8003a1c <__sinit+0xc>
 8003a36:	bf00      	nop
 8003a38:	0800397d 	.word	0x0800397d
 8003a3c:	200002ac 	.word	0x200002ac

08003a40 <_fwalk_sglue>:
 8003a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a44:	4607      	mov	r7, r0
 8003a46:	4688      	mov	r8, r1
 8003a48:	4614      	mov	r4, r2
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a50:	f1b9 0901 	subs.w	r9, r9, #1
 8003a54:	d505      	bpl.n	8003a62 <_fwalk_sglue+0x22>
 8003a56:	6824      	ldr	r4, [r4, #0]
 8003a58:	2c00      	cmp	r4, #0
 8003a5a:	d1f7      	bne.n	8003a4c <_fwalk_sglue+0xc>
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a62:	89ab      	ldrh	r3, [r5, #12]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d907      	bls.n	8003a78 <_fwalk_sglue+0x38>
 8003a68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	d003      	beq.n	8003a78 <_fwalk_sglue+0x38>
 8003a70:	4629      	mov	r1, r5
 8003a72:	4638      	mov	r0, r7
 8003a74:	47c0      	blx	r8
 8003a76:	4306      	orrs	r6, r0
 8003a78:	3568      	adds	r5, #104	@ 0x68
 8003a7a:	e7e9      	b.n	8003a50 <_fwalk_sglue+0x10>

08003a7c <iprintf>:
 8003a7c:	b40f      	push	{r0, r1, r2, r3}
 8003a7e:	b507      	push	{r0, r1, r2, lr}
 8003a80:	4906      	ldr	r1, [pc, #24]	@ (8003a9c <iprintf+0x20>)
 8003a82:	ab04      	add	r3, sp, #16
 8003a84:	6808      	ldr	r0, [r1, #0]
 8003a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a8a:	6881      	ldr	r1, [r0, #8]
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	f000 fae3 	bl	8004058 <_vfiprintf_r>
 8003a92:	b003      	add	sp, #12
 8003a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a98:	b004      	add	sp, #16
 8003a9a:	4770      	bx	lr
 8003a9c:	20000018 	.word	0x20000018

08003aa0 <putchar>:
 8003aa0:	4b02      	ldr	r3, [pc, #8]	@ (8003aac <putchar+0xc>)
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	6882      	ldr	r2, [r0, #8]
 8003aa8:	f000 be88 	b.w	80047bc <_putc_r>
 8003aac:	20000018 	.word	0x20000018

08003ab0 <_puts_r>:
 8003ab0:	6a03      	ldr	r3, [r0, #32]
 8003ab2:	b570      	push	{r4, r5, r6, lr}
 8003ab4:	6884      	ldr	r4, [r0, #8]
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	460e      	mov	r6, r1
 8003aba:	b90b      	cbnz	r3, 8003ac0 <_puts_r+0x10>
 8003abc:	f7ff ffa8 	bl	8003a10 <__sinit>
 8003ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ac2:	07db      	lsls	r3, r3, #31
 8003ac4:	d405      	bmi.n	8003ad2 <_puts_r+0x22>
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	0598      	lsls	r0, r3, #22
 8003aca:	d402      	bmi.n	8003ad2 <_puts_r+0x22>
 8003acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ace:	f000 f99e 	bl	8003e0e <__retarget_lock_acquire_recursive>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	0719      	lsls	r1, r3, #28
 8003ad6:	d502      	bpl.n	8003ade <_puts_r+0x2e>
 8003ad8:	6923      	ldr	r3, [r4, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d135      	bne.n	8003b4a <_puts_r+0x9a>
 8003ade:	4621      	mov	r1, r4
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f000 f8c5 	bl	8003c70 <__swsetup_r>
 8003ae6:	b380      	cbz	r0, 8003b4a <_puts_r+0x9a>
 8003ae8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003aec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003aee:	07da      	lsls	r2, r3, #31
 8003af0:	d405      	bmi.n	8003afe <_puts_r+0x4e>
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	059b      	lsls	r3, r3, #22
 8003af6:	d402      	bmi.n	8003afe <_puts_r+0x4e>
 8003af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003afa:	f000 f989 	bl	8003e10 <__retarget_lock_release_recursive>
 8003afe:	4628      	mov	r0, r5
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da04      	bge.n	8003b10 <_puts_r+0x60>
 8003b06:	69a2      	ldr	r2, [r4, #24]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	dc17      	bgt.n	8003b3c <_puts_r+0x8c>
 8003b0c:	290a      	cmp	r1, #10
 8003b0e:	d015      	beq.n	8003b3c <_puts_r+0x8c>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	6022      	str	r2, [r4, #0]
 8003b16:	7019      	strb	r1, [r3, #0]
 8003b18:	68a3      	ldr	r3, [r4, #8]
 8003b1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	60a3      	str	r3, [r4, #8]
 8003b22:	2900      	cmp	r1, #0
 8003b24:	d1ed      	bne.n	8003b02 <_puts_r+0x52>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da11      	bge.n	8003b4e <_puts_r+0x9e>
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	210a      	movs	r1, #10
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 f85f 	bl	8003bf2 <__swbuf_r>
 8003b34:	3001      	adds	r0, #1
 8003b36:	d0d7      	beq.n	8003ae8 <_puts_r+0x38>
 8003b38:	250a      	movs	r5, #10
 8003b3a:	e7d7      	b.n	8003aec <_puts_r+0x3c>
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 f857 	bl	8003bf2 <__swbuf_r>
 8003b44:	3001      	adds	r0, #1
 8003b46:	d1e7      	bne.n	8003b18 <_puts_r+0x68>
 8003b48:	e7ce      	b.n	8003ae8 <_puts_r+0x38>
 8003b4a:	3e01      	subs	r6, #1
 8003b4c:	e7e4      	b.n	8003b18 <_puts_r+0x68>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	6022      	str	r2, [r4, #0]
 8003b54:	220a      	movs	r2, #10
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e7ee      	b.n	8003b38 <_puts_r+0x88>
	...

08003b5c <puts>:
 8003b5c:	4b02      	ldr	r3, [pc, #8]	@ (8003b68 <puts+0xc>)
 8003b5e:	4601      	mov	r1, r0
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	f7ff bfa5 	b.w	8003ab0 <_puts_r>
 8003b66:	bf00      	nop
 8003b68:	20000018 	.word	0x20000018

08003b6c <__sread>:
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	460c      	mov	r4, r1
 8003b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b74:	f000 f8fc 	bl	8003d70 <_read_r>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	bfab      	itete	ge
 8003b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b80:	181b      	addge	r3, r3, r0
 8003b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b86:	bfac      	ite	ge
 8003b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b8a:	81a3      	strhlt	r3, [r4, #12]
 8003b8c:	bd10      	pop	{r4, pc}

08003b8e <__swrite>:
 8003b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b92:	461f      	mov	r7, r3
 8003b94:	898b      	ldrh	r3, [r1, #12]
 8003b96:	05db      	lsls	r3, r3, #23
 8003b98:	4605      	mov	r5, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	4616      	mov	r6, r2
 8003b9e:	d505      	bpl.n	8003bac <__swrite+0x1e>
 8003ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f000 f8d0 	bl	8003d4c <_lseek_r>
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	4632      	mov	r2, r6
 8003bba:	463b      	mov	r3, r7
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc2:	f000 b8e7 	b.w	8003d94 <_write_r>

08003bc6 <__sseek>:
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	460c      	mov	r4, r1
 8003bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bce:	f000 f8bd 	bl	8003d4c <_lseek_r>
 8003bd2:	1c43      	adds	r3, r0, #1
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	bf15      	itete	ne
 8003bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003be2:	81a3      	strheq	r3, [r4, #12]
 8003be4:	bf18      	it	ne
 8003be6:	81a3      	strhne	r3, [r4, #12]
 8003be8:	bd10      	pop	{r4, pc}

08003bea <__sclose>:
 8003bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bee:	f000 b89d 	b.w	8003d2c <_close_r>

08003bf2 <__swbuf_r>:
 8003bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf4:	460e      	mov	r6, r1
 8003bf6:	4614      	mov	r4, r2
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	b118      	cbz	r0, 8003c04 <__swbuf_r+0x12>
 8003bfc:	6a03      	ldr	r3, [r0, #32]
 8003bfe:	b90b      	cbnz	r3, 8003c04 <__swbuf_r+0x12>
 8003c00:	f7ff ff06 	bl	8003a10 <__sinit>
 8003c04:	69a3      	ldr	r3, [r4, #24]
 8003c06:	60a3      	str	r3, [r4, #8]
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	071a      	lsls	r2, r3, #28
 8003c0c:	d501      	bpl.n	8003c12 <__swbuf_r+0x20>
 8003c0e:	6923      	ldr	r3, [r4, #16]
 8003c10:	b943      	cbnz	r3, 8003c24 <__swbuf_r+0x32>
 8003c12:	4621      	mov	r1, r4
 8003c14:	4628      	mov	r0, r5
 8003c16:	f000 f82b 	bl	8003c70 <__swsetup_r>
 8003c1a:	b118      	cbz	r0, 8003c24 <__swbuf_r+0x32>
 8003c1c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003c20:	4638      	mov	r0, r7
 8003c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	6922      	ldr	r2, [r4, #16]
 8003c28:	1a98      	subs	r0, r3, r2
 8003c2a:	6963      	ldr	r3, [r4, #20]
 8003c2c:	b2f6      	uxtb	r6, r6
 8003c2e:	4283      	cmp	r3, r0
 8003c30:	4637      	mov	r7, r6
 8003c32:	dc05      	bgt.n	8003c40 <__swbuf_r+0x4e>
 8003c34:	4621      	mov	r1, r4
 8003c36:	4628      	mov	r0, r5
 8003c38:	f000 fd36 	bl	80046a8 <_fflush_r>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d1ed      	bne.n	8003c1c <__swbuf_r+0x2a>
 8003c40:	68a3      	ldr	r3, [r4, #8]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	60a3      	str	r3, [r4, #8]
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	6022      	str	r2, [r4, #0]
 8003c4c:	701e      	strb	r6, [r3, #0]
 8003c4e:	6962      	ldr	r2, [r4, #20]
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d004      	beq.n	8003c60 <__swbuf_r+0x6e>
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	07db      	lsls	r3, r3, #31
 8003c5a:	d5e1      	bpl.n	8003c20 <__swbuf_r+0x2e>
 8003c5c:	2e0a      	cmp	r6, #10
 8003c5e:	d1df      	bne.n	8003c20 <__swbuf_r+0x2e>
 8003c60:	4621      	mov	r1, r4
 8003c62:	4628      	mov	r0, r5
 8003c64:	f000 fd20 	bl	80046a8 <_fflush_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d0d9      	beq.n	8003c20 <__swbuf_r+0x2e>
 8003c6c:	e7d6      	b.n	8003c1c <__swbuf_r+0x2a>
	...

08003c70 <__swsetup_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4b29      	ldr	r3, [pc, #164]	@ (8003d18 <__swsetup_r+0xa8>)
 8003c74:	4605      	mov	r5, r0
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	460c      	mov	r4, r1
 8003c7a:	b118      	cbz	r0, 8003c84 <__swsetup_r+0x14>
 8003c7c:	6a03      	ldr	r3, [r0, #32]
 8003c7e:	b90b      	cbnz	r3, 8003c84 <__swsetup_r+0x14>
 8003c80:	f7ff fec6 	bl	8003a10 <__sinit>
 8003c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c88:	0719      	lsls	r1, r3, #28
 8003c8a:	d422      	bmi.n	8003cd2 <__swsetup_r+0x62>
 8003c8c:	06da      	lsls	r2, r3, #27
 8003c8e:	d407      	bmi.n	8003ca0 <__swsetup_r+0x30>
 8003c90:	2209      	movs	r2, #9
 8003c92:	602a      	str	r2, [r5, #0]
 8003c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c98:	81a3      	strh	r3, [r4, #12]
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c9e:	e033      	b.n	8003d08 <__swsetup_r+0x98>
 8003ca0:	0758      	lsls	r0, r3, #29
 8003ca2:	d512      	bpl.n	8003cca <__swsetup_r+0x5a>
 8003ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ca6:	b141      	cbz	r1, 8003cba <__swsetup_r+0x4a>
 8003ca8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cac:	4299      	cmp	r1, r3
 8003cae:	d002      	beq.n	8003cb6 <__swsetup_r+0x46>
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f8af 	bl	8003e14 <_free_r>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6063      	str	r3, [r4, #4]
 8003cc6:	6923      	ldr	r3, [r4, #16]
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	b94b      	cbnz	r3, 8003cea <__swsetup_r+0x7a>
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce0:	d003      	beq.n	8003cea <__swsetup_r+0x7a>
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	f000 fd2d 	bl	8004744 <__smakebuf_r>
 8003cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cee:	f013 0201 	ands.w	r2, r3, #1
 8003cf2:	d00a      	beq.n	8003d0a <__swsetup_r+0x9a>
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	60a2      	str	r2, [r4, #8]
 8003cf8:	6962      	ldr	r2, [r4, #20]
 8003cfa:	4252      	negs	r2, r2
 8003cfc:	61a2      	str	r2, [r4, #24]
 8003cfe:	6922      	ldr	r2, [r4, #16]
 8003d00:	b942      	cbnz	r2, 8003d14 <__swsetup_r+0xa4>
 8003d02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d06:	d1c5      	bne.n	8003c94 <__swsetup_r+0x24>
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
 8003d0a:	0799      	lsls	r1, r3, #30
 8003d0c:	bf58      	it	pl
 8003d0e:	6962      	ldrpl	r2, [r4, #20]
 8003d10:	60a2      	str	r2, [r4, #8]
 8003d12:	e7f4      	b.n	8003cfe <__swsetup_r+0x8e>
 8003d14:	2000      	movs	r0, #0
 8003d16:	e7f7      	b.n	8003d08 <__swsetup_r+0x98>
 8003d18:	20000018 	.word	0x20000018

08003d1c <memset>:
 8003d1c:	4402      	add	r2, r0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d100      	bne.n	8003d26 <memset+0xa>
 8003d24:	4770      	bx	lr
 8003d26:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2a:	e7f9      	b.n	8003d20 <memset+0x4>

08003d2c <_close_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4d06      	ldr	r5, [pc, #24]	@ (8003d48 <_close_r+0x1c>)
 8003d30:	2300      	movs	r3, #0
 8003d32:	4604      	mov	r4, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	f7fc feb0 	bl	8000a9c <_close>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_close_r+0x1a>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_close_r+0x1a>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	200002b0 	.word	0x200002b0

08003d4c <_lseek_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4d07      	ldr	r5, [pc, #28]	@ (8003d6c <_lseek_r+0x20>)
 8003d50:	4604      	mov	r4, r0
 8003d52:	4608      	mov	r0, r1
 8003d54:	4611      	mov	r1, r2
 8003d56:	2200      	movs	r2, #0
 8003d58:	602a      	str	r2, [r5, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f7fc fec5 	bl	8000aea <_lseek>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_lseek_r+0x1e>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_lseek_r+0x1e>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	200002b0 	.word	0x200002b0

08003d70 <_read_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d07      	ldr	r5, [pc, #28]	@ (8003d90 <_read_r+0x20>)
 8003d74:	4604      	mov	r4, r0
 8003d76:	4608      	mov	r0, r1
 8003d78:	4611      	mov	r1, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	602a      	str	r2, [r5, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7fc fe53 	bl	8000a2a <_read>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_read_r+0x1e>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_read_r+0x1e>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	200002b0 	.word	0x200002b0

08003d94 <_write_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d07      	ldr	r5, [pc, #28]	@ (8003db4 <_write_r+0x20>)
 8003d98:	4604      	mov	r4, r0
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	602a      	str	r2, [r5, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f7fc fe5e 	bl	8000a64 <_write>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <_write_r+0x1e>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	b103      	cbz	r3, 8003db2 <_write_r+0x1e>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	200002b0 	.word	0x200002b0

08003db8 <__errno>:
 8003db8:	4b01      	ldr	r3, [pc, #4]	@ (8003dc0 <__errno+0x8>)
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000018 	.word	0x20000018

08003dc4 <__libc_init_array>:
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003dfc <__libc_init_array+0x38>)
 8003dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8003e00 <__libc_init_array+0x3c>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	2600      	movs	r6, #0
 8003dd0:	42a6      	cmp	r6, r4
 8003dd2:	d109      	bne.n	8003de8 <__libc_init_array+0x24>
 8003dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8003e04 <__libc_init_array+0x40>)
 8003dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8003e08 <__libc_init_array+0x44>)
 8003dd8:	f000 fd56 	bl	8004888 <_init>
 8003ddc:	1b64      	subs	r4, r4, r5
 8003dde:	10a4      	asrs	r4, r4, #2
 8003de0:	2600      	movs	r6, #0
 8003de2:	42a6      	cmp	r6, r4
 8003de4:	d105      	bne.n	8003df2 <__libc_init_array+0x2e>
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
 8003de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dec:	4798      	blx	r3
 8003dee:	3601      	adds	r6, #1
 8003df0:	e7ee      	b.n	8003dd0 <__libc_init_array+0xc>
 8003df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df6:	4798      	blx	r3
 8003df8:	3601      	adds	r6, #1
 8003dfa:	e7f2      	b.n	8003de2 <__libc_init_array+0x1e>
 8003dfc:	08004954 	.word	0x08004954
 8003e00:	08004954 	.word	0x08004954
 8003e04:	08004954 	.word	0x08004954
 8003e08:	08004958 	.word	0x08004958

08003e0c <__retarget_lock_init_recursive>:
 8003e0c:	4770      	bx	lr

08003e0e <__retarget_lock_acquire_recursive>:
 8003e0e:	4770      	bx	lr

08003e10 <__retarget_lock_release_recursive>:
 8003e10:	4770      	bx	lr
	...

08003e14 <_free_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4605      	mov	r5, r0
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	d041      	beq.n	8003ea0 <_free_r+0x8c>
 8003e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e20:	1f0c      	subs	r4, r1, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bfb8      	it	lt
 8003e26:	18e4      	addlt	r4, r4, r3
 8003e28:	f000 f8e0 	bl	8003fec <__malloc_lock>
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <_free_r+0x90>)
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	b933      	cbnz	r3, 8003e40 <_free_r+0x2c>
 8003e32:	6063      	str	r3, [r4, #4]
 8003e34:	6014      	str	r4, [r2, #0]
 8003e36:	4628      	mov	r0, r5
 8003e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e3c:	f000 b8dc 	b.w	8003ff8 <__malloc_unlock>
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	d908      	bls.n	8003e56 <_free_r+0x42>
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	1821      	adds	r1, r4, r0
 8003e48:	428b      	cmp	r3, r1
 8003e4a:	bf01      	itttt	eq
 8003e4c:	6819      	ldreq	r1, [r3, #0]
 8003e4e:	685b      	ldreq	r3, [r3, #4]
 8003e50:	1809      	addeq	r1, r1, r0
 8003e52:	6021      	streq	r1, [r4, #0]
 8003e54:	e7ed      	b.n	8003e32 <_free_r+0x1e>
 8003e56:	461a      	mov	r2, r3
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b10b      	cbz	r3, 8003e60 <_free_r+0x4c>
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	d9fa      	bls.n	8003e56 <_free_r+0x42>
 8003e60:	6811      	ldr	r1, [r2, #0]
 8003e62:	1850      	adds	r0, r2, r1
 8003e64:	42a0      	cmp	r0, r4
 8003e66:	d10b      	bne.n	8003e80 <_free_r+0x6c>
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	4401      	add	r1, r0
 8003e6c:	1850      	adds	r0, r2, r1
 8003e6e:	4283      	cmp	r3, r0
 8003e70:	6011      	str	r1, [r2, #0]
 8003e72:	d1e0      	bne.n	8003e36 <_free_r+0x22>
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	6053      	str	r3, [r2, #4]
 8003e7a:	4408      	add	r0, r1
 8003e7c:	6010      	str	r0, [r2, #0]
 8003e7e:	e7da      	b.n	8003e36 <_free_r+0x22>
 8003e80:	d902      	bls.n	8003e88 <_free_r+0x74>
 8003e82:	230c      	movs	r3, #12
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	e7d6      	b.n	8003e36 <_free_r+0x22>
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	1821      	adds	r1, r4, r0
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	bf04      	itt	eq
 8003e90:	6819      	ldreq	r1, [r3, #0]
 8003e92:	685b      	ldreq	r3, [r3, #4]
 8003e94:	6063      	str	r3, [r4, #4]
 8003e96:	bf04      	itt	eq
 8003e98:	1809      	addeq	r1, r1, r0
 8003e9a:	6021      	streq	r1, [r4, #0]
 8003e9c:	6054      	str	r4, [r2, #4]
 8003e9e:	e7ca      	b.n	8003e36 <_free_r+0x22>
 8003ea0:	bd38      	pop	{r3, r4, r5, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200002bc 	.word	0x200002bc

08003ea8 <sbrk_aligned>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	4e0f      	ldr	r6, [pc, #60]	@ (8003ee8 <sbrk_aligned+0x40>)
 8003eac:	460c      	mov	r4, r1
 8003eae:	6831      	ldr	r1, [r6, #0]
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b911      	cbnz	r1, 8003eba <sbrk_aligned+0x12>
 8003eb4:	f000 fcd8 	bl	8004868 <_sbrk_r>
 8003eb8:	6030      	str	r0, [r6, #0]
 8003eba:	4621      	mov	r1, r4
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f000 fcd3 	bl	8004868 <_sbrk_r>
 8003ec2:	1c43      	adds	r3, r0, #1
 8003ec4:	d103      	bne.n	8003ece <sbrk_aligned+0x26>
 8003ec6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003eca:	4620      	mov	r0, r4
 8003ecc:	bd70      	pop	{r4, r5, r6, pc}
 8003ece:	1cc4      	adds	r4, r0, #3
 8003ed0:	f024 0403 	bic.w	r4, r4, #3
 8003ed4:	42a0      	cmp	r0, r4
 8003ed6:	d0f8      	beq.n	8003eca <sbrk_aligned+0x22>
 8003ed8:	1a21      	subs	r1, r4, r0
 8003eda:	4628      	mov	r0, r5
 8003edc:	f000 fcc4 	bl	8004868 <_sbrk_r>
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d1f2      	bne.n	8003eca <sbrk_aligned+0x22>
 8003ee4:	e7ef      	b.n	8003ec6 <sbrk_aligned+0x1e>
 8003ee6:	bf00      	nop
 8003ee8:	200002b8 	.word	0x200002b8

08003eec <_malloc_r>:
 8003eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef0:	1ccd      	adds	r5, r1, #3
 8003ef2:	f025 0503 	bic.w	r5, r5, #3
 8003ef6:	3508      	adds	r5, #8
 8003ef8:	2d0c      	cmp	r5, #12
 8003efa:	bf38      	it	cc
 8003efc:	250c      	movcc	r5, #12
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	4606      	mov	r6, r0
 8003f02:	db01      	blt.n	8003f08 <_malloc_r+0x1c>
 8003f04:	42a9      	cmp	r1, r5
 8003f06:	d904      	bls.n	8003f12 <_malloc_r+0x26>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	6033      	str	r3, [r6, #0]
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fe8 <_malloc_r+0xfc>
 8003f16:	f000 f869 	bl	8003fec <__malloc_lock>
 8003f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f1e:	461c      	mov	r4, r3
 8003f20:	bb44      	cbnz	r4, 8003f74 <_malloc_r+0x88>
 8003f22:	4629      	mov	r1, r5
 8003f24:	4630      	mov	r0, r6
 8003f26:	f7ff ffbf 	bl	8003ea8 <sbrk_aligned>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	d158      	bne.n	8003fe2 <_malloc_r+0xf6>
 8003f30:	f8d8 4000 	ldr.w	r4, [r8]
 8003f34:	4627      	mov	r7, r4
 8003f36:	2f00      	cmp	r7, #0
 8003f38:	d143      	bne.n	8003fc2 <_malloc_r+0xd6>
 8003f3a:	2c00      	cmp	r4, #0
 8003f3c:	d04b      	beq.n	8003fd6 <_malloc_r+0xea>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	4639      	mov	r1, r7
 8003f42:	4630      	mov	r0, r6
 8003f44:	eb04 0903 	add.w	r9, r4, r3
 8003f48:	f000 fc8e 	bl	8004868 <_sbrk_r>
 8003f4c:	4581      	cmp	r9, r0
 8003f4e:	d142      	bne.n	8003fd6 <_malloc_r+0xea>
 8003f50:	6821      	ldr	r1, [r4, #0]
 8003f52:	1a6d      	subs	r5, r5, r1
 8003f54:	4629      	mov	r1, r5
 8003f56:	4630      	mov	r0, r6
 8003f58:	f7ff ffa6 	bl	8003ea8 <sbrk_aligned>
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d03a      	beq.n	8003fd6 <_malloc_r+0xea>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	442b      	add	r3, r5
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	f8d8 3000 	ldr.w	r3, [r8]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	bb62      	cbnz	r2, 8003fc8 <_malloc_r+0xdc>
 8003f6e:	f8c8 7000 	str.w	r7, [r8]
 8003f72:	e00f      	b.n	8003f94 <_malloc_r+0xa8>
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	1b52      	subs	r2, r2, r5
 8003f78:	d420      	bmi.n	8003fbc <_malloc_r+0xd0>
 8003f7a:	2a0b      	cmp	r2, #11
 8003f7c:	d917      	bls.n	8003fae <_malloc_r+0xc2>
 8003f7e:	1961      	adds	r1, r4, r5
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	6025      	str	r5, [r4, #0]
 8003f84:	bf18      	it	ne
 8003f86:	6059      	strne	r1, [r3, #4]
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	bf08      	it	eq
 8003f8c:	f8c8 1000 	streq.w	r1, [r8]
 8003f90:	5162      	str	r2, [r4, r5]
 8003f92:	604b      	str	r3, [r1, #4]
 8003f94:	4630      	mov	r0, r6
 8003f96:	f000 f82f 	bl	8003ff8 <__malloc_unlock>
 8003f9a:	f104 000b 	add.w	r0, r4, #11
 8003f9e:	1d23      	adds	r3, r4, #4
 8003fa0:	f020 0007 	bic.w	r0, r0, #7
 8003fa4:	1ac2      	subs	r2, r0, r3
 8003fa6:	bf1c      	itt	ne
 8003fa8:	1a1b      	subne	r3, r3, r0
 8003faa:	50a3      	strne	r3, [r4, r2]
 8003fac:	e7af      	b.n	8003f0e <_malloc_r+0x22>
 8003fae:	6862      	ldr	r2, [r4, #4]
 8003fb0:	42a3      	cmp	r3, r4
 8003fb2:	bf0c      	ite	eq
 8003fb4:	f8c8 2000 	streq.w	r2, [r8]
 8003fb8:	605a      	strne	r2, [r3, #4]
 8003fba:	e7eb      	b.n	8003f94 <_malloc_r+0xa8>
 8003fbc:	4623      	mov	r3, r4
 8003fbe:	6864      	ldr	r4, [r4, #4]
 8003fc0:	e7ae      	b.n	8003f20 <_malloc_r+0x34>
 8003fc2:	463c      	mov	r4, r7
 8003fc4:	687f      	ldr	r7, [r7, #4]
 8003fc6:	e7b6      	b.n	8003f36 <_malloc_r+0x4a>
 8003fc8:	461a      	mov	r2, r3
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d1fb      	bne.n	8003fc8 <_malloc_r+0xdc>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6053      	str	r3, [r2, #4]
 8003fd4:	e7de      	b.n	8003f94 <_malloc_r+0xa8>
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	6033      	str	r3, [r6, #0]
 8003fda:	4630      	mov	r0, r6
 8003fdc:	f000 f80c 	bl	8003ff8 <__malloc_unlock>
 8003fe0:	e794      	b.n	8003f0c <_malloc_r+0x20>
 8003fe2:	6005      	str	r5, [r0, #0]
 8003fe4:	e7d6      	b.n	8003f94 <_malloc_r+0xa8>
 8003fe6:	bf00      	nop
 8003fe8:	200002bc 	.word	0x200002bc

08003fec <__malloc_lock>:
 8003fec:	4801      	ldr	r0, [pc, #4]	@ (8003ff4 <__malloc_lock+0x8>)
 8003fee:	f7ff bf0e 	b.w	8003e0e <__retarget_lock_acquire_recursive>
 8003ff2:	bf00      	nop
 8003ff4:	200002b4 	.word	0x200002b4

08003ff8 <__malloc_unlock>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	@ (8004000 <__malloc_unlock+0x8>)
 8003ffa:	f7ff bf09 	b.w	8003e10 <__retarget_lock_release_recursive>
 8003ffe:	bf00      	nop
 8004000:	200002b4 	.word	0x200002b4

08004004 <__sfputc_r>:
 8004004:	6893      	ldr	r3, [r2, #8]
 8004006:	3b01      	subs	r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	b410      	push	{r4}
 800400c:	6093      	str	r3, [r2, #8]
 800400e:	da08      	bge.n	8004022 <__sfputc_r+0x1e>
 8004010:	6994      	ldr	r4, [r2, #24]
 8004012:	42a3      	cmp	r3, r4
 8004014:	db01      	blt.n	800401a <__sfputc_r+0x16>
 8004016:	290a      	cmp	r1, #10
 8004018:	d103      	bne.n	8004022 <__sfputc_r+0x1e>
 800401a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800401e:	f7ff bde8 	b.w	8003bf2 <__swbuf_r>
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	1c58      	adds	r0, r3, #1
 8004026:	6010      	str	r0, [r2, #0]
 8004028:	7019      	strb	r1, [r3, #0]
 800402a:	4608      	mov	r0, r1
 800402c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004030:	4770      	bx	lr

08004032 <__sfputs_r>:
 8004032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004034:	4606      	mov	r6, r0
 8004036:	460f      	mov	r7, r1
 8004038:	4614      	mov	r4, r2
 800403a:	18d5      	adds	r5, r2, r3
 800403c:	42ac      	cmp	r4, r5
 800403e:	d101      	bne.n	8004044 <__sfputs_r+0x12>
 8004040:	2000      	movs	r0, #0
 8004042:	e007      	b.n	8004054 <__sfputs_r+0x22>
 8004044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004048:	463a      	mov	r2, r7
 800404a:	4630      	mov	r0, r6
 800404c:	f7ff ffda 	bl	8004004 <__sfputc_r>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d1f3      	bne.n	800403c <__sfputs_r+0xa>
 8004054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004058 <_vfiprintf_r>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	460d      	mov	r5, r1
 800405e:	b09d      	sub	sp, #116	@ 0x74
 8004060:	4614      	mov	r4, r2
 8004062:	4698      	mov	r8, r3
 8004064:	4606      	mov	r6, r0
 8004066:	b118      	cbz	r0, 8004070 <_vfiprintf_r+0x18>
 8004068:	6a03      	ldr	r3, [r0, #32]
 800406a:	b90b      	cbnz	r3, 8004070 <_vfiprintf_r+0x18>
 800406c:	f7ff fcd0 	bl	8003a10 <__sinit>
 8004070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004072:	07d9      	lsls	r1, r3, #31
 8004074:	d405      	bmi.n	8004082 <_vfiprintf_r+0x2a>
 8004076:	89ab      	ldrh	r3, [r5, #12]
 8004078:	059a      	lsls	r2, r3, #22
 800407a:	d402      	bmi.n	8004082 <_vfiprintf_r+0x2a>
 800407c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800407e:	f7ff fec6 	bl	8003e0e <__retarget_lock_acquire_recursive>
 8004082:	89ab      	ldrh	r3, [r5, #12]
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	d501      	bpl.n	800408c <_vfiprintf_r+0x34>
 8004088:	692b      	ldr	r3, [r5, #16]
 800408a:	b99b      	cbnz	r3, 80040b4 <_vfiprintf_r+0x5c>
 800408c:	4629      	mov	r1, r5
 800408e:	4630      	mov	r0, r6
 8004090:	f7ff fdee 	bl	8003c70 <__swsetup_r>
 8004094:	b170      	cbz	r0, 80040b4 <_vfiprintf_r+0x5c>
 8004096:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004098:	07dc      	lsls	r4, r3, #31
 800409a:	d504      	bpl.n	80040a6 <_vfiprintf_r+0x4e>
 800409c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040a0:	b01d      	add	sp, #116	@ 0x74
 80040a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	0598      	lsls	r0, r3, #22
 80040aa:	d4f7      	bmi.n	800409c <_vfiprintf_r+0x44>
 80040ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040ae:	f7ff feaf 	bl	8003e10 <__retarget_lock_release_recursive>
 80040b2:	e7f3      	b.n	800409c <_vfiprintf_r+0x44>
 80040b4:	2300      	movs	r3, #0
 80040b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80040b8:	2320      	movs	r3, #32
 80040ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040be:	f8cd 800c 	str.w	r8, [sp, #12]
 80040c2:	2330      	movs	r3, #48	@ 0x30
 80040c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004274 <_vfiprintf_r+0x21c>
 80040c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040cc:	f04f 0901 	mov.w	r9, #1
 80040d0:	4623      	mov	r3, r4
 80040d2:	469a      	mov	sl, r3
 80040d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040d8:	b10a      	cbz	r2, 80040de <_vfiprintf_r+0x86>
 80040da:	2a25      	cmp	r2, #37	@ 0x25
 80040dc:	d1f9      	bne.n	80040d2 <_vfiprintf_r+0x7a>
 80040de:	ebba 0b04 	subs.w	fp, sl, r4
 80040e2:	d00b      	beq.n	80040fc <_vfiprintf_r+0xa4>
 80040e4:	465b      	mov	r3, fp
 80040e6:	4622      	mov	r2, r4
 80040e8:	4629      	mov	r1, r5
 80040ea:	4630      	mov	r0, r6
 80040ec:	f7ff ffa1 	bl	8004032 <__sfputs_r>
 80040f0:	3001      	adds	r0, #1
 80040f2:	f000 80a7 	beq.w	8004244 <_vfiprintf_r+0x1ec>
 80040f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040f8:	445a      	add	r2, fp
 80040fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80040fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 809f 	beq.w	8004244 <_vfiprintf_r+0x1ec>
 8004106:	2300      	movs	r3, #0
 8004108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800410c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004110:	f10a 0a01 	add.w	sl, sl, #1
 8004114:	9304      	str	r3, [sp, #16]
 8004116:	9307      	str	r3, [sp, #28]
 8004118:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800411c:	931a      	str	r3, [sp, #104]	@ 0x68
 800411e:	4654      	mov	r4, sl
 8004120:	2205      	movs	r2, #5
 8004122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004126:	4853      	ldr	r0, [pc, #332]	@ (8004274 <_vfiprintf_r+0x21c>)
 8004128:	f7fc f87a 	bl	8000220 <memchr>
 800412c:	9a04      	ldr	r2, [sp, #16]
 800412e:	b9d8      	cbnz	r0, 8004168 <_vfiprintf_r+0x110>
 8004130:	06d1      	lsls	r1, r2, #27
 8004132:	bf44      	itt	mi
 8004134:	2320      	movmi	r3, #32
 8004136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800413a:	0713      	lsls	r3, r2, #28
 800413c:	bf44      	itt	mi
 800413e:	232b      	movmi	r3, #43	@ 0x2b
 8004140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004144:	f89a 3000 	ldrb.w	r3, [sl]
 8004148:	2b2a      	cmp	r3, #42	@ 0x2a
 800414a:	d015      	beq.n	8004178 <_vfiprintf_r+0x120>
 800414c:	9a07      	ldr	r2, [sp, #28]
 800414e:	4654      	mov	r4, sl
 8004150:	2000      	movs	r0, #0
 8004152:	f04f 0c0a 	mov.w	ip, #10
 8004156:	4621      	mov	r1, r4
 8004158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800415c:	3b30      	subs	r3, #48	@ 0x30
 800415e:	2b09      	cmp	r3, #9
 8004160:	d94b      	bls.n	80041fa <_vfiprintf_r+0x1a2>
 8004162:	b1b0      	cbz	r0, 8004192 <_vfiprintf_r+0x13a>
 8004164:	9207      	str	r2, [sp, #28]
 8004166:	e014      	b.n	8004192 <_vfiprintf_r+0x13a>
 8004168:	eba0 0308 	sub.w	r3, r0, r8
 800416c:	fa09 f303 	lsl.w	r3, r9, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	9304      	str	r3, [sp, #16]
 8004174:	46a2      	mov	sl, r4
 8004176:	e7d2      	b.n	800411e <_vfiprintf_r+0xc6>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	1d19      	adds	r1, r3, #4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	9103      	str	r1, [sp, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	bfbb      	ittet	lt
 8004184:	425b      	neglt	r3, r3
 8004186:	f042 0202 	orrlt.w	r2, r2, #2
 800418a:	9307      	strge	r3, [sp, #28]
 800418c:	9307      	strlt	r3, [sp, #28]
 800418e:	bfb8      	it	lt
 8004190:	9204      	strlt	r2, [sp, #16]
 8004192:	7823      	ldrb	r3, [r4, #0]
 8004194:	2b2e      	cmp	r3, #46	@ 0x2e
 8004196:	d10a      	bne.n	80041ae <_vfiprintf_r+0x156>
 8004198:	7863      	ldrb	r3, [r4, #1]
 800419a:	2b2a      	cmp	r3, #42	@ 0x2a
 800419c:	d132      	bne.n	8004204 <_vfiprintf_r+0x1ac>
 800419e:	9b03      	ldr	r3, [sp, #12]
 80041a0:	1d1a      	adds	r2, r3, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	9203      	str	r2, [sp, #12]
 80041a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041aa:	3402      	adds	r4, #2
 80041ac:	9305      	str	r3, [sp, #20]
 80041ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004284 <_vfiprintf_r+0x22c>
 80041b2:	7821      	ldrb	r1, [r4, #0]
 80041b4:	2203      	movs	r2, #3
 80041b6:	4650      	mov	r0, sl
 80041b8:	f7fc f832 	bl	8000220 <memchr>
 80041bc:	b138      	cbz	r0, 80041ce <_vfiprintf_r+0x176>
 80041be:	9b04      	ldr	r3, [sp, #16]
 80041c0:	eba0 000a 	sub.w	r0, r0, sl
 80041c4:	2240      	movs	r2, #64	@ 0x40
 80041c6:	4082      	lsls	r2, r0
 80041c8:	4313      	orrs	r3, r2
 80041ca:	3401      	adds	r4, #1
 80041cc:	9304      	str	r3, [sp, #16]
 80041ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d2:	4829      	ldr	r0, [pc, #164]	@ (8004278 <_vfiprintf_r+0x220>)
 80041d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041d8:	2206      	movs	r2, #6
 80041da:	f7fc f821 	bl	8000220 <memchr>
 80041de:	2800      	cmp	r0, #0
 80041e0:	d03f      	beq.n	8004262 <_vfiprintf_r+0x20a>
 80041e2:	4b26      	ldr	r3, [pc, #152]	@ (800427c <_vfiprintf_r+0x224>)
 80041e4:	bb1b      	cbnz	r3, 800422e <_vfiprintf_r+0x1d6>
 80041e6:	9b03      	ldr	r3, [sp, #12]
 80041e8:	3307      	adds	r3, #7
 80041ea:	f023 0307 	bic.w	r3, r3, #7
 80041ee:	3308      	adds	r3, #8
 80041f0:	9303      	str	r3, [sp, #12]
 80041f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041f4:	443b      	add	r3, r7
 80041f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80041f8:	e76a      	b.n	80040d0 <_vfiprintf_r+0x78>
 80041fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80041fe:	460c      	mov	r4, r1
 8004200:	2001      	movs	r0, #1
 8004202:	e7a8      	b.n	8004156 <_vfiprintf_r+0xfe>
 8004204:	2300      	movs	r3, #0
 8004206:	3401      	adds	r4, #1
 8004208:	9305      	str	r3, [sp, #20]
 800420a:	4619      	mov	r1, r3
 800420c:	f04f 0c0a 	mov.w	ip, #10
 8004210:	4620      	mov	r0, r4
 8004212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004216:	3a30      	subs	r2, #48	@ 0x30
 8004218:	2a09      	cmp	r2, #9
 800421a:	d903      	bls.n	8004224 <_vfiprintf_r+0x1cc>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0c6      	beq.n	80041ae <_vfiprintf_r+0x156>
 8004220:	9105      	str	r1, [sp, #20]
 8004222:	e7c4      	b.n	80041ae <_vfiprintf_r+0x156>
 8004224:	fb0c 2101 	mla	r1, ip, r1, r2
 8004228:	4604      	mov	r4, r0
 800422a:	2301      	movs	r3, #1
 800422c:	e7f0      	b.n	8004210 <_vfiprintf_r+0x1b8>
 800422e:	ab03      	add	r3, sp, #12
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	462a      	mov	r2, r5
 8004234:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <_vfiprintf_r+0x228>)
 8004236:	a904      	add	r1, sp, #16
 8004238:	4630      	mov	r0, r6
 800423a:	f3af 8000 	nop.w
 800423e:	4607      	mov	r7, r0
 8004240:	1c78      	adds	r0, r7, #1
 8004242:	d1d6      	bne.n	80041f2 <_vfiprintf_r+0x19a>
 8004244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004246:	07d9      	lsls	r1, r3, #31
 8004248:	d405      	bmi.n	8004256 <_vfiprintf_r+0x1fe>
 800424a:	89ab      	ldrh	r3, [r5, #12]
 800424c:	059a      	lsls	r2, r3, #22
 800424e:	d402      	bmi.n	8004256 <_vfiprintf_r+0x1fe>
 8004250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004252:	f7ff fddd 	bl	8003e10 <__retarget_lock_release_recursive>
 8004256:	89ab      	ldrh	r3, [r5, #12]
 8004258:	065b      	lsls	r3, r3, #25
 800425a:	f53f af1f 	bmi.w	800409c <_vfiprintf_r+0x44>
 800425e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004260:	e71e      	b.n	80040a0 <_vfiprintf_r+0x48>
 8004262:	ab03      	add	r3, sp, #12
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	462a      	mov	r2, r5
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <_vfiprintf_r+0x228>)
 800426a:	a904      	add	r1, sp, #16
 800426c:	4630      	mov	r0, r6
 800426e:	f000 f879 	bl	8004364 <_printf_i>
 8004272:	e7e4      	b.n	800423e <_vfiprintf_r+0x1e6>
 8004274:	08004918 	.word	0x08004918
 8004278:	08004922 	.word	0x08004922
 800427c:	00000000 	.word	0x00000000
 8004280:	08004033 	.word	0x08004033
 8004284:	0800491e 	.word	0x0800491e

08004288 <_printf_common>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	4616      	mov	r6, r2
 800428e:	4698      	mov	r8, r3
 8004290:	688a      	ldr	r2, [r1, #8]
 8004292:	690b      	ldr	r3, [r1, #16]
 8004294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004298:	4293      	cmp	r3, r2
 800429a:	bfb8      	it	lt
 800429c:	4613      	movlt	r3, r2
 800429e:	6033      	str	r3, [r6, #0]
 80042a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042a4:	4607      	mov	r7, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	b10a      	cbz	r2, 80042ae <_printf_common+0x26>
 80042aa:	3301      	adds	r3, #1
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	0699      	lsls	r1, r3, #26
 80042b2:	bf42      	ittt	mi
 80042b4:	6833      	ldrmi	r3, [r6, #0]
 80042b6:	3302      	addmi	r3, #2
 80042b8:	6033      	strmi	r3, [r6, #0]
 80042ba:	6825      	ldr	r5, [r4, #0]
 80042bc:	f015 0506 	ands.w	r5, r5, #6
 80042c0:	d106      	bne.n	80042d0 <_printf_common+0x48>
 80042c2:	f104 0a19 	add.w	sl, r4, #25
 80042c6:	68e3      	ldr	r3, [r4, #12]
 80042c8:	6832      	ldr	r2, [r6, #0]
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	42ab      	cmp	r3, r5
 80042ce:	dc26      	bgt.n	800431e <_printf_common+0x96>
 80042d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	3b00      	subs	r3, #0
 80042d8:	bf18      	it	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	0692      	lsls	r2, r2, #26
 80042de:	d42b      	bmi.n	8004338 <_printf_common+0xb0>
 80042e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042e4:	4641      	mov	r1, r8
 80042e6:	4638      	mov	r0, r7
 80042e8:	47c8      	blx	r9
 80042ea:	3001      	adds	r0, #1
 80042ec:	d01e      	beq.n	800432c <_printf_common+0xa4>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	6922      	ldr	r2, [r4, #16]
 80042f2:	f003 0306 	and.w	r3, r3, #6
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	bf02      	ittt	eq
 80042fa:	68e5      	ldreq	r5, [r4, #12]
 80042fc:	6833      	ldreq	r3, [r6, #0]
 80042fe:	1aed      	subeq	r5, r5, r3
 8004300:	68a3      	ldr	r3, [r4, #8]
 8004302:	bf0c      	ite	eq
 8004304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004308:	2500      	movne	r5, #0
 800430a:	4293      	cmp	r3, r2
 800430c:	bfc4      	itt	gt
 800430e:	1a9b      	subgt	r3, r3, r2
 8004310:	18ed      	addgt	r5, r5, r3
 8004312:	2600      	movs	r6, #0
 8004314:	341a      	adds	r4, #26
 8004316:	42b5      	cmp	r5, r6
 8004318:	d11a      	bne.n	8004350 <_printf_common+0xc8>
 800431a:	2000      	movs	r0, #0
 800431c:	e008      	b.n	8004330 <_printf_common+0xa8>
 800431e:	2301      	movs	r3, #1
 8004320:	4652      	mov	r2, sl
 8004322:	4641      	mov	r1, r8
 8004324:	4638      	mov	r0, r7
 8004326:	47c8      	blx	r9
 8004328:	3001      	adds	r0, #1
 800432a:	d103      	bne.n	8004334 <_printf_common+0xac>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004334:	3501      	adds	r5, #1
 8004336:	e7c6      	b.n	80042c6 <_printf_common+0x3e>
 8004338:	18e1      	adds	r1, r4, r3
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	2030      	movs	r0, #48	@ 0x30
 800433e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004342:	4422      	add	r2, r4
 8004344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800434c:	3302      	adds	r3, #2
 800434e:	e7c7      	b.n	80042e0 <_printf_common+0x58>
 8004350:	2301      	movs	r3, #1
 8004352:	4622      	mov	r2, r4
 8004354:	4641      	mov	r1, r8
 8004356:	4638      	mov	r0, r7
 8004358:	47c8      	blx	r9
 800435a:	3001      	adds	r0, #1
 800435c:	d0e6      	beq.n	800432c <_printf_common+0xa4>
 800435e:	3601      	adds	r6, #1
 8004360:	e7d9      	b.n	8004316 <_printf_common+0x8e>
	...

08004364 <_printf_i>:
 8004364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	7e0f      	ldrb	r7, [r1, #24]
 800436a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800436c:	2f78      	cmp	r7, #120	@ 0x78
 800436e:	4691      	mov	r9, r2
 8004370:	4680      	mov	r8, r0
 8004372:	460c      	mov	r4, r1
 8004374:	469a      	mov	sl, r3
 8004376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800437a:	d807      	bhi.n	800438c <_printf_i+0x28>
 800437c:	2f62      	cmp	r7, #98	@ 0x62
 800437e:	d80a      	bhi.n	8004396 <_printf_i+0x32>
 8004380:	2f00      	cmp	r7, #0
 8004382:	f000 80d1 	beq.w	8004528 <_printf_i+0x1c4>
 8004386:	2f58      	cmp	r7, #88	@ 0x58
 8004388:	f000 80b8 	beq.w	80044fc <_printf_i+0x198>
 800438c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004394:	e03a      	b.n	800440c <_printf_i+0xa8>
 8004396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800439a:	2b15      	cmp	r3, #21
 800439c:	d8f6      	bhi.n	800438c <_printf_i+0x28>
 800439e:	a101      	add	r1, pc, #4	@ (adr r1, 80043a4 <_printf_i+0x40>)
 80043a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	08004411 	.word	0x08004411
 80043ac:	0800438d 	.word	0x0800438d
 80043b0:	0800438d 	.word	0x0800438d
 80043b4:	0800438d 	.word	0x0800438d
 80043b8:	0800438d 	.word	0x0800438d
 80043bc:	08004411 	.word	0x08004411
 80043c0:	0800438d 	.word	0x0800438d
 80043c4:	0800438d 	.word	0x0800438d
 80043c8:	0800438d 	.word	0x0800438d
 80043cc:	0800438d 	.word	0x0800438d
 80043d0:	0800450f 	.word	0x0800450f
 80043d4:	0800443b 	.word	0x0800443b
 80043d8:	080044c9 	.word	0x080044c9
 80043dc:	0800438d 	.word	0x0800438d
 80043e0:	0800438d 	.word	0x0800438d
 80043e4:	08004531 	.word	0x08004531
 80043e8:	0800438d 	.word	0x0800438d
 80043ec:	0800443b 	.word	0x0800443b
 80043f0:	0800438d 	.word	0x0800438d
 80043f4:	0800438d 	.word	0x0800438d
 80043f8:	080044d1 	.word	0x080044d1
 80043fc:	6833      	ldr	r3, [r6, #0]
 80043fe:	1d1a      	adds	r2, r3, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6032      	str	r2, [r6, #0]
 8004404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800440c:	2301      	movs	r3, #1
 800440e:	e09c      	b.n	800454a <_printf_i+0x1e6>
 8004410:	6833      	ldr	r3, [r6, #0]
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	1d19      	adds	r1, r3, #4
 8004416:	6031      	str	r1, [r6, #0]
 8004418:	0606      	lsls	r6, r0, #24
 800441a:	d501      	bpl.n	8004420 <_printf_i+0xbc>
 800441c:	681d      	ldr	r5, [r3, #0]
 800441e:	e003      	b.n	8004428 <_printf_i+0xc4>
 8004420:	0645      	lsls	r5, r0, #25
 8004422:	d5fb      	bpl.n	800441c <_printf_i+0xb8>
 8004424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004428:	2d00      	cmp	r5, #0
 800442a:	da03      	bge.n	8004434 <_printf_i+0xd0>
 800442c:	232d      	movs	r3, #45	@ 0x2d
 800442e:	426d      	negs	r5, r5
 8004430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004434:	4858      	ldr	r0, [pc, #352]	@ (8004598 <_printf_i+0x234>)
 8004436:	230a      	movs	r3, #10
 8004438:	e011      	b.n	800445e <_printf_i+0xfa>
 800443a:	6821      	ldr	r1, [r4, #0]
 800443c:	6833      	ldr	r3, [r6, #0]
 800443e:	0608      	lsls	r0, r1, #24
 8004440:	f853 5b04 	ldr.w	r5, [r3], #4
 8004444:	d402      	bmi.n	800444c <_printf_i+0xe8>
 8004446:	0649      	lsls	r1, r1, #25
 8004448:	bf48      	it	mi
 800444a:	b2ad      	uxthmi	r5, r5
 800444c:	2f6f      	cmp	r7, #111	@ 0x6f
 800444e:	4852      	ldr	r0, [pc, #328]	@ (8004598 <_printf_i+0x234>)
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	bf14      	ite	ne
 8004454:	230a      	movne	r3, #10
 8004456:	2308      	moveq	r3, #8
 8004458:	2100      	movs	r1, #0
 800445a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800445e:	6866      	ldr	r6, [r4, #4]
 8004460:	60a6      	str	r6, [r4, #8]
 8004462:	2e00      	cmp	r6, #0
 8004464:	db05      	blt.n	8004472 <_printf_i+0x10e>
 8004466:	6821      	ldr	r1, [r4, #0]
 8004468:	432e      	orrs	r6, r5
 800446a:	f021 0104 	bic.w	r1, r1, #4
 800446e:	6021      	str	r1, [r4, #0]
 8004470:	d04b      	beq.n	800450a <_printf_i+0x1a6>
 8004472:	4616      	mov	r6, r2
 8004474:	fbb5 f1f3 	udiv	r1, r5, r3
 8004478:	fb03 5711 	mls	r7, r3, r1, r5
 800447c:	5dc7      	ldrb	r7, [r0, r7]
 800447e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004482:	462f      	mov	r7, r5
 8004484:	42bb      	cmp	r3, r7
 8004486:	460d      	mov	r5, r1
 8004488:	d9f4      	bls.n	8004474 <_printf_i+0x110>
 800448a:	2b08      	cmp	r3, #8
 800448c:	d10b      	bne.n	80044a6 <_printf_i+0x142>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	07df      	lsls	r7, r3, #31
 8004492:	d508      	bpl.n	80044a6 <_printf_i+0x142>
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	6861      	ldr	r1, [r4, #4]
 8004498:	4299      	cmp	r1, r3
 800449a:	bfde      	ittt	le
 800449c:	2330      	movle	r3, #48	@ 0x30
 800449e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80044a6:	1b92      	subs	r2, r2, r6
 80044a8:	6122      	str	r2, [r4, #16]
 80044aa:	f8cd a000 	str.w	sl, [sp]
 80044ae:	464b      	mov	r3, r9
 80044b0:	aa03      	add	r2, sp, #12
 80044b2:	4621      	mov	r1, r4
 80044b4:	4640      	mov	r0, r8
 80044b6:	f7ff fee7 	bl	8004288 <_printf_common>
 80044ba:	3001      	adds	r0, #1
 80044bc:	d14a      	bne.n	8004554 <_printf_i+0x1f0>
 80044be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044c2:	b004      	add	sp, #16
 80044c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	f043 0320 	orr.w	r3, r3, #32
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	4832      	ldr	r0, [pc, #200]	@ (800459c <_printf_i+0x238>)
 80044d2:	2778      	movs	r7, #120	@ 0x78
 80044d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	6831      	ldr	r1, [r6, #0]
 80044dc:	061f      	lsls	r7, r3, #24
 80044de:	f851 5b04 	ldr.w	r5, [r1], #4
 80044e2:	d402      	bmi.n	80044ea <_printf_i+0x186>
 80044e4:	065f      	lsls	r7, r3, #25
 80044e6:	bf48      	it	mi
 80044e8:	b2ad      	uxthmi	r5, r5
 80044ea:	6031      	str	r1, [r6, #0]
 80044ec:	07d9      	lsls	r1, r3, #31
 80044ee:	bf44      	itt	mi
 80044f0:	f043 0320 	orrmi.w	r3, r3, #32
 80044f4:	6023      	strmi	r3, [r4, #0]
 80044f6:	b11d      	cbz	r5, 8004500 <_printf_i+0x19c>
 80044f8:	2310      	movs	r3, #16
 80044fa:	e7ad      	b.n	8004458 <_printf_i+0xf4>
 80044fc:	4826      	ldr	r0, [pc, #152]	@ (8004598 <_printf_i+0x234>)
 80044fe:	e7e9      	b.n	80044d4 <_printf_i+0x170>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	f023 0320 	bic.w	r3, r3, #32
 8004506:	6023      	str	r3, [r4, #0]
 8004508:	e7f6      	b.n	80044f8 <_printf_i+0x194>
 800450a:	4616      	mov	r6, r2
 800450c:	e7bd      	b.n	800448a <_printf_i+0x126>
 800450e:	6833      	ldr	r3, [r6, #0]
 8004510:	6825      	ldr	r5, [r4, #0]
 8004512:	6961      	ldr	r1, [r4, #20]
 8004514:	1d18      	adds	r0, r3, #4
 8004516:	6030      	str	r0, [r6, #0]
 8004518:	062e      	lsls	r6, r5, #24
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	d501      	bpl.n	8004522 <_printf_i+0x1be>
 800451e:	6019      	str	r1, [r3, #0]
 8004520:	e002      	b.n	8004528 <_printf_i+0x1c4>
 8004522:	0668      	lsls	r0, r5, #25
 8004524:	d5fb      	bpl.n	800451e <_printf_i+0x1ba>
 8004526:	8019      	strh	r1, [r3, #0]
 8004528:	2300      	movs	r3, #0
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	4616      	mov	r6, r2
 800452e:	e7bc      	b.n	80044aa <_printf_i+0x146>
 8004530:	6833      	ldr	r3, [r6, #0]
 8004532:	1d1a      	adds	r2, r3, #4
 8004534:	6032      	str	r2, [r6, #0]
 8004536:	681e      	ldr	r6, [r3, #0]
 8004538:	6862      	ldr	r2, [r4, #4]
 800453a:	2100      	movs	r1, #0
 800453c:	4630      	mov	r0, r6
 800453e:	f7fb fe6f 	bl	8000220 <memchr>
 8004542:	b108      	cbz	r0, 8004548 <_printf_i+0x1e4>
 8004544:	1b80      	subs	r0, r0, r6
 8004546:	6060      	str	r0, [r4, #4]
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	6123      	str	r3, [r4, #16]
 800454c:	2300      	movs	r3, #0
 800454e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004552:	e7aa      	b.n	80044aa <_printf_i+0x146>
 8004554:	6923      	ldr	r3, [r4, #16]
 8004556:	4632      	mov	r2, r6
 8004558:	4649      	mov	r1, r9
 800455a:	4640      	mov	r0, r8
 800455c:	47d0      	blx	sl
 800455e:	3001      	adds	r0, #1
 8004560:	d0ad      	beq.n	80044be <_printf_i+0x15a>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	079b      	lsls	r3, r3, #30
 8004566:	d413      	bmi.n	8004590 <_printf_i+0x22c>
 8004568:	68e0      	ldr	r0, [r4, #12]
 800456a:	9b03      	ldr	r3, [sp, #12]
 800456c:	4298      	cmp	r0, r3
 800456e:	bfb8      	it	lt
 8004570:	4618      	movlt	r0, r3
 8004572:	e7a6      	b.n	80044c2 <_printf_i+0x15e>
 8004574:	2301      	movs	r3, #1
 8004576:	4632      	mov	r2, r6
 8004578:	4649      	mov	r1, r9
 800457a:	4640      	mov	r0, r8
 800457c:	47d0      	blx	sl
 800457e:	3001      	adds	r0, #1
 8004580:	d09d      	beq.n	80044be <_printf_i+0x15a>
 8004582:	3501      	adds	r5, #1
 8004584:	68e3      	ldr	r3, [r4, #12]
 8004586:	9903      	ldr	r1, [sp, #12]
 8004588:	1a5b      	subs	r3, r3, r1
 800458a:	42ab      	cmp	r3, r5
 800458c:	dcf2      	bgt.n	8004574 <_printf_i+0x210>
 800458e:	e7eb      	b.n	8004568 <_printf_i+0x204>
 8004590:	2500      	movs	r5, #0
 8004592:	f104 0619 	add.w	r6, r4, #25
 8004596:	e7f5      	b.n	8004584 <_printf_i+0x220>
 8004598:	08004929 	.word	0x08004929
 800459c:	0800493a 	.word	0x0800493a

080045a0 <__sflush_r>:
 80045a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a8:	0716      	lsls	r6, r2, #28
 80045aa:	4605      	mov	r5, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	d454      	bmi.n	800465a <__sflush_r+0xba>
 80045b0:	684b      	ldr	r3, [r1, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	dc02      	bgt.n	80045bc <__sflush_r+0x1c>
 80045b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	dd48      	ble.n	800464e <__sflush_r+0xae>
 80045bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045be:	2e00      	cmp	r6, #0
 80045c0:	d045      	beq.n	800464e <__sflush_r+0xae>
 80045c2:	2300      	movs	r3, #0
 80045c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045c8:	682f      	ldr	r7, [r5, #0]
 80045ca:	6a21      	ldr	r1, [r4, #32]
 80045cc:	602b      	str	r3, [r5, #0]
 80045ce:	d030      	beq.n	8004632 <__sflush_r+0x92>
 80045d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	0759      	lsls	r1, r3, #29
 80045d6:	d505      	bpl.n	80045e4 <__sflush_r+0x44>
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045de:	b10b      	cbz	r3, 80045e4 <__sflush_r+0x44>
 80045e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045e2:	1ad2      	subs	r2, r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045e8:	6a21      	ldr	r1, [r4, #32]
 80045ea:	4628      	mov	r0, r5
 80045ec:	47b0      	blx	r6
 80045ee:	1c43      	adds	r3, r0, #1
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	d106      	bne.n	8004602 <__sflush_r+0x62>
 80045f4:	6829      	ldr	r1, [r5, #0]
 80045f6:	291d      	cmp	r1, #29
 80045f8:	d82b      	bhi.n	8004652 <__sflush_r+0xb2>
 80045fa:	4a2a      	ldr	r2, [pc, #168]	@ (80046a4 <__sflush_r+0x104>)
 80045fc:	40ca      	lsrs	r2, r1
 80045fe:	07d6      	lsls	r6, r2, #31
 8004600:	d527      	bpl.n	8004652 <__sflush_r+0xb2>
 8004602:	2200      	movs	r2, #0
 8004604:	6062      	str	r2, [r4, #4]
 8004606:	04d9      	lsls	r1, r3, #19
 8004608:	6922      	ldr	r2, [r4, #16]
 800460a:	6022      	str	r2, [r4, #0]
 800460c:	d504      	bpl.n	8004618 <__sflush_r+0x78>
 800460e:	1c42      	adds	r2, r0, #1
 8004610:	d101      	bne.n	8004616 <__sflush_r+0x76>
 8004612:	682b      	ldr	r3, [r5, #0]
 8004614:	b903      	cbnz	r3, 8004618 <__sflush_r+0x78>
 8004616:	6560      	str	r0, [r4, #84]	@ 0x54
 8004618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800461a:	602f      	str	r7, [r5, #0]
 800461c:	b1b9      	cbz	r1, 800464e <__sflush_r+0xae>
 800461e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004622:	4299      	cmp	r1, r3
 8004624:	d002      	beq.n	800462c <__sflush_r+0x8c>
 8004626:	4628      	mov	r0, r5
 8004628:	f7ff fbf4 	bl	8003e14 <_free_r>
 800462c:	2300      	movs	r3, #0
 800462e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004630:	e00d      	b.n	800464e <__sflush_r+0xae>
 8004632:	2301      	movs	r3, #1
 8004634:	4628      	mov	r0, r5
 8004636:	47b0      	blx	r6
 8004638:	4602      	mov	r2, r0
 800463a:	1c50      	adds	r0, r2, #1
 800463c:	d1c9      	bne.n	80045d2 <__sflush_r+0x32>
 800463e:	682b      	ldr	r3, [r5, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0c6      	beq.n	80045d2 <__sflush_r+0x32>
 8004644:	2b1d      	cmp	r3, #29
 8004646:	d001      	beq.n	800464c <__sflush_r+0xac>
 8004648:	2b16      	cmp	r3, #22
 800464a:	d11e      	bne.n	800468a <__sflush_r+0xea>
 800464c:	602f      	str	r7, [r5, #0]
 800464e:	2000      	movs	r0, #0
 8004650:	e022      	b.n	8004698 <__sflush_r+0xf8>
 8004652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004656:	b21b      	sxth	r3, r3
 8004658:	e01b      	b.n	8004692 <__sflush_r+0xf2>
 800465a:	690f      	ldr	r7, [r1, #16]
 800465c:	2f00      	cmp	r7, #0
 800465e:	d0f6      	beq.n	800464e <__sflush_r+0xae>
 8004660:	0793      	lsls	r3, r2, #30
 8004662:	680e      	ldr	r6, [r1, #0]
 8004664:	bf08      	it	eq
 8004666:	694b      	ldreq	r3, [r1, #20]
 8004668:	600f      	str	r7, [r1, #0]
 800466a:	bf18      	it	ne
 800466c:	2300      	movne	r3, #0
 800466e:	eba6 0807 	sub.w	r8, r6, r7
 8004672:	608b      	str	r3, [r1, #8]
 8004674:	f1b8 0f00 	cmp.w	r8, #0
 8004678:	dde9      	ble.n	800464e <__sflush_r+0xae>
 800467a:	6a21      	ldr	r1, [r4, #32]
 800467c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800467e:	4643      	mov	r3, r8
 8004680:	463a      	mov	r2, r7
 8004682:	4628      	mov	r0, r5
 8004684:	47b0      	blx	r6
 8004686:	2800      	cmp	r0, #0
 8004688:	dc08      	bgt.n	800469c <__sflush_r+0xfc>
 800468a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800468e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800469c:	4407      	add	r7, r0
 800469e:	eba8 0800 	sub.w	r8, r8, r0
 80046a2:	e7e7      	b.n	8004674 <__sflush_r+0xd4>
 80046a4:	20400001 	.word	0x20400001

080046a8 <_fflush_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	690b      	ldr	r3, [r1, #16]
 80046ac:	4605      	mov	r5, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	b913      	cbnz	r3, 80046b8 <_fflush_r+0x10>
 80046b2:	2500      	movs	r5, #0
 80046b4:	4628      	mov	r0, r5
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	b118      	cbz	r0, 80046c2 <_fflush_r+0x1a>
 80046ba:	6a03      	ldr	r3, [r0, #32]
 80046bc:	b90b      	cbnz	r3, 80046c2 <_fflush_r+0x1a>
 80046be:	f7ff f9a7 	bl	8003a10 <__sinit>
 80046c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f3      	beq.n	80046b2 <_fflush_r+0xa>
 80046ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046cc:	07d0      	lsls	r0, r2, #31
 80046ce:	d404      	bmi.n	80046da <_fflush_r+0x32>
 80046d0:	0599      	lsls	r1, r3, #22
 80046d2:	d402      	bmi.n	80046da <_fflush_r+0x32>
 80046d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046d6:	f7ff fb9a 	bl	8003e0e <__retarget_lock_acquire_recursive>
 80046da:	4628      	mov	r0, r5
 80046dc:	4621      	mov	r1, r4
 80046de:	f7ff ff5f 	bl	80045a0 <__sflush_r>
 80046e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046e4:	07da      	lsls	r2, r3, #31
 80046e6:	4605      	mov	r5, r0
 80046e8:	d4e4      	bmi.n	80046b4 <_fflush_r+0xc>
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	059b      	lsls	r3, r3, #22
 80046ee:	d4e1      	bmi.n	80046b4 <_fflush_r+0xc>
 80046f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046f2:	f7ff fb8d 	bl	8003e10 <__retarget_lock_release_recursive>
 80046f6:	e7dd      	b.n	80046b4 <_fflush_r+0xc>

080046f8 <__swhatbuf_r>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	460c      	mov	r4, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	2900      	cmp	r1, #0
 8004702:	b096      	sub	sp, #88	@ 0x58
 8004704:	4615      	mov	r5, r2
 8004706:	461e      	mov	r6, r3
 8004708:	da0d      	bge.n	8004726 <__swhatbuf_r+0x2e>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	bf14      	ite	ne
 8004716:	2340      	movne	r3, #64	@ 0x40
 8004718:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800471c:	2000      	movs	r0, #0
 800471e:	6031      	str	r1, [r6, #0]
 8004720:	602b      	str	r3, [r5, #0]
 8004722:	b016      	add	sp, #88	@ 0x58
 8004724:	bd70      	pop	{r4, r5, r6, pc}
 8004726:	466a      	mov	r2, sp
 8004728:	f000 f87c 	bl	8004824 <_fstat_r>
 800472c:	2800      	cmp	r0, #0
 800472e:	dbec      	blt.n	800470a <__swhatbuf_r+0x12>
 8004730:	9901      	ldr	r1, [sp, #4]
 8004732:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004736:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800473a:	4259      	negs	r1, r3
 800473c:	4159      	adcs	r1, r3
 800473e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004742:	e7eb      	b.n	800471c <__swhatbuf_r+0x24>

08004744 <__smakebuf_r>:
 8004744:	898b      	ldrh	r3, [r1, #12]
 8004746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004748:	079d      	lsls	r5, r3, #30
 800474a:	4606      	mov	r6, r0
 800474c:	460c      	mov	r4, r1
 800474e:	d507      	bpl.n	8004760 <__smakebuf_r+0x1c>
 8004750:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	6123      	str	r3, [r4, #16]
 8004758:	2301      	movs	r3, #1
 800475a:	6163      	str	r3, [r4, #20]
 800475c:	b003      	add	sp, #12
 800475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004760:	ab01      	add	r3, sp, #4
 8004762:	466a      	mov	r2, sp
 8004764:	f7ff ffc8 	bl	80046f8 <__swhatbuf_r>
 8004768:	9f00      	ldr	r7, [sp, #0]
 800476a:	4605      	mov	r5, r0
 800476c:	4639      	mov	r1, r7
 800476e:	4630      	mov	r0, r6
 8004770:	f7ff fbbc 	bl	8003eec <_malloc_r>
 8004774:	b948      	cbnz	r0, 800478a <__smakebuf_r+0x46>
 8004776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800477a:	059a      	lsls	r2, r3, #22
 800477c:	d4ee      	bmi.n	800475c <__smakebuf_r+0x18>
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	f043 0302 	orr.w	r3, r3, #2
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	e7e2      	b.n	8004750 <__smakebuf_r+0xc>
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	6020      	str	r0, [r4, #0]
 800478e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800479a:	b15b      	cbz	r3, 80047b4 <__smakebuf_r+0x70>
 800479c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047a0:	4630      	mov	r0, r6
 80047a2:	f000 f851 	bl	8004848 <_isatty_r>
 80047a6:	b128      	cbz	r0, 80047b4 <__smakebuf_r+0x70>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	431d      	orrs	r5, r3
 80047b8:	81a5      	strh	r5, [r4, #12]
 80047ba:	e7cf      	b.n	800475c <__smakebuf_r+0x18>

080047bc <_putc_r>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	460d      	mov	r5, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	4606      	mov	r6, r0
 80047c4:	b118      	cbz	r0, 80047ce <_putc_r+0x12>
 80047c6:	6a03      	ldr	r3, [r0, #32]
 80047c8:	b90b      	cbnz	r3, 80047ce <_putc_r+0x12>
 80047ca:	f7ff f921 	bl	8003a10 <__sinit>
 80047ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047d0:	07d8      	lsls	r0, r3, #31
 80047d2:	d405      	bmi.n	80047e0 <_putc_r+0x24>
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	0599      	lsls	r1, r3, #22
 80047d8:	d402      	bmi.n	80047e0 <_putc_r+0x24>
 80047da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047dc:	f7ff fb17 	bl	8003e0e <__retarget_lock_acquire_recursive>
 80047e0:	68a3      	ldr	r3, [r4, #8]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	60a3      	str	r3, [r4, #8]
 80047e8:	da05      	bge.n	80047f6 <_putc_r+0x3a>
 80047ea:	69a2      	ldr	r2, [r4, #24]
 80047ec:	4293      	cmp	r3, r2
 80047ee:	db12      	blt.n	8004816 <_putc_r+0x5a>
 80047f0:	b2eb      	uxtb	r3, r5
 80047f2:	2b0a      	cmp	r3, #10
 80047f4:	d00f      	beq.n	8004816 <_putc_r+0x5a>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	701d      	strb	r5, [r3, #0]
 80047fe:	b2ed      	uxtb	r5, r5
 8004800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004802:	07da      	lsls	r2, r3, #31
 8004804:	d405      	bmi.n	8004812 <_putc_r+0x56>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	059b      	lsls	r3, r3, #22
 800480a:	d402      	bmi.n	8004812 <_putc_r+0x56>
 800480c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800480e:	f7ff faff 	bl	8003e10 <__retarget_lock_release_recursive>
 8004812:	4628      	mov	r0, r5
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	4629      	mov	r1, r5
 8004818:	4622      	mov	r2, r4
 800481a:	4630      	mov	r0, r6
 800481c:	f7ff f9e9 	bl	8003bf2 <__swbuf_r>
 8004820:	4605      	mov	r5, r0
 8004822:	e7ed      	b.n	8004800 <_putc_r+0x44>

08004824 <_fstat_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d07      	ldr	r5, [pc, #28]	@ (8004844 <_fstat_r+0x20>)
 8004828:	2300      	movs	r3, #0
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	4611      	mov	r1, r2
 8004830:	602b      	str	r3, [r5, #0]
 8004832:	f7fc f93f 	bl	8000ab4 <_fstat>
 8004836:	1c43      	adds	r3, r0, #1
 8004838:	d102      	bne.n	8004840 <_fstat_r+0x1c>
 800483a:	682b      	ldr	r3, [r5, #0]
 800483c:	b103      	cbz	r3, 8004840 <_fstat_r+0x1c>
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	bf00      	nop
 8004844:	200002b0 	.word	0x200002b0

08004848 <_isatty_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d06      	ldr	r5, [pc, #24]	@ (8004864 <_isatty_r+0x1c>)
 800484c:	2300      	movs	r3, #0
 800484e:	4604      	mov	r4, r0
 8004850:	4608      	mov	r0, r1
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	f7fc f93e 	bl	8000ad4 <_isatty>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_isatty_r+0x1a>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_isatty_r+0x1a>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	200002b0 	.word	0x200002b0

08004868 <_sbrk_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d06      	ldr	r5, [pc, #24]	@ (8004884 <_sbrk_r+0x1c>)
 800486c:	2300      	movs	r3, #0
 800486e:	4604      	mov	r4, r0
 8004870:	4608      	mov	r0, r1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	f7fc f946 	bl	8000b04 <_sbrk>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_sbrk_r+0x1a>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	b103      	cbz	r3, 8004882 <_sbrk_r+0x1a>
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	200002b0 	.word	0x200002b0

08004888 <_init>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr

08004894 <_fini>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr
